   1               		.file	"spiStd.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 197               	.global	__vector_8
 199               	__vector_8:
 200               		.stabd	46,0,0
   0:spiStd.c      **** #include <stdlib.h>
   1:spiStd.c      **** #include <avr/interrupt.h>
   2:spiStd.c      **** #include <avr/io.h>
   3:spiStd.c      **** #include "FreeRTOS.h"
   4:spiStd.c      **** #include "queue.h"
   5:spiStd.c      **** #include "task.h"
   6:spiStd.c      **** #include "hardware.h"
   7:spiStd.c      **** #include "spiStd.h"
   8:spiStd.c      **** #include "main.h"
   9:spiStd.c      **** #include "semphr.h"
  10:spiStd.c      **** 
  11:spiStd.c      **** void spiInit(void)
  12:spiStd.c      **** {
  13:spiStd.c      ****   
  14:spiStd.c      ****   portENTER_CRITICAL();
  15:spiStd.c      ****   {    
  16:spiStd.c      ****     vSemaphoreCreateBinary(xSemaphoreSpiSS); 
  17:spiStd.c      ****     xSpiRx          = xQueueCreate(1, 1);
  18:spiStd.c      ****   }
  19:spiStd.c      ****   //SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPIE);
  20:spiStd.c      ****   SPCR = (1<<SPE)|(1<<MSTR);
  21:spiStd.c      ****   SPSR |= (1<<SPI2X);
  22:spiStd.c      ****   portEXIT_CRITICAL();
  23:spiStd.c      ****   
  24:spiStd.c      ****   
  25:spiStd.c      ****   
  26:spiStd.c      ****   //Enc. SPI works in mode(0,0)
  27:spiStd.c      ****   //SCK be at Idle in a low state, selectable clock polarity is not supported.
  28:spiStd.c      ****   //Commands and data are sent to the device via the SI pin, with data being clocked in on the risi
  29:spiStd.c      ****   //Data is driven out by the ENC28J60 on the SO line, on the falling edge of SCK.
  30:spiStd.c      ****   //The CS pin must be held low while any operation is performed and returned high when finished
  31:spiStd.c      **** 
  32:spiStd.c      **** }
  33:spiStd.c      **** 
  34:spiStd.c      **** void disableAllDevices(void)
  35:spiStd.c      **** {
  36:spiStd.c      ****   PORTB |= 0xF0;
  37:spiStd.c      ****   PORTD |= 0xF0;
  38:spiStd.c      ****   
  39:spiStd.c      ****   PORTE |= DISABLE_SS_ON_PORTE;
  40:spiStd.c      ****   PORTG |= DISABLE_SS_ON_PORTG;
  41:spiStd.c      ****   
  42:spiStd.c      ****   xSemaphoreGive(xSemaphoreSpiSS);
  43:spiStd.c      **** }
  44:spiStd.c      **** 
  45:spiStd.c      **** void enableExternalSpiDevice(uint8_t devices)
  46:spiStd.c      **** {
  47:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
  48:spiStd.c      **** #if SS_ON_PORTD_MASK == 0xFF
  49:spiStd.c      **** //  PORTD = devices;
  50:spiStd.c      **** #else
  51:spiStd.c      **** //  PORTD = (devices & SS_ON_PORTD_MASK);
  52:spiStd.c      **** #endif
  53:spiStd.c      **** }
  54:spiStd.c      **** 
  55:spiStd.c      **** void enableEnc(void)
  56:spiStd.c      **** {
  57:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
  58:spiStd.c      ****   PORTE &= ~DISABLE_SS_ON_PORTE;
  59:spiStd.c      **** }
  60:spiStd.c      **** 
  61:spiStd.c      **** void enableSD(void)
  62:spiStd.c      **** {
  63:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
  64:spiStd.c      ****   PORTG &= ~0x08;
  65:spiStd.c      **** }
  66:spiStd.c      **** 
  67:spiStd.c      **** uint8_t spiSend(uint8_t data)
  68:spiStd.c      **** {
  69:spiStd.c      ****   uint8_t result;
  70:spiStd.c      ****   SPDR = data;
  71:spiStd.c      ****   xQueueReceive(xSpiRx, &result, 10); 
  72:spiStd.c      ****   return result;
  73:spiStd.c      **** }
  74:spiStd.c      **** 
  75:spiStd.c      **** ISR(SPI_STC_vect)
  76:spiStd.c      **** {
  77:spiStd.c      ****   static signed portBASE_TYPE xHigherPriorityTaskWoken; 
  78:spiStd.c      **** 
  79:spiStd.c      ****   static uint8_t data;
  80:spiStd.c      ****   data = SPDR;
  81:spiStd.c      ****   
  82:spiStd.c      ****   xQueueSendFromISR(xSpiRx, &data, &xHigherPriorityTaskWoken);
  83:spiStd.c      **** 
  84:spiStd.c      ****   if( xHigherPriorityTaskWoken )
  85:spiStd.c      ****   {
  86:spiStd.c      ****     taskYIELD();
  87:spiStd.c      ****   }
  88:spiStd.c      ****   
  89:spiStd.c      ****   //clear SPI interrupt SPI |= 1;
  90:spiStd.c      **** }
  91:spiStd.c      **** 
  92:spiStd.c      **** ISR(INT7_vect)
  93:spiStd.c      **** {
 202               	.LM0:
 203               	.LFBB1:
 204 0000 1F92      		push __zero_reg__
 205 0002 0F92      		push r0
 206 0004 0FB6      		in r0,__SREG__
 207 0006 0F92      		push r0
 208 0008 1124      		clr __zero_reg__
 209               	/* prologue: Signal */
 210               	/* frame size = 0 */
 211               	/* epilogue start */
  94:spiStd.c      ****   
  95:spiStd.c      ****   
  96:spiStd.c      **** }
 213               	.LM1:
 214 000a 0F90      		pop r0
 215 000c 0FBE      		out __SREG__,r0
 216 000e 0F90      		pop r0
 217 0010 1F90      		pop __zero_reg__
 218 0012 1895      		reti
 220               	.Lscope1:
 222               		.stabd	78,0,0
 224               	.global	__vector_17
 226               	__vector_17:
 227               		.stabd	46,0,0
  77:spiStd.c      **** {
 229               	.LM2:
 230               	.LFBB2:
 231 0014 1F92      		push __zero_reg__
 232 0016 0F92      		push r0
 233 0018 0FB6      		in r0,__SREG__
 234 001a 0F92      		push r0
 235 001c 1124      		clr __zero_reg__
 236 001e 2F93      		push r18
 237 0020 3F93      		push r19
 238 0022 4F93      		push r20
 239 0024 5F93      		push r21
 240 0026 6F93      		push r22
 241 0028 7F93      		push r23
 242 002a 8F93      		push r24
 243 002c 9F93      		push r25
 244 002e AF93      		push r26
 245 0030 BF93      		push r27
 246 0032 EF93      		push r30
 247 0034 FF93      		push r31
 248               	/* prologue: Signal */
 249               	/* frame size = 0 */
  81:spiStd.c      ****   data = SPDR;
 251               	.LM3:
 252 0036 8FB1      		in r24,47-32
 253 0038 8093 0000 		sts data.2431,r24
  83:spiStd.c      ****   xQueueSendFromISR(xSpiRx, &data, &xHigherPriorityTaskWoken);
 255               	.LM4:
 256 003c 8091 0000 		lds r24,xSpiRx
 257 0040 9091 0000 		lds r25,(xSpiRx)+1
 258 0044 60E0      		ldi r22,lo8(data.2431)
 259 0046 70E0      		ldi r23,hi8(data.2431)
 260 0048 40E0      		ldi r20,lo8(xHigherPriorityTaskWoken.2430)
 261 004a 50E0      		ldi r21,hi8(xHigherPriorityTaskWoken.2430)
 262 004c 20E0      		ldi r18,lo8(0)
 263 004e 0E94 0000 		call xQueueGenericSendFromISR
  85:spiStd.c      ****   if( xHigherPriorityTaskWoken )
 265               	.LM5:
 266 0052 8091 0000 		lds r24,xHigherPriorityTaskWoken.2430
 267 0056 8823      		tst r24
 268 0058 01F0      		breq .L5
  87:spiStd.c      ****     taskYIELD();
 270               	.LM6:
 271 005a 0E94 0000 		call vPortYield
 272               	.L5:
 273               	/* epilogue start */
  91:spiStd.c      **** }
 275               	.LM7:
 276 005e FF91      		pop r31
 277 0060 EF91      		pop r30
 278 0062 BF91      		pop r27
 279 0064 AF91      		pop r26
 280 0066 9F91      		pop r25
 281 0068 8F91      		pop r24
 282 006a 7F91      		pop r23
 283 006c 6F91      		pop r22
 284 006e 5F91      		pop r21
 285 0070 4F91      		pop r20
 286 0072 3F91      		pop r19
 287 0074 2F91      		pop r18
 288 0076 0F90      		pop r0
 289 0078 0FBE      		out __SREG__,r0
 290 007a 0F90      		pop r0
 291 007c 1F90      		pop __zero_reg__
 292 007e 1895      		reti
 298               	.Lscope2:
 300               		.stabd	78,0,0
 303               	.global	spiSend
 305               	spiSend:
 306               		.stabd	46,0,0
  69:spiStd.c      **** {
 308               	.LM8:
 309               	.LFBB3:
 310 0080 DF93      		push r29
 311 0082 CF93      		push r28
 312 0084 0F92      		push __tmp_reg__
 313 0086 CDB7      		in r28,__SP_L__
 314 0088 DEB7      		in r29,__SP_H__
 315               	/* prologue: function */
 316               	/* frame size = 1 */
  71:spiStd.c      ****   SPDR = data;
 318               	.LM9:
 319 008a 8FB9      		out 47-32,r24
  72:spiStd.c      ****   xQueueReceive(xSpiRx, &result, 10); 
 321               	.LM10:
 322 008c 8091 0000 		lds r24,xSpiRx
 323 0090 9091 0000 		lds r25,(xSpiRx)+1
 324 0094 BE01      		movw r22,r28
 325 0096 6F5F      		subi r22,lo8(-(1))
 326 0098 7F4F      		sbci r23,hi8(-(1))
 327 009a 4AE0      		ldi r20,lo8(10)
 328 009c 50E0      		ldi r21,hi8(10)
 329 009e 20E0      		ldi r18,lo8(0)
 330 00a0 0E94 0000 		call xQueueGenericReceive
  74:spiStd.c      **** }
 332               	.LM11:
 333 00a4 8981      		ldd r24,Y+1
 334               	/* epilogue start */
 335 00a6 0F90      		pop __tmp_reg__
 336 00a8 CF91      		pop r28
 337 00aa DF91      		pop r29
 338 00ac 0895      		ret
 343               	.Lscope3:
 345               		.stabd	78,0,0
 347               	.global	enableSD
 349               	enableSD:
 350               		.stabd	46,0,0
  63:spiStd.c      **** {
 352               	.LM12:
 353               	.LFBB4:
 354               	/* prologue: function */
 355               	/* frame size = 0 */
  64:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
 357               	.LM13:
 358 00ae 8091 0000 		lds r24,xSemaphoreSpiSS
 359 00b2 9091 0000 		lds r25,(xSemaphoreSpiSS)+1
 360 00b6 60E0      		ldi r22,lo8(0)
 361 00b8 70E0      		ldi r23,hi8(0)
 362 00ba 4FEF      		ldi r20,lo8(-1)
 363 00bc 5FEF      		ldi r21,hi8(-1)
 364 00be 20E0      		ldi r18,lo8(0)
 365 00c0 0E94 0000 		call xQueueGenericReceive
  65:spiStd.c      ****   PORTG &= ~0x08;
 367               	.LM14:
 368 00c4 E5E6      		ldi r30,lo8(101)
 369 00c6 F0E0      		ldi r31,hi8(101)
 370 00c8 8081      		ld r24,Z
 371 00ca 877F      		andi r24,lo8(-9)
 372 00cc 8083      		st Z,r24
 373               	/* epilogue start */
  66:spiStd.c      **** }
 375               	.LM15:
 376 00ce 0895      		ret
 378               	.Lscope4:
 380               		.stabd	78,0,0
 382               	.global	enableEnc
 384               	enableEnc:
 385               		.stabd	46,0,0
  57:spiStd.c      **** {
 387               	.LM16:
 388               	.LFBB5:
 389               	/* prologue: function */
 390               	/* frame size = 0 */
  58:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
 392               	.LM17:
 393 00d0 8091 0000 		lds r24,xSemaphoreSpiSS
 394 00d4 9091 0000 		lds r25,(xSemaphoreSpiSS)+1
 395 00d8 60E0      		ldi r22,lo8(0)
 396 00da 70E0      		ldi r23,hi8(0)
 397 00dc 4FEF      		ldi r20,lo8(-1)
 398 00de 5FEF      		ldi r21,hi8(-1)
 399 00e0 20E0      		ldi r18,lo8(0)
 400 00e2 0E94 0000 		call xQueueGenericReceive
  59:spiStd.c      ****   PORTE &= ~DISABLE_SS_ON_PORTE;
 402               	.LM18:
 403 00e6 1B98      		cbi 35-32,3
 404               	/* epilogue start */
  60:spiStd.c      **** }
 406               	.LM19:
 407 00e8 0895      		ret
 409               	.Lscope5:
 411               		.stabd	78,0,0
 414               	.global	enableExternalSpiDevice
 416               	enableExternalSpiDevice:
 417               		.stabd	46,0,0
  47:spiStd.c      **** {
 419               	.LM20:
 420               	.LFBB6:
 421               	/* prologue: function */
 422               	/* frame size = 0 */
  48:spiStd.c      ****   xSemaphoreTake(xSemaphoreSpiSS, portMAX_DELAY);
 424               	.LM21:
 425 00ea 8091 0000 		lds r24,xSemaphoreSpiSS
 426 00ee 9091 0000 		lds r25,(xSemaphoreSpiSS)+1
 427 00f2 60E0      		ldi r22,lo8(0)
 428 00f4 70E0      		ldi r23,hi8(0)
 429 00f6 4FEF      		ldi r20,lo8(-1)
 430 00f8 5FEF      		ldi r21,hi8(-1)
 431 00fa 20E0      		ldi r18,lo8(0)
 432 00fc 0E94 0000 		call xQueueGenericReceive
 433               	/* epilogue start */
  54:spiStd.c      **** }
 435               	.LM22:
 436 0100 0895      		ret
 438               	.Lscope6:
 440               		.stabd	78,0,0
 442               	.global	disableAllDevices
 444               	disableAllDevices:
 445               		.stabd	46,0,0
  36:spiStd.c      **** {
 447               	.LM23:
 448               	.LFBB7:
 449               	/* prologue: function */
 450               	/* frame size = 0 */
  37:spiStd.c      ****   PORTB |= 0xF0;
 452               	.LM24:
 453 0102 88B3      		in r24,56-32
 454 0104 806F      		ori r24,lo8(-16)
 455 0106 88BB      		out 56-32,r24
  38:spiStd.c      ****   PORTD |= 0xF0;
 457               	.LM25:
 458 0108 82B3      		in r24,50-32
 459 010a 806F      		ori r24,lo8(-16)
 460 010c 82BB      		out 50-32,r24
  40:spiStd.c      ****   PORTE |= DISABLE_SS_ON_PORTE;
 462               	.LM26:
 463 010e 1B9A      		sbi 35-32,3
  41:spiStd.c      ****   PORTG |= DISABLE_SS_ON_PORTG;
 465               	.LM27:
 466 0110 E5E6      		ldi r30,lo8(101)
 467 0112 F0E0      		ldi r31,hi8(101)
 468 0114 8081      		ld r24,Z
 469 0116 8860      		ori r24,lo8(8)
 470 0118 8083      		st Z,r24
  43:spiStd.c      ****   xSemaphoreGive(xSemaphoreSpiSS);
 472               	.LM28:
 473 011a 8091 0000 		lds r24,xSemaphoreSpiSS
 474 011e 9091 0000 		lds r25,(xSemaphoreSpiSS)+1
 475 0122 60E0      		ldi r22,lo8(0)
 476 0124 70E0      		ldi r23,hi8(0)
 477 0126 40E0      		ldi r20,lo8(0)
 478 0128 50E0      		ldi r21,hi8(0)
 479 012a 20E0      		ldi r18,lo8(0)
 480 012c 0E94 0000 		call xQueueGenericSend
 481               	/* epilogue start */
  44:spiStd.c      **** }
 483               	.LM29:
 484 0130 0895      		ret
 486               	.Lscope7:
 488               		.stabd	78,0,0
 490               	.global	spiInit
 492               	spiInit:
 493               		.stabd	46,0,0
  13:spiStd.c      **** {
 495               	.LM30:
 496               	.LFBB8:
 497               	/* prologue: function */
 498               	/* frame size = 0 */
  15:spiStd.c      ****   portENTER_CRITICAL();
 500               	.LM31:
 501               	/* #APP */
 502               	 ;  15 "spiStd.c" 1
 503 0132 0FB6      		in		__tmp_reg__, __SREG__
 504               	 ;  0 "" 2
 505               	 ;  15 "spiStd.c" 1
 506 0134 F894      		cli
 507               	 ;  0 "" 2
 508               	 ;  15 "spiStd.c" 1
 509 0136 0F92      		push	__tmp_reg__
 510               	 ;  0 "" 2
  17:spiStd.c      ****     vSemaphoreCreateBinary(xSemaphoreSpiSS); 
 512               	.LM32:
 513               	/* #NOAPP */
 514 0138 81E0      		ldi r24,lo8(1)
 515 013a 60E0      		ldi r22,lo8(0)
 516 013c 0E94 0000 		call xQueueCreate
 517 0140 9093 0000 		sts (xSemaphoreSpiSS)+1,r25
 518 0144 8093 0000 		sts xSemaphoreSpiSS,r24
 519 0148 0097      		sbiw r24,0
 520 014a 01F0      		breq .L17
 521 014c 60E0      		ldi r22,lo8(0)
 522 014e 70E0      		ldi r23,hi8(0)
 523 0150 40E0      		ldi r20,lo8(0)
 524 0152 50E0      		ldi r21,hi8(0)
 525 0154 20E0      		ldi r18,lo8(0)
 526 0156 0E94 0000 		call xQueueGenericSend
 527               	.L17:
  18:spiStd.c      ****     xSpiRx          = xQueueCreate(1, 1);
 529               	.LM33:
 530 015a 81E0      		ldi r24,lo8(1)
 531 015c 61E0      		ldi r22,lo8(1)
 532 015e 0E94 0000 		call xQueueCreate
 533 0162 9093 0000 		sts (xSpiRx)+1,r25
 534 0166 8093 0000 		sts xSpiRx,r24
  21:spiStd.c      ****   SPCR = (1<<SPE)|(1<<MSTR);
 536               	.LM34:
 537 016a 80E5      		ldi r24,lo8(80)
 538 016c 8DB9      		out 45-32,r24
  22:spiStd.c      ****   SPSR |= (1<<SPI2X);
 540               	.LM35:
 541 016e 709A      		sbi 46-32,0
  23:spiStd.c      ****   portEXIT_CRITICAL();
 543               	.LM36:
 544               	/* #APP */
 545               	 ;  23 "spiStd.c" 1
 546 0170 0F90      		pop		__tmp_reg__
 547               	 ;  0 "" 2
 548               	 ;  23 "spiStd.c" 1
 549 0172 0FBE      		out		__SREG__, __tmp_reg__
 550               	 ;  0 "" 2
 551               	/* epilogue start */
  33:spiStd.c      **** }
 553               	.LM37:
 554               	/* #NOAPP */
 555 0174 0895      		ret
 557               	.Lscope8:
 559               		.stabd	78,0,0
 560               		.lcomm data.2431,1
 561               		.lcomm xHigherPriorityTaskWoken.2430,1
 562               		.comm klastry,128,1
 563               		.comm xSemaphoreSpiSS,2,1
 564               		.comm xSpiRx,2,1
 571               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 spiStd.c
     /tmp/ccN5q3yc.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccN5q3yc.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccN5q3yc.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccN5q3yc.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccN5q3yc.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccN5q3yc.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccN5q3yc.s:199    .text:0000000000000000 __vector_8
     /tmp/ccN5q3yc.s:226    .text:0000000000000014 __vector_17
                             .bss:0000000000000000 data.2431
                            *COM*:0000000000000002 xSpiRx
     /tmp/ccN5q3yc.s:560    .bss:0000000000000001 xHigherPriorityTaskWoken.2430
     /tmp/ccN5q3yc.s:305    .text:0000000000000080 spiSend
     /tmp/ccN5q3yc.s:349    .text:00000000000000ae enableSD
                            *COM*:0000000000000002 xSemaphoreSpiSS
     /tmp/ccN5q3yc.s:384    .text:00000000000000d0 enableEnc
     /tmp/ccN5q3yc.s:416    .text:00000000000000ea enableExternalSpiDevice
     /tmp/ccN5q3yc.s:444    .text:0000000000000102 disableAllDevices
     /tmp/ccN5q3yc.s:492    .text:0000000000000132 spiInit
                            *COM*:0000000000000080 klastry

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
xQueueGenericSendFromISR
vPortYield
xQueueGenericReceive
xQueueGenericSend
xQueueCreate
