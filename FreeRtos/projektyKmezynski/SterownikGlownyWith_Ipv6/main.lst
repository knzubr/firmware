   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 276               		.section	.init4,"ax",@progbits
 278               	.global	initExternalMem
 280               	initExternalMem:
 281               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  
   3:main.c        **** 	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
   4:main.c        **** 	This file is part of the FreeRTOS.org distribution.
   5:main.c        **** 	FreeRTOS.org is free software; you can redistribute it and/or modify it 
   6:main.c        **** 	under the terms of the GNU General Public License (version 2) as published
   7:main.c        **** 	by the Free Software Foundation and modified by the FreeRTOS exception.
   8:main.c        **** 	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
   9:main.c        **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  10:main.c        **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
  11:main.c        **** 	more details.
  12:main.c        **** 
  13:main.c        **** 	You should have received a copy of the GNU General Public License along 
  14:main.c        **** 	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59 
  15:main.c        **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  16:main.c        **** 
  17:main.c        **** 	A special exception to the GPL is included to allow you to distribute a 
  18:main.c        **** 	combined work that includes FreeRTOS.org without being obliged to provide
  19:main.c        **** 	the source code for any proprietary components.  See the licensing section
  20:main.c        **** 	of http://www.FreeRTOS.org for full details.
  21:main.c        **** 	***************************************************************************
  22:main.c        **** 	*                                                                         *
  23:main.c        **** 	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
  24:main.c        **** 	*                                                                         *
  25:main.c        **** 	* This is a concise, step by step, 'hands on' guide that describes both   *
  26:main.c        **** 	* general multitasking concepts and FreeRTOS specifics. It presents and   *
  27:main.c        **** 	* explains numerous examples that are written using the FreeRTOS API.     *
  28:main.c        **** 	* Full source code for all the examples is provided in an accompanying    *
  29:main.c        **** 	* .zip file.                                                              *
  30:main.c        **** 	*                                                                         *
  31:main.c        **** 	***************************************************************************
  32:main.c        **** 	1 tab == 4 spaces!
  33:main.c        **** 	Please ensure to read the configuration and relevant port sections of the
  34:main.c        **** 	online documentation.
  35:main.c        **** 
  36:main.c        **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  37:main.c        **** 	contact details.
  38:main.c        **** 
  39:main.c        **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  40:main.c        **** 	critical systems.
  41:main.c        **** 
  42:main.c        **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  43:main.c        **** 	licensing and training services.
  44:main.c        **** */
  45:main.c        **** 
  46:main.c        **** #include "main.h"
  47:main.c        **** 
  48:main.c        **** uint8_t timer100Hz = 0;
  49:main.c        **** 
  50:main.c        **** xQueueHandle xVtyTx;
  51:main.c        **** xQueueHandle xVtyRec;
  52:main.c        **** 
  53:main.c        **** xQueueHandle xRs485Tx;
  54:main.c        **** xQueueHandle xRs485Rec;
  55:main.c        **** 
  56:main.c        **** 
  57:main.c        **** volatile uint8_t temperature;
  58:main.c        **** volatile uint8_t voltage;
  59:main.c        **** 
  60:main.c        **** 
  61:main.c        **** void vApplicationIdleHook( void );
  62:main.c        **** 
  63:main.c        **** /**
  64:main.c        ****  * RTC clock support
  65:main.c        ****  */
  66:main.c        **** void vApplicationTickHook( void );
  67:main.c        **** 
  68:main.c        **** xTaskHandle xHandleVTY_USB;
  69:main.c        **** xTaskHandle xHandleVTY_UDP;
  70:main.c        **** xTaskHandle xHandleEnc;
  71:main.c        **** xTaskHandle xHandleSensors;
  72:main.c        **** 
  73:main.c        **** void initExternalMem(void)
  74:main.c        **** {
 283               	.LM0:
 284               	.LFBB1:
 285               	/* prologue: naked */
 286               	/* frame size = 0 */
  75:main.c        ****   MCUCR |= _BV(SRE);          //Włączenie pamięci zewnętrznej
 288               	.LM1:
 289 0000 85B7      		in r24,85-32
 290 0002 8068      		ori r24,lo8(-128)
 291 0004 85BF      		out 85-32,r24
  76:main.c        ****   MCUCR |= 0x0E;
 293               	.LM2:
 294 0006 85B7      		in r24,85-32
 295 0008 8E60      		ori r24,lo8(14)
 296 000a 85BF      		out 85-32,r24
 297               	/* epilogue start */
  77:main.c        **** }
 299               	.LM3:
 301               	.Lscope1:
 303               		.stabd	78,0,0
 304               		.text
 306               	.global	vApplicationTickHook
 308               	vApplicationTickHook:
 309               		.stabd	46,0,0
  78:main.c        **** 
  79:main.c        **** cmdState_t *CLIStateSerialUsb;
  80:main.c        **** cmdState_t *CLIStateSerialUdp;
  81:main.c        **** FILE usbStream;
  82:main.c        **** FILE udpStream;
  83:main.c        **** 
  84:main.c        **** streamBuffers_t udpBuffers;
  85:main.c        **** 
  86:main.c        **** portSHORT main( void )
  87:main.c        **** {
  88:main.c        ****   ramDyskInit();              //Inicjalizacja Ram dysku
  89:main.c        ****   hardwareInit();
  90:main.c        ****   spiInit(disableAllSpiDevices);
  91:main.c        **** 
  92:main.c        **** // VTY on serial  
  93:main.c        ****   xSerialPortInitMinimal(); 
  94:main.c        ****   CLIStateSerialUsb  = xmalloc(sizeof(cmdState_t));
  95:main.c        ****   CLIStateSerialUdp  = xmalloc(sizeof(cmdState_t));
  96:main.c        **** 
  97:main.c        **** 
  98:main.c        **** //  cmdStateClear(newCmdState);
  99:main.c        ****   
 100:main.c        ****   sensorsTaskInit();
 101:main.c        ****   loadConfiguration();
 102:main.c        **** 
 103:main.c        ****   initQueueStreamUSB(&usbStream);
 104:main.c        ****   VtyInit(CLIStateSerialUsb, &usbStream);
 105:main.c        **** 
 106:main.c        ****   udpInit();
 107:main.c        ****   socketInit();
 108:main.c        ****   initQueueStream(&udpStream, &udpBuffers, udpSocket->Rx, udpSocket->Tx);
 109:main.c        ****   VtyInit(CLIStateSerialUdp, &udpStream);
 110:main.c        ****   
 111:main.c        ****   xTaskCreate(encTask,        NULL /*"ENC"    */, STACK_SIZE_ENC,       (void *)CLIStateSerialUsb->
 112:main.c        ****   xTaskCreate(vTaskVTYusb,    NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUsb)
 113:main.c        ****   xTaskCreate(vTaskVTYsocket, NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUdp)
 114:main.c        ****   //xTaskCreate(sensorsTask,    NULL /*"Sensors"*/, STACK_SIZE_SENSORS,   NULL,                    
 115:main.c        ****   vTaskStartScheduler();
 116:main.c        ****   return 0;
 117:main.c        **** }
 118:main.c        **** /*-----------------------------------------------------------*/
 119:main.c        **** 
 120:main.c        **** void vApplicationIdleHook( void )
 121:main.c        **** {
 122:main.c        ****   for( ;; )
 123:main.c        ****   {
 124:main.c        ****     vCoRoutineSchedule();
 125:main.c        ****   }
 126:main.c        **** }
 127:main.c        **** 
 128:main.c        **** void vApplicationTickHook( void )
 129:main.c        **** {
 311               	.LM4:
 312               	.LFBB2:
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 130:main.c        ****   static uint8_t tickCntr = configTICK_RATE_HZ;
 131:main.c        ****   if (--tickCntr == 0)
 316               	.LM5:
 317 0000 8091 0000 		lds r24,tickCntr.3152
 318 0004 8150      		subi r24,lo8(-(-1))
 319 0006 8093 0000 		sts tickCntr.3152,r24
 320 000a 8823      		tst r24
 321 000c 01F4      		brne .L5
 132:main.c        ****   {
 133:main.c        ****     tickCntr = configTICK_RATE_HZ;
 323               	.LM6:
 324 000e 84E6      		ldi r24,lo8(100)
 325 0010 8093 0000 		sts tickCntr.3152,r24
 134:main.c        ****     arpTimer();    
 327               	.LM7:
 328 0014 0E94 0000 		call arpTimer
 329               	.L5:
 330 0018 0895      		ret
 335               	.Lscope2:
 337               		.stabd	78,0,0
 339               	.global	vApplicationIdleHook
 341               	vApplicationIdleHook:
 342               		.stabd	46,0,0
 121:main.c        **** {
 344               	.LM8:
 345               	.LFBB3:
 346               	/* prologue: function */
 347               	/* frame size = 0 */
 348               	.L7:
 124:main.c        ****     vCoRoutineSchedule();
 350               	.LM9:
 351 001a 0E94 0000 		call vCoRoutineSchedule
 352 001e 00C0      		rjmp .L7
 354               	.Lscope3:
 356               		.stabd	78,0,0
 358               	.global	main
 360               	main:
 361               		.stabd	46,0,0
  87:main.c        **** {
 363               	.LM10:
 364               	.LFBB4:
 365 0020 AF92      		push r10
 366 0022 BF92      		push r11
 367 0024 CF92      		push r12
 368 0026 DF92      		push r13
 369 0028 EF92      		push r14
 370 002a FF92      		push r15
 371 002c 0F93      		push r16
 372 002e 1F93      		push r17
 373               	/* prologue: function */
 374               	/* frame size = 0 */
  88:main.c        ****   ramDyskInit();              //Inicjalizacja Ram dysku
 376               	.LM11:
 377 0030 0E94 0000 		call ramDyskInit
  89:main.c        ****   hardwareInit();
 379               	.LM12:
 380 0034 0E94 0000 		call hardwareInit
  90:main.c        ****   spiInit(disableAllSpiDevices);
 382               	.LM13:
 383 0038 80E0      		ldi r24,lo8(gs(disableAllSpiDevices))
 384 003a 90E0      		ldi r25,hi8(gs(disableAllSpiDevices))
 385 003c 0E94 0000 		call spiInit
  93:main.c        ****   xSerialPortInitMinimal(); 
 387               	.LM14:
 388 0040 0E94 0000 		call xSerialPortInitMinimal
  94:main.c        ****   CLIStateSerialUsb  = xmalloc(sizeof(cmdState_t));
 390               	.LM15:
 391 0044 83E2      		ldi r24,lo8(35)
 392 0046 90E0      		ldi r25,hi8(35)
 393 0048 0E94 0000 		call xmalloc
 394 004c 9093 0000 		sts (CLIStateSerialUsb)+1,r25
 395 0050 8093 0000 		sts CLIStateSerialUsb,r24
  95:main.c        ****   CLIStateSerialUdp  = xmalloc(sizeof(cmdState_t));
 397               	.LM16:
 398 0054 83E2      		ldi r24,lo8(35)
 399 0056 90E0      		ldi r25,hi8(35)
 400 0058 0E94 0000 		call xmalloc
 401 005c 9093 0000 		sts (CLIStateSerialUdp)+1,r25
 402 0060 8093 0000 		sts CLIStateSerialUdp,r24
 100:main.c        ****   sensorsTaskInit();
 404               	.LM17:
 405 0064 0E94 0000 		call sensorsTaskInit
 101:main.c        ****   loadConfiguration();
 407               	.LM18:
 408 0068 0E94 0000 		call loadConfiguration
 103:main.c        ****   initQueueStreamUSB(&usbStream);
 410               	.LM19:
 411 006c 00E0      		ldi r16,lo8(usbStream)
 412 006e 10E0      		ldi r17,hi8(usbStream)
 413 0070 C801      		movw r24,r16
 414 0072 0E94 0000 		call initQueueStreamUSB
 104:main.c        ****   VtyInit(CLIStateSerialUsb, &usbStream);
 416               	.LM20:
 417 0076 8091 0000 		lds r24,CLIStateSerialUsb
 418 007a 9091 0000 		lds r25,(CLIStateSerialUsb)+1
 419 007e B801      		movw r22,r16
 420 0080 0E94 0000 		call VtyInit
 106:main.c        ****   udpInit();
 422               	.LM21:
 423 0084 0E94 0000 		call udpInit
 107:main.c        ****   socketInit();
 425               	.LM22:
 426 0088 0E94 0000 		call socketInit
 108:main.c        ****   initQueueStream(&udpStream, &udpBuffers, udpSocket->Rx, udpSocket->Tx);
 428               	.LM23:
 429 008c E091 0000 		lds r30,udpSocket
 430 0090 F091 0000 		lds r31,(udpSocket)+1
 431 0094 00E0      		ldi r16,lo8(udpStream)
 432 0096 10E0      		ldi r17,hi8(udpStream)
 433 0098 4285      		ldd r20,Z+10
 434 009a 5385      		ldd r21,Z+11
 435 009c 2485      		ldd r18,Z+12
 436 009e 3585      		ldd r19,Z+13
 437 00a0 C801      		movw r24,r16
 438 00a2 60E0      		ldi r22,lo8(udpBuffers)
 439 00a4 70E0      		ldi r23,hi8(udpBuffers)
 440 00a6 0E94 0000 		call initQueueStream
 109:main.c        ****   VtyInit(CLIStateSerialUdp, &udpStream);
 442               	.LM24:
 443 00aa 8091 0000 		lds r24,CLIStateSerialUdp
 444 00ae 9091 0000 		lds r25,(CLIStateSerialUdp)+1
 445 00b2 B801      		movw r22,r16
 446 00b4 0E94 0000 		call VtyInit
 111:main.c        ****   xTaskCreate(encTask,        NULL /*"ENC"    */, STACK_SIZE_ENC,       (void *)CLIStateSerialUsb->
 448               	.LM25:
 449 00b8 E091 0000 		lds r30,CLIStateSerialUsb
 450 00bc F091 0000 		lds r31,(CLIStateSerialUsb)+1
 451 00c0 228D      		ldd r18,Z+26
 452 00c2 338D      		ldd r19,Z+27
 453 00c4 80E0      		ldi r24,lo8(gs(encTask))
 454 00c6 90E0      		ldi r25,hi8(gs(encTask))
 455 00c8 60E0      		ldi r22,lo8(0)
 456 00ca 70E0      		ldi r23,hi8(0)
 457 00cc 44EF      		ldi r20,lo8(500)
 458 00ce 51E0      		ldi r21,hi8(500)
 459 00d0 00E0      		ldi r16,lo8(0)
 460 00d2 A0E0      		ldi r26,lo8(xHandleEnc)
 461 00d4 EA2E      		mov r14,r26
 462 00d6 A0E0      		ldi r26,hi8(xHandleEnc)
 463 00d8 FA2E      		mov r15,r26
 464 00da CC24      		clr r12
 465 00dc DD24      		clr r13
 466 00de AA24      		clr r10
 467 00e0 BB24      		clr r11
 468 00e2 0E94 0000 		call xTaskGenericCreate
 112:main.c        ****   xTaskCreate(vTaskVTYusb,    NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUsb)
 470               	.LM26:
 471 00e6 2091 0000 		lds r18,CLIStateSerialUsb
 472 00ea 3091 0000 		lds r19,(CLIStateSerialUsb)+1
 473 00ee 80E0      		ldi r24,lo8(gs(vTaskVTYusb))
 474 00f0 90E0      		ldi r25,hi8(gs(vTaskVTYusb))
 475 00f2 60E0      		ldi r22,lo8(0)
 476 00f4 70E0      		ldi r23,hi8(0)
 477 00f6 4CEB      		ldi r20,lo8(700)
 478 00f8 52E0      		ldi r21,hi8(700)
 479 00fa 01E0      		ldi r16,lo8(1)
 480 00fc F0E0      		ldi r31,lo8(xHandleVTY_USB)
 481 00fe EF2E      		mov r14,r31
 482 0100 F0E0      		ldi r31,hi8(xHandleVTY_USB)
 483 0102 FF2E      		mov r15,r31
 484 0104 0E94 0000 		call xTaskGenericCreate
 113:main.c        ****   xTaskCreate(vTaskVTYsocket, NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUdp)
 486               	.LM27:
 487 0108 2091 0000 		lds r18,CLIStateSerialUdp
 488 010c 3091 0000 		lds r19,(CLIStateSerialUdp)+1
 489 0110 80E0      		ldi r24,lo8(gs(vTaskVTYsocket))
 490 0112 90E0      		ldi r25,hi8(gs(vTaskVTYsocket))
 491 0114 60E0      		ldi r22,lo8(0)
 492 0116 70E0      		ldi r23,hi8(0)
 493 0118 4CEB      		ldi r20,lo8(700)
 494 011a 52E0      		ldi r21,hi8(700)
 495 011c E0E0      		ldi r30,lo8(xHandleVTY_UDP)
 496 011e EE2E      		mov r14,r30
 497 0120 E0E0      		ldi r30,hi8(xHandleVTY_UDP)
 498 0122 FE2E      		mov r15,r30
 499 0124 0E94 0000 		call xTaskGenericCreate
 115:main.c        ****   vTaskStartScheduler();
 501               	.LM28:
 502 0128 0E94 0000 		call vTaskStartScheduler
 117:main.c        **** }
 504               	.LM29:
 505 012c 80E0      		ldi r24,lo8(0)
 506 012e 90E0      		ldi r25,hi8(0)
 507               	/* epilogue start */
 508 0130 1F91      		pop r17
 509 0132 0F91      		pop r16
 510 0134 FF90      		pop r15
 511 0136 EF90      		pop r14
 512 0138 DF90      		pop r13
 513 013a CF90      		pop r12
 514 013c BF90      		pop r11
 515 013e AF90      		pop r10
 516 0140 0895      		ret
 518               	.Lscope4:
 520               		.stabd	78,0,0
 521               	.global	timer100Hz
 522               	.global	timer100Hz
 523               		.section .bss
 526               	timer100Hz:
 527 0000 00        		.skip 1,0
 528               		.data
 531               	tickCntr.3152:
 532 0000 64        		.byte	100
 533               		.comm klastry,128,1
 534               		.comm wwwport,1,1
 535               		.comm rollers,2,1
 536               		.comm xVtyRec,2,1
 537               		.comm xVtyTx,2,1
 538               		.comm xSemaphoreSpiSS,2,1
 539               		.comm portA,1,1
 540               		.comm portB,1,1
 541               		.comm lockSensors,2,1
 542               		.comm xRs485Rec,2,1
 543               		.comm xRs485Tx,2,1
 544               		.comm xSemaphoreRs485,2,1
 545               		.comm nicState,14,1
 546               		.comm plen,2,1
 547               		.comm IpMyConfig,15,1
 548               		.comm arpDebug,2,1
 549               		.comm arpDebugLevel,1,1
 550               		.comm icmpDebug,2,1
 551               		.comm icmpDebugLevel,1,1
 552               		.comm udpSocket,2,1
 553               		.comm udpDbgStream,2,1
 554               		.comm udpDbgLevel,1,1
 555               		.comm tcpDebugStream,2,1
 556               		.comm tcpDebugLevel,1,1
 557               		.comm sockets,2,1
 558               		.comm temperature,1,1
 559               		.comm voltage,1,1
 560               		.comm entries,2,1
 561               		.comm debugStream,2,1
 562               		.comm uip_netif_physical_if,2,1
 563               		.comm uip_ext_len,1,1
 564               		.comm uip_ext_opt_offset,1,1
 565               		.comm czasRtc,7,1
 566               		.comm xHandleVTY_USB,2,1
 567               		.comm xHandleVTY_UDP,2,1
 568               		.comm xHandleEnc,2,1
 569               		.comm xHandleSensors,2,1
 570               		.comm CLIStateSerialUsb,2,1
 571               		.comm CLIStateSerialUdp,2,1
 572               		.comm usbStream,14,1
 573               		.comm udpStream,14,1
 574               		.comm udpBuffers,4,1
 619               		.text
 621               	.Letext0:
 622               	.global __do_copy_data
 623               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc62GkyQ.s:2      *ABS*:0000003f __SREG__
     /tmp/cc62GkyQ.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc62GkyQ.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc62GkyQ.s:5      *ABS*:00000034 __CCP__
     /tmp/cc62GkyQ.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc62GkyQ.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc62GkyQ.s:280    .init4:00000000 initExternalMem
     /tmp/cc62GkyQ.s:308    .text:00000000 vApplicationTickHook
     /tmp/cc62GkyQ.s:531    .data:00000000 tickCntr.3152
     /tmp/cc62GkyQ.s:341    .text:0000001a vApplicationIdleHook
     /tmp/cc62GkyQ.s:360    .text:00000020 main
                            *COM*:00000002 CLIStateSerialUsb
                            *COM*:00000002 CLIStateSerialUdp
                            *COM*:0000000e usbStream
                            *COM*:00000002 udpSocket
                            *COM*:0000000e udpStream
                            *COM*:00000004 udpBuffers
                            *COM*:00000002 xHandleEnc
                            *COM*:00000002 xHandleVTY_USB
                            *COM*:00000002 xHandleVTY_UDP
     /tmp/cc62GkyQ.s:526    .bss:00000000 timer100Hz
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xVtyRec
                            *COM*:00000002 xVtyTx
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xRs485Rec
                            *COM*:00000002 xRs485Tx
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000e nicState
                            *COM*:00000002 plen
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000001 temperature
                            *COM*:00000001 voltage
                            *COM*:00000002 entries
                            *COM*:00000002 debugStream
                            *COM*:00000002 uip_netif_physical_if
                            *COM*:00000001 uip_ext_len
                            *COM*:00000001 uip_ext_opt_offset
                            *COM*:00000007 czasRtc
                            *COM*:00000002 xHandleSensors

UNDEFINED SYMBOLS
arpTimer
vCoRoutineSchedule
ramDyskInit
hardwareInit
disableAllSpiDevices
spiInit
xSerialPortInitMinimal
xmalloc
sensorsTaskInit
loadConfiguration
initQueueStreamUSB
VtyInit
udpInit
socketInit
initQueueStream
encTask
xTaskGenericCreate
vTaskVTYusb
vTaskVTYsocket
vTaskStartScheduler
__do_copy_data
__do_clear_bss
