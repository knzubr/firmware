   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 259               		.section	.init4,"ax",@progbits
 261               	.global	initExternalMem
 263               	initExternalMem:
 264               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  
   3:main.c        **** 	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
   4:main.c        **** 	This file is part of the FreeRTOS.org distribution.
   5:main.c        **** 	FreeRTOS.org is free software; you can redistribute it and/or modify it 
   6:main.c        **** 	under the terms of the GNU General Public License (version 2) as published
   7:main.c        **** 	by the Free Software Foundation and modified by the FreeRTOS exception.
   8:main.c        **** 	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
   9:main.c        **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  10:main.c        **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
  11:main.c        **** 	more details.
  12:main.c        **** 
  13:main.c        **** 	You should have received a copy of the GNU General Public License along 
  14:main.c        **** 	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59 
  15:main.c        **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  16:main.c        **** 
  17:main.c        **** 	A special exception to the GPL is included to allow you to distribute a 
  18:main.c        **** 	combined work that includes FreeRTOS.org without being obliged to provide
  19:main.c        **** 	the source code for any proprietary components.  See the licensing section
  20:main.c        **** 	of http://www.FreeRTOS.org for full details.
  21:main.c        **** 	***************************************************************************
  22:main.c        **** 	*                                                                         *
  23:main.c        **** 	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
  24:main.c        **** 	*                                                                         *
  25:main.c        **** 	* This is a concise, step by step, 'hands on' guide that describes both   *
  26:main.c        **** 	* general multitasking concepts and FreeRTOS specifics. It presents and   *
  27:main.c        **** 	* explains numerous examples that are written using the FreeRTOS API.     *
  28:main.c        **** 	* Full source code for all the examples is provided in an accompanying    *
  29:main.c        **** 	* .zip file.                                                              *
  30:main.c        **** 	*                                                                         *
  31:main.c        **** 	***************************************************************************
  32:main.c        **** 	1 tab == 4 spaces!
  33:main.c        **** 	Please ensure to read the configuration and relevant port sections of the
  34:main.c        **** 	online documentation.
  35:main.c        **** 
  36:main.c        **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  37:main.c        **** 	contact details.
  38:main.c        **** 
  39:main.c        **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  40:main.c        **** 	critical systems.
  41:main.c        **** 
  42:main.c        **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  43:main.c        **** 	licensing and training services.
  44:main.c        **** */
  45:main.c        **** 
  46:main.c        **** #include "main.h"
  47:main.c        **** 
  48:main.c        **** uint8_t timer100Hz = 0;
  49:main.c        **** 
  50:main.c        **** xQueueHandle xVtyTx;
  51:main.c        **** xQueueHandle xVtyRec;
  52:main.c        **** 
  53:main.c        **** xQueueHandle xRs485Tx;
  54:main.c        **** xQueueHandle xRs485Rec;
  55:main.c        **** 
  56:main.c        **** 
  57:main.c        **** volatile uint8_t temperature;
  58:main.c        **** volatile uint8_t voltage;
  59:main.c        **** 
  60:main.c        **** 
  61:main.c        **** void vApplicationIdleHook( void );
  62:main.c        **** 
  63:main.c        **** /**
  64:main.c        ****  * RTC clock support
  65:main.c        ****  */
  66:main.c        **** void vApplicationTickHook( void );
  67:main.c        **** 
  68:main.c        **** xTaskHandle xHandleVTY_USB;
  69:main.c        **** xTaskHandle xHandleVTY_UDP;
  70:main.c        **** xTaskHandle xHandleEnc;
  71:main.c        **** xTaskHandle xHandleSensors;
  72:main.c        **** 
  73:main.c        **** void initExternalMem(void)
  74:main.c        **** {
 266               	.LM0:
 267               	.LFBB1:
 268               	/* prologue: naked */
 269               	/* frame size = 0 */
  75:main.c        ****   MCUCR |= _BV(SRE);          //Włączenie pamięci zewnętrznej
 271               	.LM1:
 272 0000 85B7      		in r24,85-32
 273 0002 8068      		ori r24,lo8(-128)
 274 0004 85BF      		out 85-32,r24
  76:main.c        ****   MCUCR |= 0x0E;
 276               	.LM2:
 277 0006 85B7      		in r24,85-32
 278 0008 8E60      		ori r24,lo8(14)
 279 000a 85BF      		out 85-32,r24
 280               	/* epilogue start */
  77:main.c        **** }
 282               	.LM3:
 284               	.Lscope1:
 286               		.stabd	78,0,0
 287               		.text
 289               	.global	vApplicationTickHook
 291               	vApplicationTickHook:
 292               		.stabd	46,0,0
  78:main.c        **** 
  79:main.c        **** cmdState_t *CLIStateSerialUsb;
  80:main.c        **** cmdState_t *CLIStateSerialUdp;
  81:main.c        **** FILE usbStream;
  82:main.c        **** FILE udpStream;
  83:main.c        **** 
  84:main.c        **** streamBuffers_t udpBuffers;
  85:main.c        **** 
  86:main.c        **** portSHORT main( void )
  87:main.c        **** {
  88:main.c        ****   ramDyskInit();              //Inicjalizacja Ram dysku
  89:main.c        ****   hardwareInit();
  90:main.c        ****   spiInit(disableAllSpiDevices);
  91:main.c        **** 
  92:main.c        **** // VTY on serial  
  93:main.c        ****   xSerialPortInitMinimal(); 
  94:main.c        ****   CLIStateSerialUsb  = xmalloc(sizeof(cmdState_t));
  95:main.c        ****   CLIStateSerialUdp  = xmalloc(sizeof(cmdState_t));
  96:main.c        **** 
  97:main.c        **** 
  98:main.c        **** //  cmdStateClear(newCmdState);
  99:main.c        ****   
 100:main.c        ****   sensorsTaskInit();
 101:main.c        ****   loadConfiguration();
 102:main.c        **** 
 103:main.c        ****   initQueueStreamUSB(&usbStream);
 104:main.c        ****   VtyInit(CLIStateSerialUsb, &usbStream);
 105:main.c        **** 
 106:main.c        ****   udpInit();
 107:main.c        ****   socketInit();
 108:main.c        ****   initQueueStream(&udpStream, &udpBuffers, udpSocket->Rx, udpSocket->Tx);
 109:main.c        ****   VtyInit(CLIStateSerialUdp, &udpStream);
 110:main.c        ****   
 111:main.c        ****   xTaskCreate(encTask,        NULL /*"ENC"    */, STACK_SIZE_ENC,       (void *)CLIStateSerialUsb->
 112:main.c        ****   xTaskCreate(vTaskVTYusb,    NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUsb)
 113:main.c        ****   //xTaskCreate(vTaskVTYsocket, NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUd
 114:main.c        ****   //xTaskCreate(sensorsTask,    NULL /*"Sensors"*/, STACK_SIZE_SENSORS,   NULL,                    
 115:main.c        ****   vTaskStartScheduler();
 116:main.c        ****   return 0;
 117:main.c        **** }
 118:main.c        **** /*-----------------------------------------------------------*/
 119:main.c        **** 
 120:main.c        **** void vApplicationIdleHook( void )
 121:main.c        **** {
 122:main.c        ****   for( ;; )
 123:main.c        ****   {
 124:main.c        ****     vCoRoutineSchedule();
 125:main.c        ****   }
 126:main.c        **** }
 127:main.c        **** 
 128:main.c        **** void vApplicationTickHook( void )
 129:main.c        **** {
 294               	.LM4:
 295               	.LFBB2:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 130:main.c        ****   static uint8_t tickCntr = configTICK_RATE_HZ;
 131:main.c        ****   if (--tickCntr == 0)
 299               	.LM5:
 300 0000 8091 0000 		lds r24,tickCntr.3069
 301 0004 8150      		subi r24,lo8(-(-1))
 302 0006 8093 0000 		sts tickCntr.3069,r24
 303 000a 8823      		tst r24
 304 000c 01F4      		brne .L5
 132:main.c        ****   {
 133:main.c        ****     tickCntr = configTICK_RATE_HZ;
 306               	.LM6:
 307 000e 84E6      		ldi r24,lo8(100)
 308 0010 8093 0000 		sts tickCntr.3069,r24
 134:main.c        ****     arpTimer();    
 310               	.LM7:
 311 0014 0E94 0000 		call arpTimer
 312               	.L5:
 313 0018 0895      		ret
 318               	.Lscope2:
 320               		.stabd	78,0,0
 322               	.global	vApplicationIdleHook
 324               	vApplicationIdleHook:
 325               		.stabd	46,0,0
 121:main.c        **** {
 327               	.LM8:
 328               	.LFBB3:
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	.L7:
 124:main.c        ****     vCoRoutineSchedule();
 333               	.LM9:
 334 001a 0E94 0000 		call vCoRoutineSchedule
 335 001e 00C0      		rjmp .L7
 337               	.Lscope3:
 339               		.stabd	78,0,0
 341               	.global	main
 343               	main:
 344               		.stabd	46,0,0
  87:main.c        **** {
 346               	.LM10:
 347               	.LFBB4:
 348 0020 AF92      		push r10
 349 0022 BF92      		push r11
 350 0024 CF92      		push r12
 351 0026 DF92      		push r13
 352 0028 EF92      		push r14
 353 002a FF92      		push r15
 354 002c 0F93      		push r16
 355 002e 1F93      		push r17
 356               	/* prologue: function */
 357               	/* frame size = 0 */
  88:main.c        ****   ramDyskInit();              //Inicjalizacja Ram dysku
 359               	.LM11:
 360 0030 0E94 0000 		call ramDyskInit
  89:main.c        ****   hardwareInit();
 362               	.LM12:
 363 0034 0E94 0000 		call hardwareInit
  90:main.c        ****   spiInit(disableAllSpiDevices);
 365               	.LM13:
 366 0038 80E0      		ldi r24,lo8(gs(disableAllSpiDevices))
 367 003a 90E0      		ldi r25,hi8(gs(disableAllSpiDevices))
 368 003c 0E94 0000 		call spiInit
  93:main.c        ****   xSerialPortInitMinimal(); 
 370               	.LM14:
 371 0040 0E94 0000 		call xSerialPortInitMinimal
  94:main.c        ****   CLIStateSerialUsb  = xmalloc(sizeof(cmdState_t));
 373               	.LM15:
 374 0044 83E2      		ldi r24,lo8(35)
 375 0046 90E0      		ldi r25,hi8(35)
 376 0048 0E94 0000 		call xmalloc
 377 004c 9093 0000 		sts (CLIStateSerialUsb)+1,r25
 378 0050 8093 0000 		sts CLIStateSerialUsb,r24
  95:main.c        ****   CLIStateSerialUdp  = xmalloc(sizeof(cmdState_t));
 380               	.LM16:
 381 0054 83E2      		ldi r24,lo8(35)
 382 0056 90E0      		ldi r25,hi8(35)
 383 0058 0E94 0000 		call xmalloc
 384 005c 9093 0000 		sts (CLIStateSerialUdp)+1,r25
 385 0060 8093 0000 		sts CLIStateSerialUdp,r24
 100:main.c        ****   sensorsTaskInit();
 387               	.LM17:
 388 0064 0E94 0000 		call sensorsTaskInit
 101:main.c        ****   loadConfiguration();
 390               	.LM18:
 391 0068 0E94 0000 		call loadConfiguration
 103:main.c        ****   initQueueStreamUSB(&usbStream);
 393               	.LM19:
 394 006c 00E0      		ldi r16,lo8(usbStream)
 395 006e 10E0      		ldi r17,hi8(usbStream)
 396 0070 C801      		movw r24,r16
 397 0072 0E94 0000 		call initQueueStreamUSB
 104:main.c        ****   VtyInit(CLIStateSerialUsb, &usbStream);
 399               	.LM20:
 400 0076 8091 0000 		lds r24,CLIStateSerialUsb
 401 007a 9091 0000 		lds r25,(CLIStateSerialUsb)+1
 402 007e B801      		movw r22,r16
 403 0080 0E94 0000 		call VtyInit
 106:main.c        ****   udpInit();
 405               	.LM21:
 406 0084 0E94 0000 		call udpInit
 107:main.c        ****   socketInit();
 408               	.LM22:
 409 0088 0E94 0000 		call socketInit
 108:main.c        ****   initQueueStream(&udpStream, &udpBuffers, udpSocket->Rx, udpSocket->Tx);
 411               	.LM23:
 412 008c E091 0000 		lds r30,udpSocket
 413 0090 F091 0000 		lds r31,(udpSocket)+1
 414 0094 00E0      		ldi r16,lo8(udpStream)
 415 0096 10E0      		ldi r17,hi8(udpStream)
 416 0098 4285      		ldd r20,Z+10
 417 009a 5385      		ldd r21,Z+11
 418 009c 2485      		ldd r18,Z+12
 419 009e 3585      		ldd r19,Z+13
 420 00a0 C801      		movw r24,r16
 421 00a2 60E0      		ldi r22,lo8(udpBuffers)
 422 00a4 70E0      		ldi r23,hi8(udpBuffers)
 423 00a6 0E94 0000 		call initQueueStream
 109:main.c        ****   VtyInit(CLIStateSerialUdp, &udpStream);
 425               	.LM24:
 426 00aa 8091 0000 		lds r24,CLIStateSerialUdp
 427 00ae 9091 0000 		lds r25,(CLIStateSerialUdp)+1
 428 00b2 B801      		movw r22,r16
 429 00b4 0E94 0000 		call VtyInit
 111:main.c        ****   xTaskCreate(encTask,        NULL /*"ENC"    */, STACK_SIZE_ENC,       (void *)CLIStateSerialUsb->
 431               	.LM25:
 432 00b8 E091 0000 		lds r30,CLIStateSerialUsb
 433 00bc F091 0000 		lds r31,(CLIStateSerialUsb)+1
 434 00c0 228D      		ldd r18,Z+26
 435 00c2 338D      		ldd r19,Z+27
 436 00c4 80E0      		ldi r24,lo8(gs(encTask))
 437 00c6 90E0      		ldi r25,hi8(gs(encTask))
 438 00c8 60E0      		ldi r22,lo8(0)
 439 00ca 70E0      		ldi r23,hi8(0)
 440 00cc 44EF      		ldi r20,lo8(500)
 441 00ce 51E0      		ldi r21,hi8(500)
 442 00d0 00E0      		ldi r16,lo8(0)
 443 00d2 F0E0      		ldi r31,lo8(xHandleEnc)
 444 00d4 EF2E      		mov r14,r31
 445 00d6 F0E0      		ldi r31,hi8(xHandleEnc)
 446 00d8 FF2E      		mov r15,r31
 447 00da CC24      		clr r12
 448 00dc DD24      		clr r13
 449 00de AA24      		clr r10
 450 00e0 BB24      		clr r11
 451 00e2 0E94 0000 		call xTaskGenericCreate
 112:main.c        ****   xTaskCreate(vTaskVTYusb,    NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUsb)
 453               	.LM26:
 454 00e6 2091 0000 		lds r18,CLIStateSerialUsb
 455 00ea 3091 0000 		lds r19,(CLIStateSerialUsb)+1
 456 00ee 80E0      		ldi r24,lo8(gs(vTaskVTYusb))
 457 00f0 90E0      		ldi r25,hi8(gs(vTaskVTYusb))
 458 00f2 60E0      		ldi r22,lo8(0)
 459 00f4 70E0      		ldi r23,hi8(0)
 460 00f6 4CEB      		ldi r20,lo8(700)
 461 00f8 52E0      		ldi r21,hi8(700)
 462 00fa 01E0      		ldi r16,lo8(1)
 463 00fc E0E0      		ldi r30,lo8(xHandleVTY_USB)
 464 00fe EE2E      		mov r14,r30
 465 0100 E0E0      		ldi r30,hi8(xHandleVTY_USB)
 466 0102 FE2E      		mov r15,r30
 467 0104 0E94 0000 		call xTaskGenericCreate
 115:main.c        ****   vTaskStartScheduler();
 469               	.LM27:
 470 0108 0E94 0000 		call vTaskStartScheduler
 117:main.c        **** }
 472               	.LM28:
 473 010c 80E0      		ldi r24,lo8(0)
 474 010e 90E0      		ldi r25,hi8(0)
 475               	/* epilogue start */
 476 0110 1F91      		pop r17
 477 0112 0F91      		pop r16
 478 0114 FF90      		pop r15
 479 0116 EF90      		pop r14
 480 0118 DF90      		pop r13
 481 011a CF90      		pop r12
 482 011c BF90      		pop r11
 483 011e AF90      		pop r10
 484 0120 0895      		ret
 486               	.Lscope4:
 488               		.stabd	78,0,0
 489               	.global	timer100Hz
 490               	.global	timer100Hz
 491               		.section .bss
 494               	timer100Hz:
 495 0000 00        		.skip 1,0
 496               		.data
 499               	tickCntr.3069:
 500 0000 64        		.byte	100
 501               		.comm klastry,128,1
 502               		.comm wwwport,1,1
 503               		.comm rollers,2,1
 504               		.comm xVtyRec,2,1
 505               		.comm xVtyTx,2,1
 506               		.comm xSemaphoreSpiSS,2,1
 507               		.comm portA,1,1
 508               		.comm portB,1,1
 509               		.comm lockSensors,2,1
 510               		.comm xRs485Rec,2,1
 511               		.comm xRs485Tx,2,1
 512               		.comm xSemaphoreRs485,2,1
 513               		.comm nicState,14,1
 514               		.comm IpMyConfig,15,1
 515               		.comm arpDebug,2,1
 516               		.comm arpDebugLevel,1,1
 517               		.comm icmpDebug,2,1
 518               		.comm icmpDebugLevel,1,1
 519               		.comm udpSocket,2,1
 520               		.comm udpDbgStream,2,1
 521               		.comm udpDbgLevel,1,1
 522               		.comm tcpDebugStream,2,1
 523               		.comm tcpDebugLevel,1,1
 524               		.comm sockets,2,1
 525               		.comm temperature,1,1
 526               		.comm voltage,1,1
 527               		.comm Ipv6MyConfig,5,1
 528               		.comm debugStream,2,1
 529               		.comm czasRtc,7,1
 530               		.comm xHandleVTY_USB,2,1
 531               		.comm xHandleVTY_UDP,2,1
 532               		.comm xHandleEnc,2,1
 533               		.comm xHandleSensors,2,1
 534               		.comm CLIStateSerialUsb,2,1
 535               		.comm CLIStateSerialUdp,2,1
 536               		.comm usbStream,14,1
 537               		.comm udpStream,14,1
 538               		.comm udpBuffers,4,1
 579               		.text
 581               	.Letext0:
 582               	.global __do_copy_data
 583               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccppyWWp.s:2      *ABS*:0000003f __SREG__
     /tmp/ccppyWWp.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccppyWWp.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccppyWWp.s:5      *ABS*:00000034 __CCP__
     /tmp/ccppyWWp.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccppyWWp.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccppyWWp.s:263    .init4:00000000 initExternalMem
     /tmp/ccppyWWp.s:291    .text:00000000 vApplicationTickHook
     /tmp/ccppyWWp.s:499    .data:00000000 tickCntr.3069
     /tmp/ccppyWWp.s:324    .text:0000001a vApplicationIdleHook
     /tmp/ccppyWWp.s:343    .text:00000020 main
                            *COM*:00000002 CLIStateSerialUsb
                            *COM*:00000002 CLIStateSerialUdp
                            *COM*:0000000e usbStream
                            *COM*:00000002 udpSocket
                            *COM*:0000000e udpStream
                            *COM*:00000004 udpBuffers
                            *COM*:00000002 xHandleEnc
                            *COM*:00000002 xHandleVTY_USB
     /tmp/ccppyWWp.s:494    .bss:00000000 timer100Hz
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xVtyRec
                            *COM*:00000002 xVtyTx
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xRs485Rec
                            *COM*:00000002 xRs485Tx
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000e nicState
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000001 temperature
                            *COM*:00000001 voltage
                            *COM*:00000005 Ipv6MyConfig
                            *COM*:00000002 debugStream
                            *COM*:00000007 czasRtc
                            *COM*:00000002 xHandleVTY_UDP
                            *COM*:00000002 xHandleSensors

UNDEFINED SYMBOLS
arpTimer
vCoRoutineSchedule
ramDyskInit
hardwareInit
disableAllSpiDevices
spiInit
xSerialPortInitMinimal
xmalloc
sensorsTaskInit
loadConfiguration
initQueueStreamUSB
VtyInit
udpInit
socketInit
initQueueStream
encTask
xTaskGenericCreate
vTaskVTYusb
vTaskStartScheduler
__do_copy_data
__do_clear_bss
