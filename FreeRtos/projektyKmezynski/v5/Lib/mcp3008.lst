   1               		.file	"mcp3008.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 254               		.weak	enableSpiMCP3008
 256               	enableSpiMCP3008:
 257               		.stabd	46,0,0
   1:Lib/mcp3008.c **** /*****************************************************************************
   2:Lib/mcp3008.c **** * vim:sw=2:ts=2:si:et
   3:Lib/mcp3008.c **** *
   4:Lib/mcp3008.c **** * Title      : MPC23s17 parrarel I/O 16 bit port driver
   5:Lib/mcp3008.c **** * Author     : Adam Kaliszan adam.kaliszan@gmail.com
   6:Lib/mcp3008.c **** * Copyright  : GPL V2
   7:Lib/mcp3008.c **** *
   8:Lib/mcp3008.c **** *This driver provides:
   9:Lib/mcp3008.c **** * - read/set operation
  10:Lib/mcp3008.c **** *Driver uses mutexes and is condition race free. Function can be invoken by any thread.
  11:Lib/mcp3008.c **** *****************************************************************************/
  12:Lib/mcp3008.c **** //@{
  13:Lib/mcp3008.c **** #include <avr/io.h>
  14:Lib/mcp3008.c **** #include <util/delay.h>
  15:Lib/mcp3008.c **** #include "mcp3008.h"
  16:Lib/mcp3008.c **** #include "spi.h"
  17:Lib/mcp3008.c **** 
  18:Lib/mcp3008.c **** void enableSpiMCP3008(void)   {};
 259               	.LM0:
 260               	.LFBB1:
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* epilogue start */
 265               	.LM1:
 266 0000 0895      		ret
 268               	.Lscope1:
 270               		.stabd	78,0,0
 272               		.weak	disableSpiMCP3008
 274               	disableSpiMCP3008:
 275               		.stabd	46,0,0
  19:Lib/mcp3008.c **** void disableSpiMCP3008(void)  {};
 277               	.LM2:
 278               	.LFBB2:
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* epilogue start */
 283               	.LM3:
 284 0002 0895      		ret
 286               	.Lscope2:
 288               		.stabd	78,0,0
 291               	.global	MCP3008_getSampleSingle
 293               	MCP3008_getSampleSingle:
 294               		.stabd	46,0,0
  20:Lib/mcp3008.c **** 
  21:Lib/mcp3008.c **** 
  22:Lib/mcp3008.c **** uint16_t MCP3008_getSampleDiff(uint8_t inputNo)
  23:Lib/mcp3008.c **** {
  24:Lib/mcp3008.c ****   uint8_t resultLo;
  25:Lib/mcp3008.c ****   uint8_t resultHi;
  26:Lib/mcp3008.c ****   inputNo = inputNo << 4;
  27:Lib/mcp3008.c ****   inputNo &= 0x70;
  28:Lib/mcp3008.c ****   
  29:Lib/mcp3008.c ****   spiTake();
  30:Lib/mcp3008.c ****   enableSpiMCP3008();
  31:Lib/mcp3008.c ****   
  32:Lib/mcp3008.c ****   spiSend(0x01);                               //Start
  33:Lib/mcp3008.c ****   resultHi = spiSend(inputNo);  //DIFF/!SGL A2 A1 A0 X X X X
  34:Lib/mcp3008.c ****   resultLo = spiSend(0);        //X X X X X X X X
  35:Lib/mcp3008.c ****   
  36:Lib/mcp3008.c ****   disableSpiMCP3008(); 
  37:Lib/mcp3008.c ****   spiGive();
  38:Lib/mcp3008.c ****   
  39:Lib/mcp3008.c ****   resultHi &= 0x03;
  40:Lib/mcp3008.c ****   return resultHi << 8 | resultLo;
  41:Lib/mcp3008.c **** }
  42:Lib/mcp3008.c **** 
  43:Lib/mcp3008.c **** uint16_t MCP3008_getSampleSingle(uint8_t inputNo)
  44:Lib/mcp3008.c **** {
 296               	.LM4:
 297               	.LFBB3:
 298 0004 FF92      		push r15
 299 0006 0F93      		push r16
 300 0008 1F93      		push r17
 301               	/* prologue: function */
 302               	/* frame size = 0 */
  45:Lib/mcp3008.c ****   uint8_t resultLo;
  46:Lib/mcp3008.c ****   uint8_t resultHi;
  47:Lib/mcp3008.c ****   inputNo = inputNo << 4;
 304               	.LM5:
 305 000a 182F      		mov r17,r24
 306 000c 1295      		swap r17
  48:Lib/mcp3008.c ****   inputNo &= 0x70;
 308               	.LM6:
 309 000e 1077      		andi r17,lo8(112)
  49:Lib/mcp3008.c ****   inputNo |= 0x80;
  50:Lib/mcp3008.c ****   
  51:Lib/mcp3008.c ****   spiTake();
 311               	.LM7:
 312 0010 0E94 0000 		call spiTake
  52:Lib/mcp3008.c ****   enableSpiMCP3008();
 314               	.LM8:
 315 0014 0E94 0000 		call enableSpiMCP3008
  53:Lib/mcp3008.c ****   
  54:Lib/mcp3008.c ****   spiSend(0x01);                //Start
 317               	.LM9:
 318 0018 81E0      		ldi r24,lo8(1)
 319 001a 0E94 0000 		call spiSend
  55:Lib/mcp3008.c ****   resultHi = spiSend(inputNo);  //DIFF/!SGL A2 A1 A0 X X X X
 321               	.LM10:
 322 001e 812F      		mov r24,r17
 323 0020 8068      		ori r24,lo8(-128)
 324 0022 0E94 0000 		call spiSend
 325 0026 F82E      		mov r15,r24
  56:Lib/mcp3008.c ****   resultLo = spiSend(0);        //X X X X X X X X
 327               	.LM11:
 328 0028 80E0      		ldi r24,lo8(0)
 329 002a 0E94 0000 		call spiSend
 330 002e 082F      		mov r16,r24
  57:Lib/mcp3008.c ****   
  58:Lib/mcp3008.c ****   disableSpiMCP3008(); 
 332               	.LM12:
 333 0030 0E94 0000 		call disableSpiMCP3008
  59:Lib/mcp3008.c ****   spiGive();
 335               	.LM13:
 336 0034 0E94 0000 		call spiGive
 337 0038 9F2D      		mov r25,r15
 338 003a 9370      		andi r25,lo8(3)
 339 003c 80E0      		ldi r24,lo8(0)
 340 003e 10E0      		ldi r17,lo8(0)
 341 0040 082B      		or r16,r24
 342 0042 192B      		or r17,r25
  60:Lib/mcp3008.c ****   
  61:Lib/mcp3008.c ****   resultHi &= 0x03;
  62:Lib/mcp3008.c ****   return resultHi << 8 | resultLo;
  63:Lib/mcp3008.c **** }
 344               	.LM14:
 345 0044 C801      		movw r24,r16
 346               	/* epilogue start */
 347 0046 1F91      		pop r17
 348 0048 0F91      		pop r16
 349 004a FF90      		pop r15
 350 004c 0895      		ret
 356               	.Lscope3:
 358               		.stabd	78,0,0
 361               	.global	MCP3008_getSampleDiff
 363               	MCP3008_getSampleDiff:
 364               		.stabd	46,0,0
  23:Lib/mcp3008.c **** {
 366               	.LM15:
 367               	.LFBB4:
 368 004e FF92      		push r15
 369 0050 0F93      		push r16
 370 0052 1F93      		push r17
 371               	/* prologue: function */
 372               	/* frame size = 0 */
  26:Lib/mcp3008.c ****   inputNo = inputNo << 4;
 374               	.LM16:
 375 0054 182F      		mov r17,r24
 376 0056 1295      		swap r17
 377 0058 107F      		andi r17,lo8(-16)
  29:Lib/mcp3008.c ****   spiTake();
 379               	.LM17:
 380 005a 0E94 0000 		call spiTake
  30:Lib/mcp3008.c ****   enableSpiMCP3008();
 382               	.LM18:
 383 005e 0E94 0000 		call enableSpiMCP3008
  32:Lib/mcp3008.c ****   spiSend(0x01);                               //Start
 385               	.LM19:
 386 0062 81E0      		ldi r24,lo8(1)
 387 0064 0E94 0000 		call spiSend
  33:Lib/mcp3008.c ****   resultHi = spiSend(inputNo);  //DIFF/!SGL A2 A1 A0 X X X X
 389               	.LM20:
 390 0068 812F      		mov r24,r17
 391 006a 8077      		andi r24,lo8(112)
 392 006c 0E94 0000 		call spiSend
 393 0070 F82E      		mov r15,r24
  34:Lib/mcp3008.c ****   resultLo = spiSend(0);        //X X X X X X X X
 395               	.LM21:
 396 0072 80E0      		ldi r24,lo8(0)
 397 0074 0E94 0000 		call spiSend
 398 0078 082F      		mov r16,r24
  36:Lib/mcp3008.c ****   disableSpiMCP3008(); 
 400               	.LM22:
 401 007a 0E94 0000 		call disableSpiMCP3008
  37:Lib/mcp3008.c ****   spiGive();
 403               	.LM23:
 404 007e 0E94 0000 		call spiGive
 405 0082 9F2D      		mov r25,r15
 406 0084 9370      		andi r25,lo8(3)
 407 0086 80E0      		ldi r24,lo8(0)
 408 0088 10E0      		ldi r17,lo8(0)
 409 008a 082B      		or r16,r24
 410 008c 192B      		or r17,r25
  41:Lib/mcp3008.c **** }
 412               	.LM24:
 413 008e C801      		movw r24,r16
 414               	/* epilogue start */
 415 0090 1F91      		pop r17
 416 0092 0F91      		pop r16
 417 0094 FF90      		pop r15
 418 0096 0895      		ret
 424               	.Lscope4:
 426               		.stabd	78,0,0
 427               		.comm klastry,128,1
 428               		.comm wwwport,1,1
 429               		.comm rollers,2,1
 430               		.comm xSemaphoreSpiSS,2,1
 431               		.comm portA,1,1
 432               		.comm portB,1,1
 433               		.comm lockSensors,2,1
 434               		.comm xSemaphoreRs485,2,1
 435               		.comm nicState,14,1
 436               		.comm IpMyConfig,15,1
 437               		.comm arpDebug,2,1
 438               		.comm arpDebugLevel,1,1
 439               		.comm icmpDebug,2,1
 440               		.comm icmpDebugLevel,1,1
 441               		.comm udpSocket,2,1
 442               		.comm udpDbgStream,2,1
 443               		.comm udpDbgLevel,1,1
 444               		.comm tcpDebugStream,2,1
 445               		.comm tcpDebugLevel,1,1
 446               		.comm sockets,2,1
 447               		.comm czasRtc,7,1
 469               		.weak	spiSend
 471               	.Letext0:
 472               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 mcp3008.c
     /tmp/ccHhoZH5.s:2      *ABS*:0000003f __SREG__
     /tmp/ccHhoZH5.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccHhoZH5.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccHhoZH5.s:5      *ABS*:00000034 __CCP__
     /tmp/ccHhoZH5.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccHhoZH5.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccHhoZH5.s:256    .text:00000000 enableSpiMCP3008
     /tmp/ccHhoZH5.s:274    .text:00000002 disableSpiMCP3008
     /tmp/ccHhoZH5.s:293    .text:00000004 MCP3008_getSampleSingle
     /tmp/ccHhoZH5.s:363    .text:0000004e MCP3008_getSampleDiff
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000e nicState
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000007 czasRtc

UNDEFINED SYMBOLS
spiTake
spiSend
spiGive
__do_clear_bss
