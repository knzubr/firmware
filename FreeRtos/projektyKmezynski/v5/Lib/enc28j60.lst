   1               		.file	"enc28j60.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 248               		.weak	spiEnableEnc28j60
 250               	spiEnableEnc28j60:
 251               		.stabd	46,0,0
   1:Lib/enc28j60.c **** /*********************************************
   2:Lib/enc28j60.c ****  * vim:sw=8:ts=8:si:et
   3:Lib/enc28j60.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:Lib/enc28j60.c ****  * Author: Guido Socher 
   5:Lib/enc28j60.c ****  * Copyright: GPL V2
   6:Lib/enc28j60.c ****  * http://www.gnu.org/licenses/gpl.html
   7:Lib/enc28j60.c ****  *
   8:Lib/enc28j60.c ****  * Based on the enc28j60.c file from the AVRlib library by Pascal Stang
   9:Lib/enc28j60.c ****  * For AVRlib See http://www.procyonengineering.com/
  10:Lib/enc28j60.c ****  * Used with explicit permission of Pascal Stang.
  11:Lib/enc28j60.c ****  *
  12:Lib/enc28j60.c ****  * Title: Microchip ENC28J60 Ethernet Interface Driver
  13:Lib/enc28j60.c ****  * Chip type           : ATMEGA88 with ENC28J60
  14:Lib/enc28j60.c ****  *********************************************/
  15:Lib/enc28j60.c **** 
  16:Lib/enc28j60.c **** #include "enc28j60.h"
  17:Lib/enc28j60.c **** 
  18:Lib/enc28j60.c **** 
  19:Lib/enc28j60.c **** static uint8_t Enc28j60Bank;
  20:Lib/enc28j60.c **** static uint16_t gNextPacketPtr;
  21:Lib/enc28j60.c **** 
  22:Lib/enc28j60.c **** 
  23:Lib/enc28j60.c **** /**
  24:Lib/enc28j60.c ****  * Initialize enc28j60
  25:Lib/enc28j60.c ****  * @param *macaddr - pointer to the mac address (6 bytes)
  26:Lib/enc28j60.c ****  */
  27:Lib/enc28j60.c **** static void     enc28j60Init(uint8_t* macaddr);
  28:Lib/enc28j60.c **** 
  29:Lib/enc28j60.c **** /**
  30:Lib/enc28j60.c ****  * Read register value (without changing the bank)
  31:Lib/enc28j60.c ****  * @param op      - operation type
  32:Lib/enc28j60.c ****  * @param address - register address
  33:Lib/enc28j60.c ****  * @return register value
  34:Lib/enc28j60.c ****  */
  35:Lib/enc28j60.c **** static uint8_t  enc28j60ReadOp (uint8_t op, uint8_t address);
  36:Lib/enc28j60.c **** static void     enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data);
  37:Lib/enc28j60.c **** static void     enc28j60SetBank(uint8_t address);
  38:Lib/enc28j60.c **** static void     enc28j60ReadBuffer(uint16_t len, uint8_t* data);
  39:Lib/enc28j60.c **** static void     enc28j60WriteBuffer(uint16_t len, uint8_t* data);
  40:Lib/enc28j60.c **** 
  41:Lib/enc28j60.c **** /**
  42:Lib/enc28j60.c ****  * Reads Enc28j60 control register
  43:Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  44:Lib/enc28j60.c ****  * @return control register value
  45:Lib/enc28j60.c ****  */
  46:Lib/enc28j60.c **** static uint8_t  enc28j60Read(uint8_t address);
  47:Lib/enc28j60.c **** 
  48:Lib/enc28j60.c **** /**
  49:Lib/enc28j60.c ****  * Writes Enc28j60 control register
  50:Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  51:Lib/enc28j60.c ****  * @param data    - control register value to be writen
  52:Lib/enc28j60.c ****  */
  53:Lib/enc28j60.c **** static void     enc28j60Write(uint8_t address, uint8_t data);
  54:Lib/enc28j60.c **** 
  55:Lib/enc28j60.c **** /**
  56:Lib/enc28j60.c ****  * Reads Enc28j60 phy register
  57:Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  58:Lib/enc28j60.c ****  * @return phy register value
  59:Lib/enc28j60.c ****  */
  60:Lib/enc28j60.c **** static uint16_t enc28j60PhyReadH(uint8_t address);
  61:Lib/enc28j60.c **** 
  62:Lib/enc28j60.c **** /**
  63:Lib/enc28j60.c ****  * Writes Enc28j60 phy register
  64:Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  65:Lib/enc28j60.c ****  * @param data    - phy register value to be writen
  66:Lib/enc28j60.c ****  */
  67:Lib/enc28j60.c **** static void     enc28j60PhyWrite(uint8_t address, uint16_t data);
  68:Lib/enc28j60.c **** 
  69:Lib/enc28j60.c **** 
  70:Lib/enc28j60.c **** //void     enc28j60BufferSend(uint16_t len, roundBuffer* buffer);
  71:Lib/enc28j60.c **** 
  72:Lib/enc28j60.c **** uint8_t  enc28j60hasRxPkt(void);
  73:Lib/enc28j60.c **** uint8_t  enc28j60getrev(void);
  74:Lib/enc28j60.c **** uint8_t  enc28j60linkup(void);
  75:Lib/enc28j60.c **** 
  76:Lib/enc28j60.c **** void nicMacInit(void)
  77:Lib/enc28j60.c **** { 
  78:Lib/enc28j60.c ****     vTaskDelay          (5);
  79:Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
  80:Lib/enc28j60.c **** //  enc28j60clkout      (2);     // change clkout from 6.25MHz to 12.5MHz
  81:Lib/enc28j60.c ****     vTaskDelay          (5);
  82:Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
  83:Lib/enc28j60.c ****     vTaskDelay          (2);
  84:Lib/enc28j60.c **** }
  85:Lib/enc28j60.c **** 
  86:Lib/enc28j60.c **** uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
  87:Lib/enc28j60.c **** {
  88:Lib/enc28j60.c ****   uint8_t result;
  89:Lib/enc28j60.c ****   spiTake();
  90:Lib/enc28j60.c ****   spiEnableEnc28j60();
  91:Lib/enc28j60.c ****   
  92:Lib/enc28j60.c ****   // issue read command
  93:Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
  94:Lib/enc28j60.c **** 
  95:Lib/enc28j60.c ****   // read data
  96:Lib/enc28j60.c ****   result = spiSend(0x00);
  97:Lib/enc28j60.c **** 
  98:Lib/enc28j60.c ****   // do dummy read if needed (for mac and mii, see datasheet page 29)
  99:Lib/enc28j60.c ****   if(address & 0x80)
 100:Lib/enc28j60.c ****   {
 101:Lib/enc28j60.c ****     result = spiSend(0x00);
 102:Lib/enc28j60.c ****   }
 103:Lib/enc28j60.c **** 
 104:Lib/enc28j60.c ****   spiDisableEnc28j60();
 105:Lib/enc28j60.c ****   spiGive();
 106:Lib/enc28j60.c ****   return result; 
 107:Lib/enc28j60.c **** }
 108:Lib/enc28j60.c **** 
 109:Lib/enc28j60.c **** void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
 110:Lib/enc28j60.c **** {
 111:Lib/enc28j60.c ****   spiTake();
 112:Lib/enc28j60.c ****   spiEnableEnc28j60();
 113:Lib/enc28j60.c ****   // issue write command
 114:Lib/enc28j60.c ****   //spiSend(op | (address & ADDR_MASK));
 115:Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 116:Lib/enc28j60.c ****   spiSend(data);
 117:Lib/enc28j60.c ****   spiDisableEnc28j60();
 118:Lib/enc28j60.c ****   spiGive();
 119:Lib/enc28j60.c **** }
 120:Lib/enc28j60.c **** 
 121:Lib/enc28j60.c **** void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
 122:Lib/enc28j60.c **** {
 123:Lib/enc28j60.c ****   spiTake();
 124:Lib/enc28j60.c ****   spiEnableEnc28j60();
 125:Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 126:Lib/enc28j60.c ****   while(len)
 127:Lib/enc28j60.c ****   {
 128:Lib/enc28j60.c ****     len--;
 129:Lib/enc28j60.c ****     *data = spiSend(0x00);
 130:Lib/enc28j60.c ****     data++;
 131:Lib/enc28j60.c ****   }
 132:Lib/enc28j60.c ****   *data='\0';
 133:Lib/enc28j60.c ****   spiDisableEnc28j60();
 134:Lib/enc28j60.c ****   spiGive();
 135:Lib/enc28j60.c **** }
 136:Lib/enc28j60.c **** 
 137:Lib/enc28j60.c **** void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
 138:Lib/enc28j60.c **** {
 139:Lib/enc28j60.c ****   spiTake();
 140:Lib/enc28j60.c ****   spiEnableEnc28j60();
 141:Lib/enc28j60.c ****   // issue write command
 142:Lib/enc28j60.c ****   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 143:Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 144:Lib/enc28j60.c ****   while(len)
 145:Lib/enc28j60.c ****   {
 146:Lib/enc28j60.c ****     len--;
 147:Lib/enc28j60.c ****     spiSend(*data);       // write data
 148:Lib/enc28j60.c ****     data++;
 149:Lib/enc28j60.c ****   }
 150:Lib/enc28j60.c ****   spiDisableEnc28j60();  
 151:Lib/enc28j60.c ****   spiGive();
 152:Lib/enc28j60.c **** }
 153:Lib/enc28j60.c **** 
 154:Lib/enc28j60.c **** // void enc28j60WriteRoundBuffer(uint8_t len, roundBuffer *buffer)
 155:Lib/enc28j60.c **** // {
 156:Lib/enc28j60.c **** //   spiTake();
 157:Lib/enc28j60.c **** //   spiEnableEnc28j60();
 158:Lib/enc28j60.c **** //   // issue write command
 159:Lib/enc28j60.c **** //   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 160:Lib/enc28j60.c **** //   spiSend(ENC28J60_WRITE_BUF_MEM);
 161:Lib/enc28j60.c **** //   uint8_t data;
 162:Lib/enc28j60.c **** //   while(len)
 163:Lib/enc28j60.c **** //   {
 164:Lib/enc28j60.c **** //     len--;
 165:Lib/enc28j60.c **** //     data = *buffer->readIdx.ptr16;   
 166:Lib/enc28j60.c **** //     buffer->readIdx.ptr.L++;
 167:Lib/enc28j60.c **** //     
 168:Lib/enc28j60.c **** //     spiSend(*data);       // write data
 169:Lib/enc28j60.c **** //   }
 170:Lib/enc28j60.c **** //   spiDisableEnc28j60();  
 171:Lib/enc28j60.c **** //   spiGive();
 172:Lib/enc28j60.c **** // }
 173:Lib/enc28j60.c **** 
 174:Lib/enc28j60.c **** 
 175:Lib/enc28j60.c **** void enc28j60SetBank(uint8_t address)
 176:Lib/enc28j60.c **** {
 177:Lib/enc28j60.c ****   // set the bank (if needed)
 178:Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 179:Lib/enc28j60.c ****   {
 180:Lib/enc28j60.c ****     // set the bank
 181:Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 182:Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 183:Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 184:Lib/enc28j60.c ****   }
 185:Lib/enc28j60.c **** }
 186:Lib/enc28j60.c **** 
 187:Lib/enc28j60.c **** uint8_t enc28j60Read(uint8_t address)
 188:Lib/enc28j60.c **** {
 189:Lib/enc28j60.c ****   // set the bank
 190:Lib/enc28j60.c ****   enc28j60SetBank(address);
 191:Lib/enc28j60.c ****   // do the read
 192:Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 193:Lib/enc28j60.c ****   return result;
 194:Lib/enc28j60.c **** }
 195:Lib/enc28j60.c **** 
 196:Lib/enc28j60.c **** // read upper 8 bits
 197:Lib/enc28j60.c **** uint16_t enc28j60PhyReadH(uint8_t address)
 198:Lib/enc28j60.c **** {
 199:Lib/enc28j60.c ****   // Set the right address and start the register read operation
 200:Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 201:Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 202:Lib/enc28j60.c ****   
 203:Lib/enc28j60.c ****   vTaskDelay(0);
 204:Lib/enc28j60.c **** 
 205:Lib/enc28j60.c ****   // wait until the PHY read completes
 206:Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 207:Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 208:Lib/enc28j60.c **** 
 209:Lib/enc28j60.c ****   // reset reading bit
 210:Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 211:Lib/enc28j60.c **** 
 212:Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 213:Lib/enc28j60.c **** }
 214:Lib/enc28j60.c **** 
 215:Lib/enc28j60.c **** void enc28j60Write(uint8_t address, uint8_t data)
 216:Lib/enc28j60.c **** {
 217:Lib/enc28j60.c ****   // set the bank
 218:Lib/enc28j60.c ****   enc28j60SetBank(address);
 219:Lib/enc28j60.c ****   // do the write
 220:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 221:Lib/enc28j60.c **** }
 222:Lib/enc28j60.c **** 
 223:Lib/enc28j60.c **** void enc28j60PhyWrite(uint8_t address, uint16_t data)
 224:Lib/enc28j60.c **** {
 225:Lib/enc28j60.c ****   // set the PHY register address
 226:Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 227:Lib/enc28j60.c ****   // write the PHY data
 228:Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 229:Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 230:Lib/enc28j60.c ****   // wait until the PHY write completes
 231:Lib/enc28j60.c ****   
 232:Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 233:Lib/enc28j60.c ****   {
 234:Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 235:Lib/enc28j60.c ****   }
 236:Lib/enc28j60.c **** }
 237:Lib/enc28j60.c **** 
 238:Lib/enc28j60.c **** void enc28j60Init(uint8_t* macaddr)
 239:Lib/enc28j60.c **** {
 240:Lib/enc28j60.c ****   // perform system reset
 241:Lib/enc28j60.c ****   
 242:Lib/enc28j60.c ****   //ENC28j60 reset is on PE2 TODO add in hardware.c macros for that.
 243:Lib/enc28j60.c ****   PORTE &= ~0x04;
 244:Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 245:Lib/enc28j60.c ****   PORTE |= 0x04;
 246:Lib/enc28j60.c ****   
 247:Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 248:Lib/enc28j60.c **** 
 249:Lib/enc28j60.c ****   // check CLKRDY bit to see if reset is complete
 250:Lib/enc28j60.c ****   // The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
 251:Lib/enc28j60.c ****   //while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
 252:Lib/enc28j60.c ****   // do bank 0 stuff
 253:Lib/enc28j60.c ****   // initialize receive buffer
 254:Lib/enc28j60.c ****   // 16-bit transfers, must write low byte first
 255:Lib/enc28j60.c ****   // set receive buffer start address
 256:Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 257:Lib/enc28j60.c ****   // Rx start
 258:Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 259:Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 260:Lib/enc28j60.c ****   // set receive pointer address
 261:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 262:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 263:Lib/enc28j60.c ****   // RX end
 264:Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 265:Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 266:Lib/enc28j60.c ****   // TX start
 267:Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 268:Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 269:Lib/enc28j60.c ****   // TX end
 270:Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 271:Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 272:Lib/enc28j60.c **** 
 273:Lib/enc28j60.c ****   // do bank 1 stuff, packet filter:
 274:Lib/enc28j60.c ****   // For broadcast packets we allow only ARP packtets
 275:Lib/enc28j60.c ****   // All other packets should be unicast only for our mac (MAADR)
 276:Lib/enc28j60.c ****   //
 277:Lib/enc28j60.c ****   // The pattern to match on is therefore
 278:Lib/enc28j60.c ****   // Type     ETH.DST
 279:Lib/enc28j60.c ****   // ARP      BROADCAST
 280:Lib/enc28j60.c ****   // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
 281:Lib/enc28j60.c ****   // in binary these poitions are:11 0000 0011 1111
 282:Lib/enc28j60.c ****   // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 283:Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
 284:Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 285:Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 286:Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 287:Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 288:Lib/enc28j60.c ****   //
 289:Lib/enc28j60.c ****   //
 290:Lib/enc28j60.c ****   // do bank 2 stuff
 291:Lib/enc28j60.c ****   // enable MAC receive
 292:Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 293:Lib/enc28j60.c ****   // bring MAC out of reset
 294:Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 295:Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 296:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 297:Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 298:Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 299:Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 300:Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 301:Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 302:Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 303:Lib/enc28j60.c ****   // Do not send packets longer than MAX_FRAMELEN:
 304:Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 305:Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 306:Lib/enc28j60.c ****   
 307:Lib/enc28j60.c ****   // do bank 3 stuff
 308:Lib/enc28j60.c ****   // write MAC address
 309:Lib/enc28j60.c **** 
 310:Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 311:Lib/enc28j60.c ****   
 312:Lib/enc28j60.c ****   // no loopback of transmitted frames
 313:Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 314:Lib/enc28j60.c ****   
 315:Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 316:Lib/enc28j60.c ****   // enable interrutps
 317:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 318:Lib/enc28j60.c ****   // enable packet reception
 319:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 320:Lib/enc28j60.c **** }
 321:Lib/enc28j60.c **** 
 322:Lib/enc28j60.c **** // read the revision of the chip:
 323:Lib/enc28j60.c **** uint8_t enc28j60getrev(void)
 324:Lib/enc28j60.c **** {
 325:Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 326:Lib/enc28j60.c **** }
 327:Lib/enc28j60.c **** 
 328:Lib/enc28j60.c **** // link status
 329:Lib/enc28j60.c **** uint8_t enc28j60linkup(void)
 330:Lib/enc28j60.c **** {
 331:Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 332:Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 333:Lib/enc28j60.c **** }
 334:Lib/enc28j60.c **** 
 335:Lib/enc28j60.c **** void nicSend(uint16_t len)
 336:Lib/enc28j60.c **** {
 337:Lib/enc28j60.c ****   // Check no transmit in progress
 338:Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 339:Lib/enc28j60.c ****   {
 340:Lib/enc28j60.c ****     // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
 341:Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 342:Lib/enc28j60.c ****     {
 343:Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 344:Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 345:Lib/enc28j60.c ****     }
 346:Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 347:Lib/enc28j60.c ****   }
 348:Lib/enc28j60.c ****   // Set the write pointer to start of transmit buffer area
 349:Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 350:Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 351:Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 352:Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 353:Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 354:Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 355:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 356:Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 357:Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 358:Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 359:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 360:Lib/enc28j60.c **** }
 361:Lib/enc28j60.c **** 
 362:Lib/enc28j60.c **** // just probe if there might be a packet
 363:Lib/enc28j60.c **** uint8_t enc28j60hasRxPkt(void)
 364:Lib/enc28j60.c **** {
 365:Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 366:Lib/enc28j60.c ****   {
 367:Lib/enc28j60.c ****     return(0);
 368:Lib/enc28j60.c ****   }
 369:Lib/enc28j60.c ****   return(1);
 370:Lib/enc28j60.c **** }
 371:Lib/enc28j60.c **** 
 372:Lib/enc28j60.c **** uint16_t nicPoll(void)
 373:Lib/enc28j60.c **** {
 374:Lib/enc28j60.c ****   uint16_t rxstat;
 375:Lib/enc28j60.c ****   uint16_t len;
 376:Lib/enc28j60.c ****   // check if a packet has been received and buffered
 377:Lib/enc28j60.c ****   //if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
 378:Lib/enc28j60.c ****   // The above does not work. See Rev. B4 Silicon Errata point 6.
 379:Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 380:Lib/enc28j60.c ****   {
 381:Lib/enc28j60.c ****     return(0);
 382:Lib/enc28j60.c ****   }
 383:Lib/enc28j60.c **** 
 384:Lib/enc28j60.c ****   // Set the read pointer to the start of the received packet
 385:Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 386:Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 387:Lib/enc28j60.c ****   // read the next packet pointer
 388:Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 389:Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 390:Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 391:Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 392:Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 393:Lib/enc28j60.c ****   len-=4; //remove the CRC count
 394:Lib/enc28j60.c ****   // read the receive status (see datasheet page 43)
 395:Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 396:Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 397:Lib/enc28j60.c ****   // limit retrieve length
 398:Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 399:Lib/enc28j60.c ****   {
 400:Lib/enc28j60.c ****     len= nicState.bufferSize-1;
 401:Lib/enc28j60.c ****   }
 402:Lib/enc28j60.c ****   // check CRC and symbol errors (see datasheet page 44, table 7-3):
 403:Lib/enc28j60.c ****   // The ERXFCON.CRCEN is set by default. Normally we should not
 404:Lib/enc28j60.c ****   // need to check this.
 405:Lib/enc28j60.c **** 
 406:Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 407:Lib/enc28j60.c ****   {
 408:Lib/enc28j60.c ****     // invalid
 409:Lib/enc28j60.c ****     len=0;
 410:Lib/enc28j60.c ****   }
 411:Lib/enc28j60.c ****   else
 412:Lib/enc28j60.c ****   {
 413:Lib/enc28j60.c ****     // copy the packet from the receive buffer
 414:Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 415:Lib/enc28j60.c ****   }
 416:Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 417:Lib/enc28j60.c ****   // This frees the memory we just read out
 418:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 419:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 420:Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 421:Lib/enc28j60.c ****   // This frees the memory we just read out.
 422:Lib/enc28j60.c ****   // However, compensate for the errata point 13, rev B4: enver write an even address!
 423:Lib/enc28j60.c ****   //FIXME remove this warning
 424:Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 425:Lib/enc28j60.c ****   {
 426:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 427:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 428:Lib/enc28j60.c ****   }
 429:Lib/enc28j60.c ****   else
 430:Lib/enc28j60.c ****   {
 431:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 432:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 433:Lib/enc28j60.c ****   }
 434:Lib/enc28j60.c ****   // decrement the packet counter indicate we are done with this packet
 435:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 436:Lib/enc28j60.c ****   return(len);
 437:Lib/enc28j60.c **** }
 438:Lib/enc28j60.c **** 
 439:Lib/enc28j60.c **** void spiEnableEnc28j60(void)  {};
 253               	.LM0:
 254               	.LFBB1:
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* epilogue start */
 259               	.LM1:
 260 0000 0895      		ret
 262               	.Lscope1:
 264               		.stabd	78,0,0
 266               		.weak	spiDisableEnc28j60
 268               	spiDisableEnc28j60:
 269               		.stabd	46,0,0
 440:Lib/enc28j60.c **** void spiDisableEnc28j60(void) {};
 271               	.LM2:
 272               	.LFBB2:
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* epilogue start */
 277               	.LM3:
 278 0002 0895      		ret
 280               	.Lscope2:
 282               		.stabd	78,0,0
 288               	enc28j60WriteOp:
 289               		.stabd	46,0,0
 110:Lib/enc28j60.c **** {
 291               	.LM4:
 292               	.LFBB3:
 293 0004 FF92      		push r15
 294 0006 0F93      		push r16
 295 0008 1F93      		push r17
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298 000a 182F      		mov r17,r24
 299 000c 062F      		mov r16,r22
 300 000e F42E      		mov r15,r20
 111:Lib/enc28j60.c ****   spiTake();
 302               	.LM5:
 303 0010 0E94 0000 		call spiTake
 112:Lib/enc28j60.c ****   spiEnableEnc28j60();
 305               	.LM6:
 306 0014 0E94 0000 		call spiEnableEnc28j60
 115:Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 308               	.LM7:
 309 0018 0F71      		andi r16,lo8(31)
 310 001a 802F      		mov r24,r16
 311 001c 812B      		or r24,r17
 312 001e 0E94 0000 		call spiSend
 116:Lib/enc28j60.c ****   spiSend(data);
 314               	.LM8:
 315 0022 8F2D      		mov r24,r15
 316 0024 0E94 0000 		call spiSend
 117:Lib/enc28j60.c ****   spiDisableEnc28j60();
 318               	.LM9:
 319 0028 0E94 0000 		call spiDisableEnc28j60
 118:Lib/enc28j60.c ****   spiGive();
 321               	.LM10:
 322 002c 0E94 0000 		call spiGive
 323               	/* epilogue start */
 119:Lib/enc28j60.c **** }
 325               	.LM11:
 326 0030 1F91      		pop r17
 327 0032 0F91      		pop r16
 328 0034 FF90      		pop r15
 329 0036 0895      		ret
 331               	.Lscope3:
 333               		.stabd	78,0,0
 337               	enc28j60SetBank:
 338               		.stabd	46,0,0
 176:Lib/enc28j60.c **** {
 340               	.LM12:
 341               	.LFBB4:
 342 0038 1F93      		push r17
 343 003a CF93      		push r28
 344 003c DF93      		push r29
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347 003e 182F      		mov r17,r24
 178:Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 349               	.LM13:
 350 0040 C82F      		mov r28,r24
 351 0042 D0E0      		ldi r29,lo8(0)
 352 0044 C076      		andi r28,lo8(96)
 353 0046 D070      		andi r29,hi8(96)
 354 0048 8091 0000 		lds r24,Enc28j60Bank
 355 004c 90E0      		ldi r25,lo8(0)
 356 004e C817      		cp r28,r24
 357 0050 D907      		cpc r29,r25
 358 0052 01F0      		breq .L9
 181:Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 360               	.LM14:
 361 0054 80EA      		ldi r24,lo8(-96)
 362 0056 6FE1      		ldi r22,lo8(31)
 363 0058 43E0      		ldi r20,lo8(3)
 364 005a 0E94 0000 		call enc28j60WriteOp
 182:Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 366               	.LM15:
 367 005e 85E0      		ldi r24,5
 368 0060 D595      	1:	asr r29
 369 0062 C795      		ror r28
 370 0064 8A95      		dec r24
 371 0066 01F4      		brne 1b
 372 0068 80E8      		ldi r24,lo8(-128)
 373 006a 6FE1      		ldi r22,lo8(31)
 374 006c 4C2F      		mov r20,r28
 375 006e 0E94 0000 		call enc28j60WriteOp
 183:Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 377               	.LM16:
 378 0072 1076      		andi r17,lo8(96)
 379 0074 1093 0000 		sts Enc28j60Bank,r17
 380               	.L9:
 381               	/* epilogue start */
 185:Lib/enc28j60.c **** }
 383               	.LM17:
 384 0078 DF91      		pop r29
 385 007a CF91      		pop r28
 386 007c 1F91      		pop r17
 387 007e 0895      		ret
 389               	.Lscope4:
 391               		.stabd	78,0,0
 396               	enc28j60Write:
 397               		.stabd	46,0,0
 216:Lib/enc28j60.c **** {
 399               	.LM18:
 400               	.LFBB5:
 401 0080 0F93      		push r16
 402 0082 1F93      		push r17
 403               	/* prologue: function */
 404               	/* frame size = 0 */
 405 0084 182F      		mov r17,r24
 406 0086 062F      		mov r16,r22
 218:Lib/enc28j60.c ****   enc28j60SetBank(address);
 408               	.LM19:
 409 0088 0E94 0000 		call enc28j60SetBank
 220:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 411               	.LM20:
 412 008c 80E4      		ldi r24,lo8(64)
 413 008e 612F      		mov r22,r17
 414 0090 402F      		mov r20,r16
 415 0092 0E94 0000 		call enc28j60WriteOp
 416               	/* epilogue start */
 221:Lib/enc28j60.c **** }
 418               	.LM21:
 419 0096 1F91      		pop r17
 420 0098 0F91      		pop r16
 421 009a 0895      		ret
 423               	.Lscope5:
 425               		.stabd	78,0,0
 428               		.weak	nicSetMacAddress
 430               	nicSetMacAddress:
 431               		.stabd	46,0,0
 441:Lib/enc28j60.c **** 
 442:Lib/enc28j60.c **** void     nicSetMacAddress(uint8_t* macaddr)
 443:Lib/enc28j60.c **** {
 433               	.LM22:
 434               	.LFBB6:
 435 009c 0F93      		push r16
 436 009e 1F93      		push r17
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439 00a0 8C01      		movw r16,r24
 444:Lib/enc28j60.c **** //NOTE: MAC address in ENC28J60 is byte-backward
 445:Lib/enc28j60.c ****   enc28j60Write(MAADR5, macaddr[0]); 
 441               	.LM23:
 442 00a2 84EE      		ldi r24,lo8(-28)
 443 00a4 F801      		movw r30,r16
 444 00a6 6081      		ld r22,Z
 445 00a8 0E94 0000 		call enc28j60Write
 446:Lib/enc28j60.c ****   enc28j60Write(MAADR4, macaddr[1]);
 447               	.LM24:
 448 00ac 85EE      		ldi r24,lo8(-27)
 449 00ae F801      		movw r30,r16
 450 00b0 6181      		ldd r22,Z+1
 451 00b2 0E94 0000 		call enc28j60Write
 447:Lib/enc28j60.c ****   enc28j60Write(MAADR3, macaddr[2]);
 453               	.LM25:
 454 00b6 82EE      		ldi r24,lo8(-30)
 455 00b8 F801      		movw r30,r16
 456 00ba 6281      		ldd r22,Z+2
 457 00bc 0E94 0000 		call enc28j60Write
 448:Lib/enc28j60.c ****   enc28j60Write(MAADR2, macaddr[3]);
 459               	.LM26:
 460 00c0 83EE      		ldi r24,lo8(-29)
 461 00c2 F801      		movw r30,r16
 462 00c4 6381      		ldd r22,Z+3
 463 00c6 0E94 0000 		call enc28j60Write
 449:Lib/enc28j60.c ****   enc28j60Write(MAADR1, macaddr[4]);
 465               	.LM27:
 466 00ca 80EE      		ldi r24,lo8(-32)
 467 00cc F801      		movw r30,r16
 468 00ce 6481      		ldd r22,Z+4
 469 00d0 0E94 0000 		call enc28j60Write
 450:Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 471               	.LM28:
 472 00d4 81EE      		ldi r24,lo8(-31)
 473 00d6 F801      		movw r30,r16
 474 00d8 6581      		ldd r22,Z+5
 475 00da 0E94 0000 		call enc28j60Write
 476               	/* epilogue start */
 451:Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 452:Lib/enc28j60.c **** }
 478               	.LM29:
 479 00de 1F91      		pop r17
 480 00e0 0F91      		pop r16
 481 00e2 0895      		ret
 483               	.Lscope6:
 485               		.stabd	78,0,0
 490               	enc28j60ReadOp:
 491               		.stabd	46,0,0
  87:Lib/enc28j60.c **** {
 493               	.LM30:
 494               	.LFBB7:
 495 00e4 0F93      		push r16
 496 00e6 1F93      		push r17
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499 00e8 182F      		mov r17,r24
 500 00ea 062F      		mov r16,r22
  89:Lib/enc28j60.c ****   spiTake();
 502               	.LM31:
 503 00ec 0E94 0000 		call spiTake
  90:Lib/enc28j60.c ****   spiEnableEnc28j60();
 505               	.LM32:
 506 00f0 0E94 0000 		call spiEnableEnc28j60
  93:Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 508               	.LM33:
 509 00f4 802F      		mov r24,r16
 510 00f6 8F71      		andi r24,lo8(31)
 511 00f8 812B      		or r24,r17
 512 00fa 0E94 0000 		call spiSend
  96:Lib/enc28j60.c ****   result = spiSend(0x00);
 514               	.LM34:
 515 00fe 80E0      		ldi r24,lo8(0)
 516 0100 0E94 0000 		call spiSend
 517 0104 182F      		mov r17,r24
  99:Lib/enc28j60.c ****   if(address & 0x80)
 519               	.LM35:
 520 0106 07FF      		sbrs r16,7
 521 0108 00C0      		rjmp .L15
 101:Lib/enc28j60.c ****     result = spiSend(0x00);
 523               	.LM36:
 524 010a 80E0      		ldi r24,lo8(0)
 525 010c 0E94 0000 		call spiSend
 526 0110 182F      		mov r17,r24
 527               	.L15:
 104:Lib/enc28j60.c ****   spiDisableEnc28j60();
 529               	.LM37:
 530 0112 0E94 0000 		call spiDisableEnc28j60
 105:Lib/enc28j60.c ****   spiGive();
 532               	.LM38:
 533 0116 0E94 0000 		call spiGive
 107:Lib/enc28j60.c **** }
 535               	.LM39:
 536 011a 812F      		mov r24,r17
 537               	/* epilogue start */
 538 011c 1F91      		pop r17
 539 011e 0F91      		pop r16
 540 0120 0895      		ret
 545               	.Lscope7:
 547               		.stabd	78,0,0
 551               	enc28j60Read:
 552               		.stabd	46,0,0
 188:Lib/enc28j60.c **** {
 554               	.LM40:
 555               	.LFBB8:
 556 0122 1F93      		push r17
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559 0124 182F      		mov r17,r24
 190:Lib/enc28j60.c ****   enc28j60SetBank(address);
 561               	.LM41:
 562 0126 0E94 0000 		call enc28j60SetBank
 192:Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 564               	.LM42:
 565 012a 80E0      		ldi r24,lo8(0)
 566 012c 612F      		mov r22,r17
 567 012e 0E94 0000 		call enc28j60ReadOp
 568               	/* epilogue start */
 194:Lib/enc28j60.c **** }
 570               	.LM43:
 571 0132 1F91      		pop r17
 572 0134 0895      		ret
 574               	.Lscope8:
 576               		.stabd	78,0,0
 579               		.weak	nicRegDump
 581               	nicRegDump:
 582               		.stabd	46,0,0
 453:Lib/enc28j60.c **** 
 454:Lib/enc28j60.c **** void     nicGetMacAddress(uint8_t* macaddr)
 455:Lib/enc28j60.c **** {
 456:Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0); 
 457:Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1); 
 458:Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2); 
 459:Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3); 
 460:Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4); 
 461:Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5); 
 462:Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 463:Lib/enc28j60.c **** }
 464:Lib/enc28j60.c **** 
 465:Lib/enc28j60.c **** void     nicRegDump(FILE *stream)
 466:Lib/enc28j60.c **** {
 584               	.LM44:
 585               	.LFBB9:
 586 0136 0F93      		push r16
 587 0138 1F93      		push r17
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590 013a 8C01      		movw r16,r24
 467:Lib/enc28j60.c ****   uint8_t temp;
 468:Lib/enc28j60.c ****   fprintf_P(stream, PSTR("ENC28j60 stan rejestrow:\r\n"));
 592               	.LM45:
 593 013c 00D0      		rcall .
 594 013e 00D0      		rcall .
 595 0140 ADB7      		in r26,__SP_L__
 596 0142 BEB7      		in r27,__SP_H__
 597 0144 1296      		adiw r26,1+1
 598 0146 9C93      		st X,r25
 599 0148 8E93      		st -X,r24
 600 014a 1197      		sbiw r26,1
 601 014c 80E0      		ldi r24,lo8(__c.3218)
 602 014e 90E0      		ldi r25,hi8(__c.3218)
 603 0150 1496      		adiw r26,3+1
 604 0152 9C93      		st X,r25
 605 0154 8E93      		st -X,r24
 606 0156 1397      		sbiw r26,3
 607 0158 0E94 0000 		call fprintf_P
 469:Lib/enc28j60.c **** 
 470:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR0); fprintf_P(stream, PSTR("\tMAADR0 0x%x\r\n"), temp);
 609               	.LM46:
 610 015c 0F90      		pop __tmp_reg__
 611 015e 0F90      		pop __tmp_reg__
 612 0160 0F90      		pop __tmp_reg__
 613 0162 0F90      		pop __tmp_reg__
 614 0164 81EE      		ldi r24,lo8(-31)
 615 0166 0E94 0000 		call enc28j60Read
 616 016a 00D0      		rcall .
 617 016c 00D0      		rcall .
 618 016e 00D0      		rcall .
 619 0170 EDB7      		in r30,__SP_L__
 620 0172 FEB7      		in r31,__SP_H__
 621 0174 3196      		adiw r30,1
 622 0176 ADB7      		in r26,__SP_L__
 623 0178 BEB7      		in r27,__SP_H__
 624 017a 1296      		adiw r26,1+1
 625 017c 1C93      		st X,r17
 626 017e 0E93      		st -X,r16
 627 0180 1197      		sbiw r26,1
 628 0182 20E0      		ldi r18,lo8(__c.3220)
 629 0184 30E0      		ldi r19,hi8(__c.3220)
 630 0186 3383      		std Z+3,r19
 631 0188 2283      		std Z+2,r18
 632 018a 8483      		std Z+4,r24
 633 018c 1582      		std Z+5,__zero_reg__
 634 018e 0E94 0000 		call fprintf_P
 471:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR1); fprintf_P(stream, PSTR("\tMAADR1 0x%x\r\n"), temp);
 636               	.LM47:
 637 0192 EDB7      		in r30,__SP_L__
 638 0194 FEB7      		in r31,__SP_H__
 639 0196 3696      		adiw r30,6
 640 0198 0FB6      		in __tmp_reg__,__SREG__
 641 019a F894      		cli
 642 019c FEBF      		out __SP_H__,r31
 643 019e 0FBE      		out __SREG__,__tmp_reg__
 644 01a0 EDBF      		out __SP_L__,r30
 645 01a2 80EE      		ldi r24,lo8(-32)
 646 01a4 0E94 0000 		call enc28j60Read
 647 01a8 00D0      		rcall .
 648 01aa 00D0      		rcall .
 649 01ac 00D0      		rcall .
 650 01ae EDB7      		in r30,__SP_L__
 651 01b0 FEB7      		in r31,__SP_H__
 652 01b2 3196      		adiw r30,1
 653 01b4 ADB7      		in r26,__SP_L__
 654 01b6 BEB7      		in r27,__SP_H__
 655 01b8 1296      		adiw r26,1+1
 656 01ba 1C93      		st X,r17
 657 01bc 0E93      		st -X,r16
 658 01be 1197      		sbiw r26,1
 659 01c0 20E0      		ldi r18,lo8(__c.3222)
 660 01c2 30E0      		ldi r19,hi8(__c.3222)
 661 01c4 3383      		std Z+3,r19
 662 01c6 2283      		std Z+2,r18
 663 01c8 8483      		std Z+4,r24
 664 01ca 1582      		std Z+5,__zero_reg__
 665 01cc 0E94 0000 		call fprintf_P
 472:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR2); fprintf_P(stream, PSTR("\tMAADR2 0x%x\r\n"), temp);
 667               	.LM48:
 668 01d0 EDB7      		in r30,__SP_L__
 669 01d2 FEB7      		in r31,__SP_H__
 670 01d4 3696      		adiw r30,6
 671 01d6 0FB6      		in __tmp_reg__,__SREG__
 672 01d8 F894      		cli
 673 01da FEBF      		out __SP_H__,r31
 674 01dc 0FBE      		out __SREG__,__tmp_reg__
 675 01de EDBF      		out __SP_L__,r30
 676 01e0 83EE      		ldi r24,lo8(-29)
 677 01e2 0E94 0000 		call enc28j60Read
 678 01e6 00D0      		rcall .
 679 01e8 00D0      		rcall .
 680 01ea 00D0      		rcall .
 681 01ec EDB7      		in r30,__SP_L__
 682 01ee FEB7      		in r31,__SP_H__
 683 01f0 3196      		adiw r30,1
 684 01f2 ADB7      		in r26,__SP_L__
 685 01f4 BEB7      		in r27,__SP_H__
 686 01f6 1296      		adiw r26,1+1
 687 01f8 1C93      		st X,r17
 688 01fa 0E93      		st -X,r16
 689 01fc 1197      		sbiw r26,1
 690 01fe 20E0      		ldi r18,lo8(__c.3224)
 691 0200 30E0      		ldi r19,hi8(__c.3224)
 692 0202 3383      		std Z+3,r19
 693 0204 2283      		std Z+2,r18
 694 0206 8483      		std Z+4,r24
 695 0208 1582      		std Z+5,__zero_reg__
 696 020a 0E94 0000 		call fprintf_P
 473:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR3); fprintf_P(stream, PSTR("\tMAADR3 0x%x\r\n"), temp);
 698               	.LM49:
 699 020e EDB7      		in r30,__SP_L__
 700 0210 FEB7      		in r31,__SP_H__
 701 0212 3696      		adiw r30,6
 702 0214 0FB6      		in __tmp_reg__,__SREG__
 703 0216 F894      		cli
 704 0218 FEBF      		out __SP_H__,r31
 705 021a 0FBE      		out __SREG__,__tmp_reg__
 706 021c EDBF      		out __SP_L__,r30
 707 021e 82EE      		ldi r24,lo8(-30)
 708 0220 0E94 0000 		call enc28j60Read
 709 0224 00D0      		rcall .
 710 0226 00D0      		rcall .
 711 0228 00D0      		rcall .
 712 022a EDB7      		in r30,__SP_L__
 713 022c FEB7      		in r31,__SP_H__
 714 022e 3196      		adiw r30,1
 715 0230 ADB7      		in r26,__SP_L__
 716 0232 BEB7      		in r27,__SP_H__
 717 0234 1296      		adiw r26,1+1
 718 0236 1C93      		st X,r17
 719 0238 0E93      		st -X,r16
 720 023a 1197      		sbiw r26,1
 721 023c 20E0      		ldi r18,lo8(__c.3226)
 722 023e 30E0      		ldi r19,hi8(__c.3226)
 723 0240 3383      		std Z+3,r19
 724 0242 2283      		std Z+2,r18
 725 0244 8483      		std Z+4,r24
 726 0246 1582      		std Z+5,__zero_reg__
 727 0248 0E94 0000 		call fprintf_P
 474:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR4); fprintf_P(stream, PSTR("\tMAADR4 0x%x\r\n"), temp);
 729               	.LM50:
 730 024c EDB7      		in r30,__SP_L__
 731 024e FEB7      		in r31,__SP_H__
 732 0250 3696      		adiw r30,6
 733 0252 0FB6      		in __tmp_reg__,__SREG__
 734 0254 F894      		cli
 735 0256 FEBF      		out __SP_H__,r31
 736 0258 0FBE      		out __SREG__,__tmp_reg__
 737 025a EDBF      		out __SP_L__,r30
 738 025c 85EE      		ldi r24,lo8(-27)
 739 025e 0E94 0000 		call enc28j60Read
 740 0262 00D0      		rcall .
 741 0264 00D0      		rcall .
 742 0266 00D0      		rcall .
 743 0268 EDB7      		in r30,__SP_L__
 744 026a FEB7      		in r31,__SP_H__
 745 026c 3196      		adiw r30,1
 746 026e ADB7      		in r26,__SP_L__
 747 0270 BEB7      		in r27,__SP_H__
 748 0272 1296      		adiw r26,1+1
 749 0274 1C93      		st X,r17
 750 0276 0E93      		st -X,r16
 751 0278 1197      		sbiw r26,1
 752 027a 20E0      		ldi r18,lo8(__c.3228)
 753 027c 30E0      		ldi r19,hi8(__c.3228)
 754 027e 3383      		std Z+3,r19
 755 0280 2283      		std Z+2,r18
 756 0282 8483      		std Z+4,r24
 757 0284 1582      		std Z+5,__zero_reg__
 758 0286 0E94 0000 		call fprintf_P
 475:Lib/enc28j60.c ****   temp = enc28j60Read(MAADR5); fprintf_P(stream, PSTR("\tMAADR5 0x%x\r\n"), temp);
 760               	.LM51:
 761 028a EDB7      		in r30,__SP_L__
 762 028c FEB7      		in r31,__SP_H__
 763 028e 3696      		adiw r30,6
 764 0290 0FB6      		in __tmp_reg__,__SREG__
 765 0292 F894      		cli
 766 0294 FEBF      		out __SP_H__,r31
 767 0296 0FBE      		out __SREG__,__tmp_reg__
 768 0298 EDBF      		out __SP_L__,r30
 769 029a 84EE      		ldi r24,lo8(-28)
 770 029c 0E94 0000 		call enc28j60Read
 771 02a0 00D0      		rcall .
 772 02a2 00D0      		rcall .
 773 02a4 00D0      		rcall .
 774 02a6 EDB7      		in r30,__SP_L__
 775 02a8 FEB7      		in r31,__SP_H__
 776 02aa 3196      		adiw r30,1
 777 02ac ADB7      		in r26,__SP_L__
 778 02ae BEB7      		in r27,__SP_H__
 779 02b0 1296      		adiw r26,1+1
 780 02b2 1C93      		st X,r17
 781 02b4 0E93      		st -X,r16
 782 02b6 1197      		sbiw r26,1
 783 02b8 20E0      		ldi r18,lo8(__c.3230)
 784 02ba 30E0      		ldi r19,hi8(__c.3230)
 785 02bc 3383      		std Z+3,r19
 786 02be 2283      		std Z+2,r18
 787 02c0 8483      		std Z+4,r24
 788 02c2 1582      		std Z+5,__zero_reg__
 789 02c4 0E94 0000 		call fprintf_P
 790 02c8 EDB7      		in r30,__SP_L__
 791 02ca FEB7      		in r31,__SP_H__
 792 02cc 3696      		adiw r30,6
 793 02ce 0FB6      		in __tmp_reg__,__SREG__
 794 02d0 F894      		cli
 795 02d2 FEBF      		out __SP_H__,r31
 796 02d4 0FBE      		out __SREG__,__tmp_reg__
 797 02d6 EDBF      		out __SP_L__,r30
 798               	/* epilogue start */
 476:Lib/enc28j60.c **** }
 800               	.LM52:
 801 02d8 1F91      		pop r17
 802 02da 0F91      		pop r16
 803 02dc 0895      		ret
 805               	.Lscope9:
 807               		.stabd	78,0,0
 810               		.weak	nicGetMacAddress
 812               	nicGetMacAddress:
 813               		.stabd	46,0,0
 455:Lib/enc28j60.c **** {
 815               	.LM53:
 816               	.LFBB10:
 817 02de 0F93      		push r16
 818 02e0 1F93      		push r17
 819               	/* prologue: function */
 820               	/* frame size = 0 */
 821 02e2 8C01      		movw r16,r24
 456:Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0); 
 823               	.LM54:
 824 02e4 81EE      		ldi r24,lo8(-31)
 825 02e6 0E94 0000 		call enc28j60Read
 826 02ea F801      		movw r30,r16
 827 02ec 8583      		std Z+5,r24
 457:Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1); 
 829               	.LM55:
 830 02ee 80EE      		ldi r24,lo8(-32)
 831 02f0 0E94 0000 		call enc28j60Read
 832 02f4 F801      		movw r30,r16
 833 02f6 8483      		std Z+4,r24
 458:Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2); 
 835               	.LM56:
 836 02f8 83EE      		ldi r24,lo8(-29)
 837 02fa 0E94 0000 		call enc28j60Read
 838 02fe F801      		movw r30,r16
 839 0300 8383      		std Z+3,r24
 459:Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3); 
 841               	.LM57:
 842 0302 82EE      		ldi r24,lo8(-30)
 843 0304 0E94 0000 		call enc28j60Read
 844 0308 F801      		movw r30,r16
 845 030a 8283      		std Z+2,r24
 460:Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4); 
 847               	.LM58:
 848 030c 85EE      		ldi r24,lo8(-27)
 849 030e 0E94 0000 		call enc28j60Read
 850 0312 F801      		movw r30,r16
 851 0314 8183      		std Z+1,r24
 461:Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5); 
 853               	.LM59:
 854 0316 84EE      		ldi r24,lo8(-28)
 855 0318 0E94 0000 		call enc28j60Read
 856 031c F801      		movw r30,r16
 857 031e 8083      		st Z,r24
 858               	/* epilogue start */
 463:Lib/enc28j60.c **** }
 860               	.LM60:
 861 0320 1F91      		pop r17
 862 0322 0F91      		pop r16
 863 0324 0895      		ret
 865               	.Lscope10:
 867               		.stabd	78,0,0
 869               	.global	enc28j60hasRxPkt
 871               	enc28j60hasRxPkt:
 872               		.stabd	46,0,0
 364:Lib/enc28j60.c **** {
 874               	.LM61:
 875               	.LFBB11:
 876               	/* prologue: function */
 877               	/* frame size = 0 */
 365:Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 879               	.LM62:
 880 0326 89E3      		ldi r24,lo8(57)
 881 0328 0E94 0000 		call enc28j60Read
 882 032c 8111      		cpse r24,__zero_reg__
 883 032e 81E0      		ldi r24,lo8(1)
 884               	.L24:
 370:Lib/enc28j60.c **** }
 886               	.LM63:
 887 0330 0895      		ret
 889               	.Lscope11:
 891               		.stabd	78,0,0
 893               	.global	enc28j60getrev
 895               	enc28j60getrev:
 896               		.stabd	46,0,0
 324:Lib/enc28j60.c **** {
 898               	.LM64:
 899               	.LFBB12:
 900               	/* prologue: function */
 901               	/* frame size = 0 */
 325:Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 903               	.LM65:
 904 0332 82E7      		ldi r24,lo8(114)
 905 0334 0E94 0000 		call enc28j60Read
 906               	/* epilogue start */
 326:Lib/enc28j60.c **** }
 908               	.LM66:
 909 0338 0895      		ret
 911               	.Lscope12:
 913               		.stabd	78,0,0
 915               		.weak	nicPoll
 917               	nicPoll:
 918               		.stabd	46,0,0
 373:Lib/enc28j60.c **** {
 920               	.LM67:
 921               	.LFBB13:
 922 033a CF92      		push r12
 923 033c DF92      		push r13
 924 033e EF92      		push r14
 925 0340 FF92      		push r15
 926 0342 0F93      		push r16
 927 0344 1F93      		push r17
 928 0346 CF93      		push r28
 929 0348 DF93      		push r29
 930               	/* prologue: function */
 931               	/* frame size = 0 */
 379:Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 933               	.LM68:
 934 034a 89E3      		ldi r24,lo8(57)
 935 034c 0E94 0000 		call enc28j60Read
 936 0350 8823      		tst r24
 937 0352 01F4      		brne .L29
 938 0354 EE24      		clr r14
 939 0356 FF24      		clr r15
 940 0358 00C0      		rjmp .L30
 941               	.L29:
 385:Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 943               	.LM69:
 944 035a 80E0      		ldi r24,lo8(0)
 945 035c 6091 0000 		lds r22,gNextPacketPtr
 946 0360 0E94 0000 		call enc28j60Write
 386:Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 948               	.LM70:
 949 0364 6091 0000 		lds r22,gNextPacketPtr+1
 950 0368 81E0      		ldi r24,lo8(1)
 951 036a 0E94 0000 		call enc28j60Write
 388:Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 953               	.LM71:
 954 036e 8AE3      		ldi r24,lo8(58)
 955 0370 60E0      		ldi r22,lo8(0)
 956 0372 0E94 0000 		call enc28j60ReadOp
 957 0376 082F      		mov r16,r24
 958 0378 10E0      		ldi r17,lo8(0)
 959 037a 1093 0000 		sts (gNextPacketPtr)+1,r17
 960 037e 0093 0000 		sts gNextPacketPtr,r16
 389:Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 962               	.LM72:
 963 0382 8AE3      		ldi r24,lo8(58)
 964 0384 60E0      		ldi r22,lo8(0)
 965 0386 0E94 0000 		call enc28j60ReadOp
 966 038a 382F      		mov r19,r24
 967 038c 20E0      		ldi r18,lo8(0)
 968 038e 202B      		or r18,r16
 969 0390 312B      		or r19,r17
 970 0392 3093 0000 		sts (gNextPacketPtr)+1,r19
 971 0396 2093 0000 		sts gNextPacketPtr,r18
 391:Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 973               	.LM73:
 974 039a 8AE3      		ldi r24,lo8(58)
 975 039c 60E0      		ldi r22,lo8(0)
 976 039e 0E94 0000 		call enc28j60ReadOp
 977 03a2 F82E      		mov r15,r24
 392:Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 979               	.LM74:
 980 03a4 8AE3      		ldi r24,lo8(58)
 981 03a6 60E0      		ldi r22,lo8(0)
 982 03a8 0E94 0000 		call enc28j60ReadOp
 983 03ac D82E      		mov r13,r24
 395:Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 985               	.LM75:
 986 03ae 8AE3      		ldi r24,lo8(58)
 987 03b0 60E0      		ldi r22,lo8(0)
 988 03b2 0E94 0000 		call enc28j60ReadOp
 989 03b6 082F      		mov r16,r24
 990 03b8 10E0      		ldi r17,lo8(0)
 396:Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 992               	.LM76:
 993 03ba 8AE3      		ldi r24,lo8(58)
 994 03bc 60E0      		ldi r22,lo8(0)
 995 03be 0E94 0000 		call enc28j60ReadOp
 398:Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 997               	.LM77:
 998 03c2 4091 0000 		lds r20,nicState
 999 03c6 5091 0000 		lds r21,(nicState)+1
 406:Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 1001               	.LM78:
 1002 03ca 382F      		mov r19,r24
 1003 03cc 20E0      		ldi r18,lo8(0)
 1004 03ce 202B      		or r18,r16
 1005 03d0 312B      		or r19,r17
 1006 03d2 27FD      		sbrc r18,7
 1007 03d4 00C0      		rjmp .L31
 1008 03d6 EE24      		clr r14
 1009 03d8 FF24      		clr r15
 1010 03da 00C0      		rjmp .L32
 1011               	.L31:
 391:Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1013               	.LM79:
 1014 03dc EF2C      		mov r14,r15
 1015 03de FF24      		clr r15
 392:Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1017               	.LM80:
 1018 03e0 9D2D      		mov r25,r13
 1019 03e2 80E0      		ldi r24,lo8(0)
 1020 03e4 E82A      		or r14,r24
 1021 03e6 F92A      		or r15,r25
 393:Lib/enc28j60.c ****   len-=4; //remove the CRC count
 1023               	.LM81:
 1024 03e8 CA01      		movw r24,r20
 1025 03ea 0197      		sbiw r24,1
 1026 03ec 2CEF      		ldi r18,lo8(-4)
 1027 03ee 3FEF      		ldi r19,hi8(-4)
 1028 03f0 E20E      		add r14,r18
 1029 03f2 F31E      		adc r15,r19
 1030 03f4 8E15      		cp r24,r14
 1031 03f6 9F05      		cpc r25,r15
 1032 03f8 00F4      		brsh .L33
 1033 03fa 7C01      		movw r14,r24
 1034               	.L33:
 414:Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 1036               	.LM82:
 1037 03fc 0091 0000 		lds r16,nicState+8
 1038 0400 1091 0000 		lds r17,(nicState+8)+1
 1039               	.LBB8:
 1040               	.LBB9:
 123:Lib/enc28j60.c ****   spiTake();
 1042               	.LM83:
 1043 0404 0E94 0000 		call spiTake
 124:Lib/enc28j60.c ****   spiEnableEnc28j60();
 1045               	.LM84:
 1046 0408 0E94 0000 		call spiEnableEnc28j60
 125:Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 1048               	.LM85:
 1049 040c 8AE3      		ldi r24,lo8(58)
 1050 040e 0E94 0000 		call spiSend
 1051 0412 6801      		movw r12,r16
 1052 0414 E701      		movw r28,r14
 1053 0416 00C0      		rjmp .L34
 1054               	.L35:
 128:Lib/enc28j60.c ****     len--;
 1056               	.LM86:
 1057 0418 2197      		sbiw r28,1
 1058               	.LBE9:
 129:Lib/enc28j60.c ****     *data = spiSend(0x00);
 1060               	.LM87:
 1061 041a 80E0      		ldi r24,lo8(0)
 1062 041c 0E94 0000 		call spiSend
 1063               	.LBB10:
 1064 0420 F601      		movw r30,r12
 1065 0422 8193      		st Z+,r24
 1066 0424 6F01      		movw r12,r30
 1067               	.L34:
 126:Lib/enc28j60.c ****   while(len)
 1069               	.LM88:
 1070 0426 2097      		sbiw r28,0
 1071 0428 01F4      		brne .L35
 132:Lib/enc28j60.c ****   *data='\0';
 1073               	.LM89:
 1074 042a 0E0D      		add r16,r14
 1075 042c 1F1D      		adc r17,r15
 1076 042e F801      		movw r30,r16
 1077 0430 1082      		st Z,__zero_reg__
 133:Lib/enc28j60.c ****   spiDisableEnc28j60();
 1079               	.LM90:
 1080 0432 0E94 0000 		call spiDisableEnc28j60
 134:Lib/enc28j60.c ****   spiGive();
 1082               	.LM91:
 1083 0436 0E94 0000 		call spiGive
 1084               	.L32:
 1085               	.LBE10:
 1086               	.LBE8:
 418:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 1088               	.LM92:
 1089 043a 8CE0      		ldi r24,lo8(12)
 1090 043c 6091 0000 		lds r22,gNextPacketPtr
 1091 0440 0E94 0000 		call enc28j60Write
 419:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 1093               	.LM93:
 1094 0444 6091 0000 		lds r22,gNextPacketPtr+1
 1095 0448 8DE0      		ldi r24,lo8(13)
 1096 044a 0E94 0000 		call enc28j60Write
 424:Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 1098               	.LM94:
 1099 044e 6091 0000 		lds r22,gNextPacketPtr
 1100 0452 7091 0000 		lds r23,(gNextPacketPtr)+1
 1101 0456 CB01      		movw r24,r22
 1102 0458 0197      		sbiw r24,1
 1103 045a 8F5F      		subi r24,lo8(6655)
 1104 045c 9941      		sbci r25,hi8(6655)
 1105 045e 00F0      		brlo .L36
 426:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 1107               	.LM95:
 1108 0460 8CE0      		ldi r24,lo8(12)
 1109 0462 6EEF      		ldi r22,lo8(-2)
 1110 0464 0E94 0000 		call enc28j60Write
 427:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 1112               	.LM96:
 1113 0468 8DE0      		ldi r24,lo8(13)
 1114 046a 69E1      		ldi r22,lo8(25)
 1115 046c 00C0      		rjmp .L39
 1116               	.L36:
 431:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 1118               	.LM97:
 1119 046e 6150      		subi r22,lo8(-(-1))
 1120 0470 8CE0      		ldi r24,lo8(12)
 1121 0472 0E94 0000 		call enc28j60Write
 432:Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 1123               	.LM98:
 1124 0476 2091 0000 		lds r18,gNextPacketPtr
 1125 047a 3091 0000 		lds r19,(gNextPacketPtr)+1
 1126 047e 2150      		subi r18,lo8(-(-1))
 1127 0480 3040      		sbci r19,hi8(-(-1))
 1128 0482 8DE0      		ldi r24,lo8(13)
 1129 0484 632F      		mov r22,r19
 1130               	.L39:
 1131 0486 0E94 0000 		call enc28j60Write
 435:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 1133               	.LM99:
 1134 048a 80E8      		ldi r24,lo8(-128)
 1135 048c 6EE1      		ldi r22,lo8(30)
 1136 048e 40E4      		ldi r20,lo8(64)
 1137 0490 0E94 0000 		call enc28j60WriteOp
 1138               	.L30:
 437:Lib/enc28j60.c **** }
 1140               	.LM100:
 1141 0494 C701      		movw r24,r14
 1142               	/* epilogue start */
 1143 0496 DF91      		pop r29
 1144 0498 CF91      		pop r28
 1145 049a 1F91      		pop r17
 1146 049c 0F91      		pop r16
 1147 049e FF90      		pop r15
 1148 04a0 EF90      		pop r14
 1149 04a2 DF90      		pop r13
 1150 04a4 CF90      		pop r12
 1151 04a6 0895      		ret
 1157               	.Lscope13:
 1159               		.stabd	78,0,0
 1162               		.weak	nicSend
 1164               	nicSend:
 1165               		.stabd	46,0,0
 336:Lib/enc28j60.c **** {
 1167               	.LM101:
 1168               	.LFBB14:
 1169 04a8 0F93      		push r16
 1170 04aa 1F93      		push r17
 1171 04ac CF93      		push r28
 1172 04ae DF93      		push r29
 1173               	/* prologue: function */
 1174               	/* frame size = 0 */
 1175 04b0 8C01      		movw r16,r24
 1176 04b2 00C0      		rjmp .L41
 1177               	.L43:
 341:Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 1179               	.LM102:
 1180 04b4 8CE1      		ldi r24,lo8(28)
 1181 04b6 0E94 0000 		call enc28j60Read
 1182 04ba 81FF      		sbrs r24,1
 1183 04bc 00C0      		rjmp .L42
 343:Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 1185               	.LM103:
 1186 04be 80E8      		ldi r24,lo8(-128)
 1187 04c0 6FE1      		ldi r22,lo8(31)
 1188 04c2 40E8      		ldi r20,lo8(-128)
 1189 04c4 0E94 0000 		call enc28j60WriteOp
 344:Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 1191               	.LM104:
 1192 04c8 80EA      		ldi r24,lo8(-96)
 1193 04ca 6FE1      		ldi r22,lo8(31)
 1194 04cc 40E8      		ldi r20,lo8(-128)
 1195 04ce 0E94 0000 		call enc28j60WriteOp
 1196               	.L42:
 346:Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 1198               	.LM105:
 1199 04d2 80E0      		ldi r24,lo8(0)
 1200 04d4 90E0      		ldi r25,hi8(0)
 1201 04d6 0E94 0000 		call vTaskDelay
 1202               	.L41:
 338:Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 1204               	.LM106:
 1205 04da 80E0      		ldi r24,lo8(0)
 1206 04dc 6FE1      		ldi r22,lo8(31)
 1207 04de 0E94 0000 		call enc28j60ReadOp
 1208 04e2 83FD      		sbrc r24,3
 1209 04e4 00C0      		rjmp .L43
 349:Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 1211               	.LM107:
 1212 04e6 82E0      		ldi r24,lo8(2)
 1213 04e8 6FEF      		ldi r22,lo8(-1)
 1214 04ea 0E94 0000 		call enc28j60Write
 350:Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 1216               	.LM108:
 1217 04ee 83E0      		ldi r24,lo8(3)
 1218 04f0 69E1      		ldi r22,lo8(25)
 1219 04f2 0E94 0000 		call enc28j60Write
 352:Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 1221               	.LM109:
 1222 04f6 602F      		mov r22,r16
 1223 04f8 6150      		subi r22,lo8(-(-1))
 1224 04fa 86E0      		ldi r24,lo8(6)
 1225 04fc 0E94 0000 		call enc28j60Write
 353:Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 1227               	.LM110:
 1228 0500 9801      		movw r18,r16
 1229 0502 2150      		subi r18,lo8(-(6655))
 1230 0504 364E      		sbci r19,hi8(-(6655))
 1231 0506 87E0      		ldi r24,lo8(7)
 1232 0508 632F      		mov r22,r19
 1233 050a 0E94 0000 		call enc28j60Write
 355:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 1235               	.LM111:
 1236 050e 8AE7      		ldi r24,lo8(122)
 1237 0510 60E0      		ldi r22,lo8(0)
 1238 0512 40E0      		ldi r20,lo8(0)
 1239 0514 0E94 0000 		call enc28j60WriteOp
 357:Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 1241               	.LM112:
 1242 0518 C091 0000 		lds r28,nicState+8
 1243 051c D091 0000 		lds r29,(nicState+8)+1
 1244               	.LBB11:
 1245               	.LBB12:
 139:Lib/enc28j60.c ****   spiTake();
 1247               	.LM113:
 1248 0520 0E94 0000 		call spiTake
 140:Lib/enc28j60.c ****   spiEnableEnc28j60();
 1250               	.LM114:
 1251 0524 0E94 0000 		call spiEnableEnc28j60
 143:Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 1253               	.LM115:
 1254 0528 8AE7      		ldi r24,lo8(122)
 1255 052a 00C0      		rjmp .L47
 1256               	.L45:
 146:Lib/enc28j60.c ****     len--;
 1258               	.LM116:
 1259 052c 0150      		subi r16,lo8(-(-1))
 1260 052e 1040      		sbci r17,hi8(-(-1))
 147:Lib/enc28j60.c ****     spiSend(*data);       // write data
 1262               	.LM117:
 1263 0530 8991      		ld r24,Y+
 1264               	.L47:
 1265 0532 0E94 0000 		call spiSend
 144:Lib/enc28j60.c ****   while(len)
 1267               	.LM118:
 1268 0536 0115      		cp r16,__zero_reg__
 1269 0538 1105      		cpc r17,__zero_reg__
 1270 053a 01F4      		brne .L45
 150:Lib/enc28j60.c ****   spiDisableEnc28j60();  
 1272               	.LM119:
 1273 053c 0E94 0000 		call spiDisableEnc28j60
 151:Lib/enc28j60.c ****   spiGive();
 1275               	.LM120:
 1276 0540 0E94 0000 		call spiGive
 1277               	.LBE12:
 1278               	.LBE11:
 359:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 1280               	.LM121:
 1281 0544 80E8      		ldi r24,lo8(-128)
 1282 0546 6FE1      		ldi r22,lo8(31)
 1283 0548 48E0      		ldi r20,lo8(8)
 1284 054a 0E94 0000 		call enc28j60WriteOp
 1285               	/* epilogue start */
 360:Lib/enc28j60.c **** }
 1287               	.LM122:
 1288 054e DF91      		pop r29
 1289 0550 CF91      		pop r28
 1290 0552 1F91      		pop r17
 1291 0554 0F91      		pop r16
 1292 0556 0895      		ret
 1297               	.Lscope14:
 1299               		.stabd	78,0,0
 1301               	.global	enc28j60linkup
 1303               	enc28j60linkup:
 1304               		.stabd	46,0,0
 330:Lib/enc28j60.c **** {
 1306               	.LM123:
 1307               	.LFBB15:
 1308               	/* prologue: function */
 1309               	/* frame size = 0 */
 1310               	.LBB13:
 1311               	.LBB14:
 200:Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 1313               	.LM124:
 1314 0558 84ED      		ldi r24,lo8(-44)
 1315 055a 61E1      		ldi r22,lo8(17)
 1316 055c 0E94 0000 		call enc28j60Write
 201:Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 1318               	.LM125:
 1319 0560 82ED      		ldi r24,lo8(-46)
 1320 0562 61E0      		ldi r22,lo8(1)
 1321 0564 0E94 0000 		call enc28j60Write
 1322               	.L50:
 207:Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 1324               	.LM126:
 1325 0568 80E0      		ldi r24,lo8(0)
 1326 056a 90E0      		ldi r25,hi8(0)
 1327 056c 0E94 0000 		call vTaskDelay
 1328               	.LBE14:
 206:Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1330               	.LM127:
 1331 0570 8AEE      		ldi r24,lo8(-22)
 1332 0572 0E94 0000 		call enc28j60Read
 1333 0576 80FD      		sbrc r24,0
 1334 0578 00C0      		rjmp .L50
 1335               	.LBB15:
 210:Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 1337               	.LM128:
 1338 057a 82ED      		ldi r24,lo8(-46)
 1339 057c 60E0      		ldi r22,lo8(0)
 1340 057e 0E94 0000 		call enc28j60Write
 1341               	.LBE15:
 212:Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 1343               	.LM129:
 1344 0582 89ED      		ldi r24,lo8(-39)
 1345 0584 0E94 0000 		call enc28j60Read
 1346 0588 8111      		cpse r24,__zero_reg__
 1347 058a 81E0      		ldi r24,lo8(1)
 1348               	.L51:
 1349               	.LBE13:
 333:Lib/enc28j60.c **** }
 1351               	.LM130:
 1352 058c 0895      		ret
 1354               	.Lscope15:
 1356               		.stabd	78,0,0
 1360               	enc28j60PhyWrite:
 1361               		.stabd	46,0,0
 224:Lib/enc28j60.c **** {
 1363               	.LM131:
 1364               	.LFBB16:
 1365 058e 0F93      		push r16
 1366 0590 1F93      		push r17
 1367               	/* prologue: function */
 1368               	/* frame size = 0 */
 1369 0592 982F      		mov r25,r24
 1370 0594 162F      		mov r17,r22
 1371 0596 072F      		mov r16,r23
 226:Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 1373               	.LM132:
 1374 0598 84ED      		ldi r24,lo8(-44)
 1375 059a 692F      		mov r22,r25
 1376 059c 0E94 0000 		call enc28j60Write
 228:Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 1378               	.LM133:
 1379 05a0 86ED      		ldi r24,lo8(-42)
 1380 05a2 612F      		mov r22,r17
 1381 05a4 0E94 0000 		call enc28j60Write
 229:Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 1383               	.LM134:
 1384 05a8 87ED      		ldi r24,lo8(-41)
 1385 05aa 602F      		mov r22,r16
 1386 05ac 0E94 0000 		call enc28j60Write
 1387 05b0 00C0      		rjmp .L54
 1388               	.L55:
 234:Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 1390               	.LM135:
 1391 05b2 80E0      		ldi r24,lo8(0)
 1392 05b4 90E0      		ldi r25,hi8(0)
 1393 05b6 0E94 0000 		call vTaskDelay
 1394               	.L54:
 232:Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1396               	.LM136:
 1397 05ba 8AEE      		ldi r24,lo8(-22)
 1398 05bc 0E94 0000 		call enc28j60Read
 1399 05c0 80FD      		sbrc r24,0
 1400 05c2 00C0      		rjmp .L55
 1401               	/* epilogue start */
 236:Lib/enc28j60.c **** }
 1403               	.LM137:
 1404 05c4 1F91      		pop r17
 1405 05c6 0F91      		pop r16
 1406 05c8 0895      		ret
 1408               	.Lscope16:
 1410               		.stabd	78,0,0
 1412               		.weak	nicMacInit
 1414               	nicMacInit:
 1415               		.stabd	46,0,0
  77:Lib/enc28j60.c **** { 
 1417               	.LM138:
 1418               	.LFBB17:
 1419               	/* prologue: function */
 1420               	/* frame size = 0 */
  78:Lib/enc28j60.c ****     vTaskDelay          (5);
 1422               	.LM139:
 1423 05ca 85E0      		ldi r24,lo8(5)
 1424 05cc 90E0      		ldi r25,hi8(5)
 1425 05ce 0E94 0000 		call vTaskDelay
 1426               	.LBB18:
 1427               	.LBB19:
 243:Lib/enc28j60.c ****   PORTE &= ~0x04;
 1429               	.LM140:
 1430 05d2 1A98      		cbi 35-32,2
 244:Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1432               	.LM141:
 1433 05d4 85E0      		ldi r24,lo8(5)
 1434 05d6 90E0      		ldi r25,hi8(5)
 1435 05d8 0E94 0000 		call vTaskDelay
 245:Lib/enc28j60.c ****   PORTE |= 0x04;
 1437               	.LM142:
 1438 05dc 1A9A      		sbi 35-32,2
 247:Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1440               	.LM143:
 1441 05de 85E0      		ldi r24,lo8(5)
 1442 05e0 90E0      		ldi r25,hi8(5)
 1443 05e2 0E94 0000 		call vTaskDelay
 256:Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 1445               	.LM144:
 1446 05e6 1092 0000 		sts (gNextPacketPtr)+1,__zero_reg__
 1447 05ea 1092 0000 		sts gNextPacketPtr,__zero_reg__
 258:Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 1449               	.LM145:
 1450 05ee 88E0      		ldi r24,lo8(8)
 1451 05f0 60E0      		ldi r22,lo8(0)
 1452 05f2 0E94 0000 		call enc28j60Write
 259:Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 1454               	.LM146:
 1455 05f6 89E0      		ldi r24,lo8(9)
 1456 05f8 60E0      		ldi r22,lo8(0)
 1457 05fa 0E94 0000 		call enc28j60Write
 261:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 1459               	.LM147:
 1460 05fe 8CE0      		ldi r24,lo8(12)
 1461 0600 60E0      		ldi r22,lo8(0)
 1462 0602 0E94 0000 		call enc28j60Write
 262:Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 1464               	.LM148:
 1465 0606 8DE0      		ldi r24,lo8(13)
 1466 0608 60E0      		ldi r22,lo8(0)
 1467 060a 0E94 0000 		call enc28j60Write
 264:Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 1469               	.LM149:
 1470 060e 8AE0      		ldi r24,lo8(10)
 1471 0610 6EEF      		ldi r22,lo8(-2)
 1472 0612 0E94 0000 		call enc28j60Write
 265:Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 1474               	.LM150:
 1475 0616 8BE0      		ldi r24,lo8(11)
 1476 0618 69E1      		ldi r22,lo8(25)
 1477 061a 0E94 0000 		call enc28j60Write
 267:Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 1479               	.LM151:
 1480 061e 84E0      		ldi r24,lo8(4)
 1481 0620 6FEF      		ldi r22,lo8(-1)
 1482 0622 0E94 0000 		call enc28j60Write
 268:Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 1484               	.LM152:
 1485 0626 85E0      		ldi r24,lo8(5)
 1486 0628 69E1      		ldi r22,lo8(25)
 1487 062a 0E94 0000 		call enc28j60Write
 270:Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 1489               	.LM153:
 1490 062e 86E0      		ldi r24,lo8(6)
 1491 0630 6FEF      		ldi r22,lo8(-1)
 1492 0632 0E94 0000 		call enc28j60Write
 271:Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 1494               	.LM154:
 1495 0636 87E0      		ldi r24,lo8(7)
 1496 0638 6FE1      		ldi r22,lo8(31)
 1497 063a 0E94 0000 		call enc28j60Write
 283:Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
 1499               	.LM155:
 1500 063e 88E3      		ldi r24,lo8(56)
 1501 0640 60EB      		ldi r22,lo8(-80)
 1502 0642 0E94 0000 		call enc28j60Write
 284:Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 1504               	.LM156:
 1505 0646 88E2      		ldi r24,lo8(40)
 1506 0648 6FE3      		ldi r22,lo8(63)
 1507 064a 0E94 0000 		call enc28j60Write
 285:Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 1509               	.LM157:
 1510 064e 89E2      		ldi r24,lo8(41)
 1511 0650 60E3      		ldi r22,lo8(48)
 1512 0652 0E94 0000 		call enc28j60Write
 286:Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 1514               	.LM158:
 1515 0656 80E3      		ldi r24,lo8(48)
 1516 0658 69EF      		ldi r22,lo8(-7)
 1517 065a 0E94 0000 		call enc28j60Write
 287:Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 1519               	.LM159:
 1520 065e 81E3      		ldi r24,lo8(49)
 1521 0660 67EF      		ldi r22,lo8(-9)
 1522 0662 0E94 0000 		call enc28j60Write
 292:Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 1524               	.LM160:
 1525 0666 80EC      		ldi r24,lo8(-64)
 1526 0668 6DE0      		ldi r22,lo8(13)
 1527 066a 0E94 0000 		call enc28j60Write
 294:Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 1529               	.LM161:
 1530 066e 81EC      		ldi r24,lo8(-63)
 1531 0670 60E0      		ldi r22,lo8(0)
 1532 0672 0E94 0000 		call enc28j60Write
 296:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 1534               	.LM162:
 1535 0676 80E8      		ldi r24,lo8(-128)
 1536 0678 62EC      		ldi r22,lo8(-62)
 1537 067a 42E3      		ldi r20,lo8(50)
 1538 067c 0E94 0000 		call enc28j60WriteOp
 298:Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 1540               	.LM163:
 1541 0680 86EC      		ldi r24,lo8(-58)
 1542 0682 62E1      		ldi r22,lo8(18)
 1543 0684 0E94 0000 		call enc28j60Write
 299:Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 1545               	.LM164:
 1546 0688 87EC      		ldi r24,lo8(-57)
 1547 068a 6CE0      		ldi r22,lo8(12)
 1548 068c 0E94 0000 		call enc28j60Write
 301:Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 1550               	.LM165:
 1551 0690 84EC      		ldi r24,lo8(-60)
 1552 0692 62E1      		ldi r22,lo8(18)
 1553 0694 0E94 0000 		call enc28j60Write
 304:Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 1555               	.LM166:
 1556 0698 8AEC      		ldi r24,lo8(-54)
 1557 069a 6CED      		ldi r22,lo8(-36)
 1558 069c 0E94 0000 		call enc28j60Write
 305:Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 1560               	.LM167:
 1561 06a0 8BEC      		ldi r24,lo8(-53)
 1562 06a2 65E0      		ldi r22,lo8(5)
 1563 06a4 0E94 0000 		call enc28j60Write
 310:Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 1565               	.LM168:
 1566 06a8 80E0      		ldi r24,lo8(nicState+2)
 1567 06aa 90E0      		ldi r25,hi8(nicState+2)
 1568 06ac 0E94 0000 		call nicSetMacAddress
 313:Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 1570               	.LM169:
 1571 06b0 80E1      		ldi r24,lo8(16)
 1572 06b2 60E0      		ldi r22,lo8(256)
 1573 06b4 71E0      		ldi r23,hi8(256)
 1574 06b6 0E94 0000 		call enc28j60PhyWrite
 315:Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 1576               	.LM170:
 1577 06ba 8FE1      		ldi r24,lo8(31)
 1578 06bc 0E94 0000 		call enc28j60SetBank
 317:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 1580               	.LM171:
 1581 06c0 80E8      		ldi r24,lo8(-128)
 1582 06c2 6BE1      		ldi r22,lo8(27)
 1583 06c4 40EC      		ldi r20,lo8(-64)
 1584 06c6 0E94 0000 		call enc28j60WriteOp
 319:Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 1586               	.LM172:
 1587 06ca 80E8      		ldi r24,lo8(-128)
 1588 06cc 6FE1      		ldi r22,lo8(31)
 1589 06ce 44E0      		ldi r20,lo8(4)
 1590 06d0 0E94 0000 		call enc28j60WriteOp
 1591               	.LBE19:
 1592               	.LBE18:
  81:Lib/enc28j60.c ****     vTaskDelay          (5);
 1594               	.LM173:
 1595 06d4 85E0      		ldi r24,lo8(5)
 1596 06d6 90E0      		ldi r25,hi8(5)
 1597 06d8 0E94 0000 		call vTaskDelay
  82:Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
 1599               	.LM174:
 1600 06dc 84E1      		ldi r24,lo8(20)
 1601 06de 66E7      		ldi r22,lo8(1142)
 1602 06e0 74E0      		ldi r23,hi8(1142)
 1603 06e2 0E94 0000 		call enc28j60PhyWrite
  83:Lib/enc28j60.c ****     vTaskDelay          (2);
 1605               	.LM175:
 1606 06e6 82E0      		ldi r24,lo8(2)
 1607 06e8 90E0      		ldi r25,hi8(2)
 1608 06ea 0E94 0000 		call vTaskDelay
 1609               	/* epilogue start */
  84:Lib/enc28j60.c **** }
 1611               	.LM176:
 1612 06ee 0895      		ret
 1614               	.Lscope17:
 1616               		.stabd	78,0,0
 1617               		.section	.progmem.data,"a",@progbits
 1620               	__c.3230:
 1621 0000 094D 4141 		.string	"\tMAADR5 0x%x\r\n"
 1621      4452 3520 
 1621      3078 2578 
 1621      0D0A 00
 1624               	__c.3228:
 1625 000f 094D 4141 		.string	"\tMAADR4 0x%x\r\n"
 1625      4452 3420 
 1625      3078 2578 
 1625      0D0A 00
 1628               	__c.3226:
 1629 001e 094D 4141 		.string	"\tMAADR3 0x%x\r\n"
 1629      4452 3320 
 1629      3078 2578 
 1629      0D0A 00
 1632               	__c.3224:
 1633 002d 094D 4141 		.string	"\tMAADR2 0x%x\r\n"
 1633      4452 3220 
 1633      3078 2578 
 1633      0D0A 00
 1636               	__c.3222:
 1637 003c 094D 4141 		.string	"\tMAADR1 0x%x\r\n"
 1637      4452 3120 
 1637      3078 2578 
 1637      0D0A 00
 1640               	__c.3220:
 1641 004b 094D 4141 		.string	"\tMAADR0 0x%x\r\n"
 1641      4452 3020 
 1641      3078 2578 
 1641      0D0A 00
 1644               	__c.3218:
 1645 005a 454E 4332 		.string	"ENC28j60 stan rejestrow:\r\n"
 1645      386A 3630 
 1645      2073 7461 
 1645      6E20 7265 
 1645      6A65 7374 
 1646               		.lcomm Enc28j60Bank,1
 1647               		.lcomm gNextPacketPtr,2
 1648               		.comm klastry,128,1
 1649               		.comm wwwport,1,1
 1650               		.comm rollers,2,1
 1651               		.comm xSemaphoreSpiSS,2,1
 1652               		.comm portA,1,1
 1653               		.comm portB,1,1
 1654               		.comm lockSensors,2,1
 1655               		.comm xSemaphoreRs485,2,1
 1656               		.comm nicState,14,1
 1657               		.comm IpMyConfig,15,1
 1658               		.comm arpDebug,2,1
 1659               		.comm arpDebugLevel,1,1
 1660               		.comm icmpDebug,2,1
 1661               		.comm icmpDebugLevel,1,1
 1662               		.comm udpSocket,2,1
 1663               		.comm udpDbgStream,2,1
 1664               		.comm udpDbgLevel,1,1
 1665               		.comm tcpDebugStream,2,1
 1666               		.comm tcpDebugLevel,1,1
 1667               		.comm sockets,2,1
 1668               		.comm czasRtc,7,1
 1699               		.weak	spiSend
 1700               		.text
 1702               	.Letext0:
 1703               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 enc28j60.c
     /tmp/ccLXrZbp.s:2      *ABS*:0000003f __SREG__
     /tmp/ccLXrZbp.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccLXrZbp.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccLXrZbp.s:5      *ABS*:00000034 __CCP__
     /tmp/ccLXrZbp.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccLXrZbp.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccLXrZbp.s:250    .text:00000000 spiEnableEnc28j60
     /tmp/ccLXrZbp.s:268    .text:00000002 spiDisableEnc28j60
     /tmp/ccLXrZbp.s:288    .text:00000004 enc28j60WriteOp
     /tmp/ccLXrZbp.s:337    .text:00000038 enc28j60SetBank
                             .bss:00000000 Enc28j60Bank
     /tmp/ccLXrZbp.s:396    .text:00000080 enc28j60Write
     /tmp/ccLXrZbp.s:430    .text:0000009c nicSetMacAddress
     /tmp/ccLXrZbp.s:490    .text:000000e4 enc28j60ReadOp
     /tmp/ccLXrZbp.s:551    .text:00000122 enc28j60Read
     /tmp/ccLXrZbp.s:581    .text:00000136 nicRegDump
     /tmp/ccLXrZbp.s:1644   .progmem.data:0000005a __c.3218
     /tmp/ccLXrZbp.s:1640   .progmem.data:0000004b __c.3220
     /tmp/ccLXrZbp.s:1636   .progmem.data:0000003c __c.3222
     /tmp/ccLXrZbp.s:1632   .progmem.data:0000002d __c.3224
     /tmp/ccLXrZbp.s:1628   .progmem.data:0000001e __c.3226
     /tmp/ccLXrZbp.s:1624   .progmem.data:0000000f __c.3228
     /tmp/ccLXrZbp.s:1620   .progmem.data:00000000 __c.3230
     /tmp/ccLXrZbp.s:812    .text:000002de nicGetMacAddress
     /tmp/ccLXrZbp.s:871    .text:00000326 enc28j60hasRxPkt
     /tmp/ccLXrZbp.s:895    .text:00000332 enc28j60getrev
     /tmp/ccLXrZbp.s:917    .text:0000033a nicPoll
     /tmp/ccLXrZbp.s:1646   .bss:00000001 gNextPacketPtr
                            *COM*:0000000e nicState
     /tmp/ccLXrZbp.s:1164   .text:000004a8 nicSend
     /tmp/ccLXrZbp.s:1303   .text:00000558 enc28j60linkup
     /tmp/ccLXrZbp.s:1360   .text:0000058e enc28j60PhyWrite
     /tmp/ccLXrZbp.s:1414   .text:000005ca nicMacInit
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000007 czasRtc

UNDEFINED SYMBOLS
spiTake
spiSend
spiGive
fprintf_P
vTaskDelay
__do_clear_bss
