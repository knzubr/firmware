   1               		.file	"heap_avr.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 114               	.global	vPortFree
 116               	vPortFree:
 117               		.stabd	46,0,0
   1:portable/MemMang/heap_avr.c **** /*
   2:portable/MemMang/heap_avr.c ****     FreeRTOS V6.0.4 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:portable/MemMang/heap_avr.c **** 
   4:portable/MemMang/heap_avr.c ****     ***************************************************************************
   5:portable/MemMang/heap_avr.c ****     *                                                                         *
   6:portable/MemMang/heap_avr.c ****     * If you are:                                                             *
   7:portable/MemMang/heap_avr.c ****     *                                                                         *
   8:portable/MemMang/heap_avr.c ****     *    + New to FreeRTOS,                                                   *
   9:portable/MemMang/heap_avr.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:portable/MemMang/heap_avr.c ****     *    + Looking for basic training,                                        *
  11:portable/MemMang/heap_avr.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:portable/MemMang/heap_avr.c ****     *                                                                         *
  13:portable/MemMang/heap_avr.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:portable/MemMang/heap_avr.c ****     *                                                                         *
  15:portable/MemMang/heap_avr.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:portable/MemMang/heap_avr.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:portable/MemMang/heap_avr.c ****     *                                                                         *
  18:portable/MemMang/heap_avr.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:portable/MemMang/heap_avr.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:portable/MemMang/heap_avr.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:portable/MemMang/heap_avr.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:portable/MemMang/heap_avr.c ****     *                                                                         *
  23:portable/MemMang/heap_avr.c ****     ***************************************************************************
  24:portable/MemMang/heap_avr.c **** 
  25:portable/MemMang/heap_avr.c ****     This file is part of the FreeRTOS distribution.
  26:portable/MemMang/heap_avr.c **** 
  27:portable/MemMang/heap_avr.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:portable/MemMang/heap_avr.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:portable/MemMang/heap_avr.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:portable/MemMang/heap_avr.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:portable/MemMang/heap_avr.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:portable/MemMang/heap_avr.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:portable/MemMang/heap_avr.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:portable/MemMang/heap_avr.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:portable/MemMang/heap_avr.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:portable/MemMang/heap_avr.c ****     more details. You should have received a copy of the GNU General Public 
  37:portable/MemMang/heap_avr.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:portable/MemMang/heap_avr.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:portable/MemMang/heap_avr.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:portable/MemMang/heap_avr.c ****     FreeRTOS WEB site.
  41:portable/MemMang/heap_avr.c **** 
  42:portable/MemMang/heap_avr.c ****     1 tab == 4 spaces!
  43:portable/MemMang/heap_avr.c **** 
  44:portable/MemMang/heap_avr.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:portable/MemMang/heap_avr.c ****     contact details.
  46:portable/MemMang/heap_avr.c **** 
  47:portable/MemMang/heap_avr.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:portable/MemMang/heap_avr.c ****     critical systems.
  49:portable/MemMang/heap_avr.c **** 
  50:portable/MemMang/heap_avr.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:portable/MemMang/heap_avr.c ****     licensing and training services.
  52:portable/MemMang/heap_avr.c **** */
  53:portable/MemMang/heap_avr.c **** 
  54:portable/MemMang/heap_avr.c **** 
  55:portable/MemMang/heap_avr.c **** /*
  56:portable/MemMang/heap_avr.c ****  * AVR implementation of pvPortMalloc().
  57:portable/MemMang/heap_avr.c ****  * Modified by Adam Kaliszan
  58:portable/MemMang/heap_avr.c ****  */
  59:portable/MemMang/heap_avr.c **** #include <stdlib.h>
  60:portable/MemMang/heap_avr.c **** 
  61:portable/MemMang/heap_avr.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  62:portable/MemMang/heap_avr.c **** all the API functions to use the MPU wrappers.  That should only be done when
  63:portable/MemMang/heap_avr.c **** task.h is included from an application file. */
  64:portable/MemMang/heap_avr.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  65:portable/MemMang/heap_avr.c **** 
  66:portable/MemMang/heap_avr.c **** #include "FreeRTOS.h"
  67:portable/MemMang/heap_avr.c **** #include "task.h"
  68:portable/MemMang/heap_avr.c **** 
  69:portable/MemMang/heap_avr.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:portable/MemMang/heap_avr.c **** 
  71:portable/MemMang/heap_avr.c **** /* Allocate the memory for the heap.  The struct is used to force byte
  72:portable/MemMang/heap_avr.c **** alignment without using any non-portable code. */
  73:portable/MemMang/heap_avr.c **** static union xRTOS_HEAP
  74:portable/MemMang/heap_avr.c **** {
  75:portable/MemMang/heap_avr.c **** 	#if portBYTE_ALIGNMENT == 8
  76:portable/MemMang/heap_avr.c **** 		volatile portDOUBLE dDummy;
  77:portable/MemMang/heap_avr.c **** 	#else
  78:portable/MemMang/heap_avr.c **** 		volatile unsigned long ulDummy;
  79:portable/MemMang/heap_avr.c **** 	#endif	
  80:portable/MemMang/heap_avr.c **** 	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];
  81:portable/MemMang/heap_avr.c **** } xHeap;
  82:portable/MemMang/heap_avr.c **** 
  83:portable/MemMang/heap_avr.c **** static size_t xNextFreeByte = ( size_t ) 0;
  84:portable/MemMang/heap_avr.c **** /*-----------------------------------------------------------*/
  85:portable/MemMang/heap_avr.c **** 
  86:portable/MemMang/heap_avr.c **** void *pvPortMalloc( size_t xWantedSize )
  87:portable/MemMang/heap_avr.c **** {
  88:portable/MemMang/heap_avr.c **** void *pvReturn = NULL; 
  89:portable/MemMang/heap_avr.c **** 
  90:portable/MemMang/heap_avr.c **** 	/* Ensure that blocks are always aligned to the required number of bytes. */
  91:portable/MemMang/heap_avr.c **** 	#if portBYTE_ALIGNMENT != 1
  92:portable/MemMang/heap_avr.c **** 		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  93:portable/MemMang/heap_avr.c **** 		{
  94:portable/MemMang/heap_avr.c **** 			/* Byte alignment required. */
  95:portable/MemMang/heap_avr.c **** 			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  96:portable/MemMang/heap_avr.c **** 		}
  97:portable/MemMang/heap_avr.c **** 	#endif
  98:portable/MemMang/heap_avr.c **** 
  99:portable/MemMang/heap_avr.c **** 	vTaskSuspendAll();
 100:portable/MemMang/heap_avr.c **** 	{
 101:portable/MemMang/heap_avr.c **** 		/* Check there is enough room left for the allocation. */
 102:portable/MemMang/heap_avr.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 103:portable/MemMang/heap_avr.c **** 			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 104:portable/MemMang/heap_avr.c **** 		{
 105:portable/MemMang/heap_avr.c **** 			/* Return the next free byte then increment the index past this
 106:portable/MemMang/heap_avr.c **** 			block. */
 107:portable/MemMang/heap_avr.c **** 			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 108:portable/MemMang/heap_avr.c **** 			xNextFreeByte += xWantedSize;			
 109:portable/MemMang/heap_avr.c **** 		}	
 110:portable/MemMang/heap_avr.c **** 	}
 111:portable/MemMang/heap_avr.c **** 	xTaskResumeAll();
 112:portable/MemMang/heap_avr.c **** 	
 113:portable/MemMang/heap_avr.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 114:portable/MemMang/heap_avr.c **** 	{
 115:portable/MemMang/heap_avr.c **** 		if( pvReturn == NULL )
 116:portable/MemMang/heap_avr.c **** 		{
 117:portable/MemMang/heap_avr.c **** 			extern void vApplicationMallocFailedHook( void );
 118:portable/MemMang/heap_avr.c **** 			vApplicationMallocFailedHook();
 119:portable/MemMang/heap_avr.c **** 		}
 120:portable/MemMang/heap_avr.c **** 	}
 121:portable/MemMang/heap_avr.c **** 	#endif	
 122:portable/MemMang/heap_avr.c **** 
 123:portable/MemMang/heap_avr.c **** 	return pvReturn;
 124:portable/MemMang/heap_avr.c **** }
 125:portable/MemMang/heap_avr.c **** /*-----------------------------------------------------------*/
 126:portable/MemMang/heap_avr.c **** 
 127:portable/MemMang/heap_avr.c **** void vPortFree( void *pv )
 128:portable/MemMang/heap_avr.c **** {
 119               	.LM0:
 120               	.LFBB1:
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* epilogue start */
 129:portable/MemMang/heap_avr.c **** 	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
 130:portable/MemMang/heap_avr.c **** 	for alternative implementations, and the memory management pages of 
 131:portable/MemMang/heap_avr.c **** 	http://www.FreeRTOS.org for more information. */
 132:portable/MemMang/heap_avr.c **** 	( void ) pv;
 133:portable/MemMang/heap_avr.c **** }
 125               	.LM1:
 126 0000 0895      		ret
 128               	.Lscope1:
 130               		.stabd	78,0,0
 132               	.global	vPortInitialiseBlocks
 134               	vPortInitialiseBlocks:
 135               		.stabd	46,0,0
 134:portable/MemMang/heap_avr.c **** /*-----------------------------------------------------------*/
 135:portable/MemMang/heap_avr.c **** 
 136:portable/MemMang/heap_avr.c **** void vPortInitialiseBlocks( void )
 137:portable/MemMang/heap_avr.c **** {
 137               	.LM2:
 138               	.LFBB2:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 138:portable/MemMang/heap_avr.c **** 	/* Only required when static memory is not cleared. */
 139:portable/MemMang/heap_avr.c **** 	xNextFreeByte = ( size_t ) 0;
 142               	.LM3:
 143 0002 1092 0000 		sts (xNextFreeByte)+1,__zero_reg__
 144 0006 1092 0000 		sts xNextFreeByte,__zero_reg__
 145               	/* epilogue start */
 140:portable/MemMang/heap_avr.c **** }
 147               	.LM4:
 148 000a 0895      		ret
 150               	.Lscope2:
 152               		.stabd	78,0,0
 154               	.global	xPortGetFreeHeapSize
 156               	xPortGetFreeHeapSize:
 157               		.stabd	46,0,0
 141:portable/MemMang/heap_avr.c **** /*-----------------------------------------------------------*/
 142:portable/MemMang/heap_avr.c **** 
 143:portable/MemMang/heap_avr.c **** size_t xPortGetFreeHeapSize( void )
 144:portable/MemMang/heap_avr.c **** {
 159               	.LM5:
 160               	.LFBB3:
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 164               	.LM6:
 165 000c 2CE1      		ldi r18,lo8(3100)
 166 000e 3CE0      		ldi r19,hi8(3100)
 167 0010 8091 0000 		lds r24,xNextFreeByte
 168 0014 9091 0000 		lds r25,(xNextFreeByte)+1
 169 0018 281B      		sub r18,r24
 170 001a 390B      		sbc r19,r25
 145:portable/MemMang/heap_avr.c **** 	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 146:portable/MemMang/heap_avr.c **** }
 172               	.LM7:
 173 001c C901      		movw r24,r18
 174               	/* epilogue start */
 175 001e 0895      		ret
 177               	.Lscope3:
 179               		.stabd	78,0,0
 182               	.global	pvPortMalloc
 184               	pvPortMalloc:
 185               		.stabd	46,0,0
  87:portable/MemMang/heap_avr.c **** {
 187               	.LM8:
 188               	.LFBB4:
 189 0020 0F93      		push r16
 190 0022 1F93      		push r17
 191 0024 CF93      		push r28
 192 0026 DF93      		push r29
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195 0028 8C01      		movw r16,r24
  99:portable/MemMang/heap_avr.c **** 	vTaskSuspendAll();
 197               	.LM9:
 198 002a 0E94 0000 		call vTaskSuspendAll
 102:portable/MemMang/heap_avr.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 200               	.LM10:
 201 002e 8091 0000 		lds r24,xNextFreeByte
 202 0032 9091 0000 		lds r25,(xNextFreeByte)+1
 203 0036 9801      		movw r18,r16
 204 0038 280F      		add r18,r24
 205 003a 391F      		adc r19,r25
 206 003c 4CE0      		ldi r20,hi8(3100)
 207 003e 2C31      		cpi r18,lo8(3100)
 208 0040 3407      		cpc r19,r20
 209 0042 00F4      		brsh .L8
 210 0044 8217      		cp r24,r18
 211 0046 9307      		cpc r25,r19
 212 0048 00F4      		brsh .L8
 107:portable/MemMang/heap_avr.c **** 			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 214               	.LM11:
 215 004a EC01      		movw r28,r24
 216 004c C050      		subi r28,lo8(-(xHeap))
 217 004e D040      		sbci r29,hi8(-(xHeap))
 108:portable/MemMang/heap_avr.c **** 			xNextFreeByte += xWantedSize;			
 219               	.LM12:
 220 0050 3093 0000 		sts (xNextFreeByte)+1,r19
 221 0054 2093 0000 		sts xNextFreeByte,r18
 222 0058 00C0      		rjmp .L9
 223               	.L8:
 224 005a C0E0      		ldi r28,lo8(0)
 225 005c D0E0      		ldi r29,hi8(0)
 226               	.L9:
 111:portable/MemMang/heap_avr.c **** 	xTaskResumeAll();
 228               	.LM13:
 229 005e 0E94 0000 		call xTaskResumeAll
 124:portable/MemMang/heap_avr.c **** }
 231               	.LM14:
 232 0062 CE01      		movw r24,r28
 233               	/* epilogue start */
 234 0064 DF91      		pop r29
 235 0066 CF91      		pop r28
 236 0068 1F91      		pop r17
 237 006a 0F91      		pop r16
 238 006c 0895      		ret
 243               	.Lscope4:
 245               		.stabd	78,0,0
 246               		.lcomm xNextFreeByte,2
 247               		.lcomm xHeap,3100
 251               	.Letext0:
 252               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 heap_avr.c
     /tmp/ccvZnIIx.s:2      *ABS*:0000003f __SREG__
     /tmp/ccvZnIIx.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccvZnIIx.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccvZnIIx.s:5      *ABS*:00000034 __CCP__
     /tmp/ccvZnIIx.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccvZnIIx.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccvZnIIx.s:116    .text:00000000 vPortFree
     /tmp/ccvZnIIx.s:134    .text:00000002 vPortInitialiseBlocks
                             .bss:00000000 xNextFreeByte
     /tmp/ccvZnIIx.s:156    .text:0000000c xPortGetFreeHeapSize
     /tmp/ccvZnIIx.s:184    .text:00000020 pvPortMalloc
     /tmp/ccvZnIIx.s:246    .bss:00000002 xHeap

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss
