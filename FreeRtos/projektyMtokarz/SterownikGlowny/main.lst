   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 561               	.global	main
 563               	main:
 564               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  
   3:main.c        **** 	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
   4:main.c        **** 	This file is part of the FreeRTOS.org distribution.
   5:main.c        **** 	FreeRTOS.org is free software; you can redistribute it and/or modify it 
   6:main.c        **** 	under the terms of the GNU General Public License (version 2) as published
   7:main.c        **** 	by the Free Software Foundation and modified by the FreeRTOS exception.
   8:main.c        **** 	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
   9:main.c        **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  10:main.c        **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
  11:main.c        **** 	more details.
  12:main.c        **** 
  13:main.c        **** 	You should have received a copy of the GNU General Public License along 
  14:main.c        **** 	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59 
  15:main.c        **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  16:main.c        **** 
  17:main.c        **** 	A special exception to the GPL is included to allow you to distribute a 
  18:main.c        **** 	combined work that includes FreeRTOS.org without being obliged to provide
  19:main.c        **** 	the source code for any proprietary components.  See the licensing section
  20:main.c        **** 	of http://www.FreeRTOS.org for full details.
  21:main.c        **** 	***************************************************************************
  22:main.c        **** 	*                                                                         *
  23:main.c        **** 	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
  24:main.c        **** 	*                                                                         *
  25:main.c        **** 	* This is a concise, step by step, 'hands on' guide that describes both   *
  26:main.c        **** 	* general multitasking concepts and FreeRTOS specifics. It presents and   *
  27:main.c        **** 	* explains numerous examples that are written using the FreeRTOS API.     *
  28:main.c        **** 	* Full source code for all the examples is provided in an accompanying    *
  29:main.c        **** 	* .zip file.                                                              *
  30:main.c        **** 	*                                                                         *
  31:main.c        **** 	***************************************************************************
  32:main.c        **** 	1 tab == 4 spaces!
  33:main.c        **** 	Please ensure to read the configuration and relevant port sections of the
  34:main.c        **** 	online documentation.
  35:main.c        **** 
  36:main.c        **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  37:main.c        **** 	contact details.
  38:main.c        **** 
  39:main.c        **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  40:main.c        **** 	critical systems.
  41:main.c        **** 
  42:main.c        **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  43:main.c        **** 	licensing and training services.
  44:main.c        **** */
  45:main.c        **** 
  46:main.c        **** #include "main.h"
  47:main.c        **** 
  48:main.c        **** uint8_t timer100Hz = 0;
  49:main.c        **** 
  50:main.c        **** xQueueHandle xVtyTx;
  51:main.c        **** xQueueHandle xVtyRec;
  52:main.c        **** 
  53:main.c        **** xQueueHandle xRs485Tx;
  54:main.c        **** xQueueHandle xRs485Rec;
  55:main.c        **** 
  56:main.c        **** 
  57:main.c        **** volatile uint8_t temperature;
  58:main.c        **** volatile uint8_t voltage;
  59:main.c        **** 
  60:main.c        **** 
  61:main.c        **** void vApplicationIdleHook( void );
  62:main.c        **** 
  63:main.c        **** /**
  64:main.c        ****  * RTC clock support
  65:main.c        ****  */
  66:main.c        **** void vApplicationTickHook( void );
  67:main.c        **** 
  68:main.c        **** xTaskHandle xHandleVTY_USB;
  69:main.c        **** xTaskHandle xHandleVTY_UDP;
  70:main.c        **** xTaskHandle xHandleEnc;
  71:main.c        **** xTaskHandle xHandleSensors;
  72:main.c        **** xTaskHandle xHandleUSB;
  73:main.c        **** 
  74:main.c        **** //void initExternalMem(void)
  75:main.c        **** //{
  76:main.c        ****   //MCUCR |= _BV(SRE);          //Włączenie pamięci zewnętrznej
  77:main.c        ****   //MCUCR |= 0x0E;
  78:main.c        **** //}
  79:main.c        **** 
  80:main.c        **** cmdState_t *CLIStateSerialUsb;
  81:main.c        **** cmdState_t *CLIStateSerialUdp;
  82:main.c        **** FILE usbStream;
  83:main.c        **** FILE udpStream;
  84:main.c        **** 
  85:main.c        **** streamBuffers_t udpBuffers;
  86:main.c        **** 
  87:main.c        **** portSHORT main( void )
  88:main.c        **** {
 566               	.LM0:
 567               	.LFBB1:
 568 0000 AF92      		push r10
 569 0002 BF92      		push r11
 570 0004 CF92      		push r12
 571 0006 DF92      		push r13
 572 0008 EF92      		push r14
 573 000a FF92      		push r15
 574 000c 0F93      		push r16
 575               	/* prologue: function */
 576               	/* frame size = 0 */
 577               	/* stack size = 7 */
 578               	.L__stack_usage = 7
  89:main.c        ****   //ramDyskInit();              //Inicjalizacja Ram dysku
  90:main.c        ****   //hardwareInit();
  91:main.c        ****   //spiInit(disableAllSpiDevices);
  92:main.c        ****   // MOJE
  93:main.c        ****   /* konfiguracja zewnętrznego kwarcu, bez PLL, Pres ABCD=1*/
  94:main.c        **** 	OSC.XOSCCTRL=0b1101011;
 580               	.LM1:
 581 000e 8BE6      		ldi r24,lo8(107)
 582 0010 E0E5      		ldi r30,lo8(80)
 583 0012 F0E0      		ldi r31,hi8(80)
 584 0014 8283      		std Z+2,r24
  95:main.c        **** 	OSC.CTRL=0b00001000;
 586               	.LM2:
 587 0016 88E0      		ldi r24,lo8(8)
 588 0018 8093 5000 		sts 80,r24
 589               	.L2:
  96:main.c        **** 	while(!(OSC.STATUS & OSC_XOSCEN_bm));
 591               	.LM3:
 592 001c 8091 5100 		lds r24,81
 593 0020 83FF      		sbrs r24,3
 594 0022 00C0      		rjmp .L2
  97:main.c        **** 	CCP = CCP_IOREG_gc;
 596               	.LM4:
 597 0024 88ED      		ldi r24,lo8(-40)
 598 0026 84BF      		out 52-0,r24
  98:main.c        **** 	CLK.CTRL=CLK_SCLKSEL_XOSC_gc;
 600               	.LM5:
 601 0028 83E0      		ldi r24,lo8(3)
 602 002a 8093 4000 		sts 64,r24
  99:main.c        **** 	// Koniec konfuguracji, Zew kwarc 16MHz
 100:main.c        **** 	PORTD.OUT=0xFF; //ok
 604               	.LM6:
 605 002e E0E6      		ldi r30,lo8(1632)
 606 0030 F6E0      		ldi r31,hi8(1632)
 607 0032 9FEF      		ldi r25,lo8(-1)
 608 0034 9483      		std Z+4,r25
 101:main.c        **** 	PORTD.DIR=PIN3_bm;//ok
 610               	.LM7:
 611 0036 98E0      		ldi r25,lo8(8)
 612 0038 9093 6006 		sts 1632,r25
 102:main.c        **** 	PORTD.DIRCLR = PIN2_bm;//ok
 614               	.LM8:
 615 003c 94E0      		ldi r25,lo8(4)
 616 003e 9283      		std Z+2,r25
 103:main.c        **** 	USARTD0.CTRLC=0b00000011;//ok
 618               	.LM9:
 619 0040 E0EA      		ldi r30,lo8(2464)
 620 0042 F9E0      		ldi r31,hi8(2464)
 621 0044 8583      		std Z+5,r24
 104:main.c        **** 	USARTD0.CTRLA|=(USART_RXCINTLVL_LO_gc)|(USART_TXCINTLVL_LO_gc);
 623               	.LM10:
 624 0046 8091 A309 		lds r24,2467
 625 004a 8461      		ori r24,lo8(20)
 626 004c 8383      		std Z+3,r24
 105:main.c        **** 	USARTD0.BAUDCTRLA=0b01100111;//12;
 628               	.LM11:
 629 004e 87E6      		ldi r24,lo8(103)
 630 0050 8683      		std Z+6,r24
 106:main.c        **** 	USARTD0.BAUDCTRLB=0;//(0 << USART_BSCALE0_bp)|(12 >> 8);
 632               	.LM12:
 633 0052 1782      		std Z+7,__zero_reg__
 107:main.c        **** 	USARTD0.CTRLB=0b00011000;
 635               	.LM13:
 636 0054 88E1      		ldi r24,lo8(24)
 637 0056 8483      		std Z+4,r24
 108:main.c        ****   
 109:main.c        ****   //MOJE
 110:main.c        **** // VTY on serial  
 111:main.c        ****   //xSerialPortInitMinimal(); 
 112:main.c        ****   CLIStateSerialUsb  = xmalloc(sizeof(cmdState_t));
 639               	.LM14:
 640 0058 83E2      		ldi r24,lo8(35)
 641 005a 90E0      		ldi r25,hi8(35)
 642 005c 0E94 0000 		call xmalloc
 643 0060 8093 0000 		sts CLIStateSerialUsb,r24
 644 0064 9093 0000 		sts CLIStateSerialUsb+1,r25
 113:main.c        ****   CLIStateSerialUdp  = xmalloc(sizeof(cmdState_t));
 646               	.LM15:
 647 0068 83E2      		ldi r24,lo8(35)
 648 006a 90E0      		ldi r25,hi8(35)
 649 006c 0E94 0000 		call xmalloc
 650 0070 8093 0000 		sts CLIStateSerialUdp,r24
 651 0074 9093 0000 		sts CLIStateSerialUdp+1,r25
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** //  cmdStateClear(newCmdState);
 117:main.c        ****   
 118:main.c        ****  // sensorsTaskInit();
 119:main.c        ****   //loadConfiguration();
 120:main.c        **** 
 121:main.c        ****  // initQueueStreamUSB(&usbStream);
 122:main.c        ****  // VtyInit(CLIStateSerialUsb, &usbStream);
 123:main.c        **** 
 124:main.c        ****  // udpInit();
 125:main.c        ****  // socketInit();
 126:main.c        ****  // initQueueStream(&udpStream, &udpBuffers, udpSocket->Rx, udpSocket->Tx);
 127:main.c        ****  // VtyInit(CLIStateSerialUdp, &udpStream);
 128:main.c        ****   
 129:main.c        **** //xTaskCreate(encTask,        NULL /*"ENC"    */, STACK_SIZE_ENC,       (void *)CLIStateSerialUsb->
 130:main.c        ****   xTaskCreate(vTaskVTYusb,    NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUsb)
 653               	.LM16:
 654 0078 2091 0000 		lds r18,CLIStateSerialUsb
 655 007c 3091 0000 		lds r19,CLIStateSerialUsb+1
 656 0080 80E0      		ldi r24,lo8(gs(vTaskVTYusb))
 657 0082 90E0      		ldi r25,hi8(gs(vTaskVTYusb))
 658 0084 60E0      		ldi r22,lo8(0)
 659 0086 70E0      		ldi r23,hi8(0)
 660 0088 4CEB      		ldi r20,lo8(700)
 661 008a 52E0      		ldi r21,hi8(700)
 662 008c 01E0      		ldi r16,lo8(1)
 663 008e F0E0      		ldi r31,lo8(xHandleVTY_USB)
 664 0090 EF2E      		mov r14,r31
 665 0092 F0E0      		ldi r31,hi8(xHandleVTY_USB)
 666 0094 FF2E      		mov r15,r31
 667 0096 CC24      		clr r12
 668 0098 DD24      		clr r13
 669 009a AA24      		clr r10
 670 009c BB24      		clr r11
 671 009e 0E94 0000 		call xTaskGenericCreate
 131:main.c        **** //xTaskCreate(vTaskVTYsocket, NULL /*"VTY"    */, STACK_SIZE_VTY,       (void *)(CLIStateSerialUdp)
 132:main.c        **** //xTaskCreate(sensorsTask,    NULL /*"Sensors"*/, STACK_SIZE_SENSORS,   NULL,                      
 133:main.c        ****   xTaskCreate(vTaskUSB,NULL,100,NULL,0,&xHandleUSB);
 673               	.LM17:
 674 00a2 80E0      		ldi r24,lo8(gs(vTaskUSB))
 675 00a4 90E0      		ldi r25,hi8(gs(vTaskUSB))
 676 00a6 60E0      		ldi r22,lo8(0)
 677 00a8 70E0      		ldi r23,hi8(0)
 678 00aa 44E6      		ldi r20,lo8(100)
 679 00ac 50E0      		ldi r21,hi8(100)
 680 00ae 20E0      		ldi r18,lo8(0)
 681 00b0 30E0      		ldi r19,hi8(0)
 682 00b2 00E0      		ldi r16,lo8(0)
 683 00b4 E0E0      		ldi r30,lo8(xHandleUSB)
 684 00b6 EE2E      		mov r14,r30
 685 00b8 E0E0      		ldi r30,hi8(xHandleUSB)
 686 00ba FE2E      		mov r15,r30
 687 00bc 0E94 0000 		call xTaskGenericCreate
 134:main.c        ****   vTaskStartScheduler();
 689               	.LM18:
 690 00c0 0E94 0000 		call vTaskStartScheduler
 135:main.c        ****   return 0;
 136:main.c        **** }
 692               	.LM19:
 693 00c4 80E0      		ldi r24,lo8(0)
 694 00c6 90E0      		ldi r25,hi8(0)
 695               	/* epilogue start */
 696 00c8 0F91      		pop r16
 697 00ca FF90      		pop r15
 698 00cc EF90      		pop r14
 699 00ce DF90      		pop r13
 700 00d0 CF90      		pop r12
 701 00d2 BF90      		pop r11
 702 00d4 AF90      		pop r10
 703 00d6 0895      		ret
 705               	.Lscope1:
 707               		.stabd	78,0,0
 709               	.global	vApplicationIdleHook
 711               	vApplicationIdleHook:
 712               		.stabd	46,0,0
 137:main.c        **** /*-----------------------------------------------------------*/
 138:main.c        **** 
 139:main.c        **** void vApplicationIdleHook( void )
 140:main.c        **** {
 714               	.LM20:
 715               	.LFBB2:
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 720               	.L5:
 141:main.c        ****   for( ;; )
 142:main.c        ****   {
 143:main.c        ****     vCoRoutineSchedule();
 722               	.LM21:
 723 00d8 0E94 0000 		call vCoRoutineSchedule
 724 00dc 00C0      		rjmp .L5
 726               	.Lscope2:
 728               		.stabd	78,0,0
 730               	.global	vApplicationTickHook
 732               	vApplicationTickHook:
 733               		.stabd	46,0,0
 144:main.c        ****   }
 145:main.c        **** }
 146:main.c        **** 
 147:main.c        **** void vApplicationTickHook( void )
 148:main.c        **** {
 735               	.LM22:
 736               	.LFBB3:
 737               	/* prologue: function */
 738               	/* frame size = 0 */
 739               	/* stack size = 0 */
 740               	.L__stack_usage = 0
 149:main.c        ****   static uint16_t tickCntr = configTICK_RATE_HZ;
 150:main.c        ****   if (--tickCntr == 0)
 742               	.LM23:
 743 00de 8091 0000 		lds r24,tickCntr.4948
 744 00e2 9091 0000 		lds r25,tickCntr.4948+1
 745 00e6 0197      		sbiw r24,1
 746 00e8 8093 0000 		sts tickCntr.4948,r24
 747 00ec 9093 0000 		sts tickCntr.4948+1,r25
 748 00f0 0097      		sbiw r24,0
 749 00f2 01F4      		brne .L6
 151:main.c        ****   {
 152:main.c        ****     tickCntr = configTICK_RATE_HZ;
 751               	.LM24:
 752 00f4 88EE      		ldi r24,lo8(1000)
 753 00f6 93E0      		ldi r25,hi8(1000)
 754 00f8 8093 0000 		sts tickCntr.4948,r24
 755 00fc 9093 0000 		sts tickCntr.4948+1,r25
 153:main.c        ****     arpTimer();    
 757               	.LM25:
 758 0100 0E94 0000 		call arpTimer
 759               	.L6:
 760 0104 0895      		ret
 765               	.Lscope3:
 767               		.stabd	78,0,0
 768               	.global	timer100Hz
 769               	.global	timer100Hz
 770               		.section .bss
 773               	timer100Hz:
 774 0000 00        		.skip 1,0
 775               		.comm klastry,128,1
 776               		.comm wwwport,1,1
 777               		.comm rollers,2,1
 778               		.comm xVtyRec,2,1
 779               		.comm xVtyTx,2,1
 780               		.comm xSemaphoreSpiSS,2,1
 781               		.comm portA,1,1
 782               		.comm portB,1,1
 783               		.comm lockSensors,2,1
 784               		.comm xRs485Rec,2,1
 785               		.comm xRs485Tx,2,1
 786               		.comm xSemaphoreRs485,2,1
 787               		.comm nicState,14,1
 788               		.comm plen,2,1
 789               		.comm IpMyConfig,15,1
 790               		.comm arpDebug,2,1
 791               		.comm arpDebugLevel,1,1
 792               		.comm icmpDebug,2,1
 793               		.comm icmpDebugLevel,1,1
 794               		.comm udpSocket,2,1
 795               		.comm udpDbgStream,2,1
 796               		.comm udpDbgLevel,1,1
 797               		.comm tcpDebugStream,2,1
 798               		.comm tcpDebugLevel,1,1
 799               		.comm sockets,2,1
 800               		.comm temperature,1,1
 801               		.comm voltage,1,1
 802               		.comm czasRtc,7,1
 803               		.comm xHandleVTY_USB,2,1
 804               		.comm xHandleVTY_UDP,2,1
 805               		.comm xHandleEnc,2,1
 806               		.comm xHandleSensors,2,1
 807               		.comm xHandleUSB,2,1
 808               		.comm CLIStateSerialUsb,2,1
 809               		.comm CLIStateSerialUdp,2,1
 810               		.comm usbStream,14,1
 811               		.comm udpStream,14,1
 812               		.comm udpBuffers,4,1
 813               		.data
 816               	tickCntr.4948:
 817 0000 E803      		.word	1000
 857               		.text
 859               	.Letext0:
 860               	.global __do_copy_data
 861               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cckFaRJc.s:2      *ABS*:0000003f __SREG__
     /tmp/cckFaRJc.s:3      *ABS*:0000003e __SP_H__
     /tmp/cckFaRJc.s:4      *ABS*:0000003d __SP_L__
     /tmp/cckFaRJc.s:5      *ABS*:00000034 __CCP__
     /tmp/cckFaRJc.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cckFaRJc.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cckFaRJc.s:563    .text:00000000 main
                            *COM*:00000002 CLIStateSerialUsb
                            *COM*:00000002 CLIStateSerialUdp
                            *COM*:00000002 xHandleVTY_USB
                            *COM*:00000002 xHandleUSB
     /tmp/cckFaRJc.s:711    .text:000000d8 vApplicationIdleHook
     /tmp/cckFaRJc.s:732    .text:000000de vApplicationTickHook
     /tmp/cckFaRJc.s:816    .data:00000000 tickCntr.4948
     /tmp/cckFaRJc.s:773    .bss:00000000 timer100Hz
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xVtyRec
                            *COM*:00000002 xVtyTx
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xRs485Rec
                            *COM*:00000002 xRs485Tx
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000e nicState
                            *COM*:00000002 plen
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000001 temperature
                            *COM*:00000001 voltage
                            *COM*:00000007 czasRtc
                            *COM*:00000002 xHandleVTY_UDP
                            *COM*:00000002 xHandleEnc
                            *COM*:00000002 xHandleSensors
                            *COM*:0000000e usbStream
                            *COM*:0000000e udpStream
                            *COM*:00000004 udpBuffers

UNDEFINED SYMBOLS
xmalloc
vTaskVTYusb
xTaskGenericCreate
vTaskUSB
vTaskStartScheduler
vCoRoutineSchedule
arpTimer
__do_copy_data
__do_clear_bss
