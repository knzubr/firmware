   1               		.file	"lcd.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 398               	.global	odwroc
 400               	odwroc:
 401               		.stabd	46,0,0
   1:lcd.c         **** #include<lcd.h>
   2:lcd.c         **** // PB5 D4, PB2 D7
   3:lcd.c         **** unsigned char odwroc(unsigned char dana)
   4:lcd.c         **** {
 403               	.LM0:
 404               	.LFBB1:
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 0 */
 408               	.L__stack_usage = 0
   5:lcd.c         **** 	unsigned char pomoc=0xFF;
   6:lcd.c         **** 	if(dana&0x01) pomoc|=0x80;
 410               	.LM1:
 411 0000 982F      		mov r25,r24
 412 0002 80FF      		sbrs r24,0
 413 0004 00C0      		rjmp .L17
 414 0006 2FEF      		ldi r18,lo8(-1)
 415 0008 00C0      		rjmp .L2
 416               	.L17:
   7:lcd.c         **** 	else pomoc&=~0x80;
 418               	.LM2:
 419 000a 2FE7      		ldi r18,lo8(127)
 420               	.L2:
   8:lcd.c         **** 	if(dana&0x02) pomoc|=0x40;
 422               	.LM3:
 423 000c 91FF      		sbrs r25,1
 424 000e 00C0      		rjmp .L3
 426               	.LM4:
 427 0010 2064      		ori r18,lo8(64)
 428 0012 00C0      		rjmp .L4
 429               	.L3:
   9:lcd.c         **** 	else pomoc|=~0x40;
 431               	.LM5:
 432 0014 2F6B      		ori r18,lo8(-65)
 433               	.L4:
  10:lcd.c         **** 	if(dana&0x04) pomoc|=0x20;
 435               	.LM6:
 436 0016 92FF      		sbrs r25,2
 437 0018 00C0      		rjmp .L5
 439               	.LM7:
 440 001a 2062      		ori r18,lo8(32)
 441 001c 00C0      		rjmp .L6
 442               	.L5:
  11:lcd.c         **** 	else pomoc&=~0x20;
 444               	.LM8:
 445 001e 2F7D      		andi r18,lo8(-33)
 446               	.L6:
  12:lcd.c         **** 	if(dana&0x08) pomoc|=0x10;
 448               	.LM9:
 449 0020 93FF      		sbrs r25,3
 450 0022 00C0      		rjmp .L7
 452               	.LM10:
 453 0024 2061      		ori r18,lo8(16)
 454 0026 00C0      		rjmp .L8
 455               	.L7:
  13:lcd.c         **** 	else pomoc&=~0x10;
 457               	.LM11:
 458 0028 2F7E      		andi r18,lo8(-17)
 459               	.L8:
  14:lcd.c         **** 	if(dana&0x10) pomoc|=0x08;
 461               	.LM12:
 462 002a 94FF      		sbrs r25,4
 463 002c 00C0      		rjmp .L9
 465               	.LM13:
 466 002e 2860      		ori r18,lo8(8)
 467 0030 00C0      		rjmp .L10
 468               	.L9:
  15:lcd.c         **** 	else pomoc&=~0x08;
 470               	.LM14:
 471 0032 277F      		andi r18,lo8(-9)
 472               	.L10:
  16:lcd.c         **** 	if(dana&0x20) pomoc|=0x04;
 474               	.LM15:
 475 0034 95FF      		sbrs r25,5
 476 0036 00C0      		rjmp .L11
 478               	.LM16:
 479 0038 2460      		ori r18,lo8(4)
 480 003a 00C0      		rjmp .L12
 481               	.L11:
  17:lcd.c         **** 	else pomoc&=~0x04;
 483               	.LM17:
 484 003c 2B7F      		andi r18,lo8(-5)
 485               	.L12:
  18:lcd.c         **** 	if(dana&0x40) pomoc|=0x02;
 487               	.LM18:
 488 003e 96FF      		sbrs r25,6
 489 0040 00C0      		rjmp .L13
 491               	.LM19:
 492 0042 922F      		mov r25,r18
 493 0044 9260      		ori r25,lo8(2)
 494 0046 00C0      		rjmp .L14
 495               	.L13:
  19:lcd.c         **** 	else pomoc&=~0x02;
 497               	.LM20:
 498 0048 922F      		mov r25,r18
 499 004a 9D7F      		andi r25,lo8(-3)
 500               	.L14:
  20:lcd.c         **** 	if(dana&0x80) pomoc|=0x01;
 502               	.LM21:
 503 004c 87FF      		sbrs r24,7
 504 004e 00C0      		rjmp .L15
 506               	.LM22:
 507 0050 892F      		mov r24,r25
 508 0052 8160      		ori r24,lo8(1)
 509 0054 0895      		ret
 510               	.L15:
  21:lcd.c         **** 	else pomoc&=~0x01;
 512               	.LM23:
 513 0056 892F      		mov r24,r25
 514 0058 8E7F      		andi r24,lo8(-2)
  22:lcd.c         **** 
  23:lcd.c         **** 	return pomoc;	
  24:lcd.c         **** }
 516               	.LM24:
 517 005a 0895      		ret
 519               	.Lscope1:
 521               		.stabd	78,0,0
 524               	.global	polbajt
 526               	polbajt:
 527               		.stabd	46,0,0
  25:lcd.c         **** void polbajt(unsigned char data)
  26:lcd.c         **** {
 529               	.LM25:
 530               	.LFBB2:
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 0 */
 534               	.L__stack_usage = 0
  27:lcd.c         ****   if(data&0x01)
 536               	.LM26:
 537 005c 80FF      		sbrs r24,0
 538 005e 00C0      		rjmp .L19
  28:lcd.c         ****   {
  29:lcd.c         **** 	  PORTB.OUT|=LCD_D4;
 540               	.LM27:
 541 0060 2091 2406 		lds r18,1572
 542 0064 2062      		ori r18,lo8(32)
 543 0066 00C0      		rjmp .L27
 544               	.L19:
  30:lcd.c         ****   }
  31:lcd.c         ****   else
  32:lcd.c         ****   {
  33:lcd.c         **** 	  PORTB.OUT&=~LCD_D4;
 546               	.LM28:
 547 0068 2091 2406 		lds r18,1572
 548 006c 2F7D      		andi r18,lo8(-33)
 549               	.L27:
 550 006e E0E2      		ldi r30,lo8(1568)
 551 0070 F6E0      		ldi r31,hi8(1568)
 552 0072 2483      		std Z+4,r18
  34:lcd.c         ****   }
  35:lcd.c         **** 
  36:lcd.c         ****   if(data&0x02)
 554               	.LM29:
 555 0074 81FF      		sbrs r24,1
 556 0076 00C0      		rjmp .L21
  37:lcd.c         ****   {
  38:lcd.c         **** 	  PORTB.OUT|=LCD_D5;
 558               	.LM30:
 559 0078 2091 2406 		lds r18,1572
 560 007c 2061      		ori r18,lo8(16)
 561 007e 00C0      		rjmp .L28
 562               	.L21:
  39:lcd.c         ****   }
  40:lcd.c         ****   else
  41:lcd.c         ****   {
  42:lcd.c         **** 	  PORTB.OUT&=~LCD_D5;
 564               	.LM31:
 565 0080 2091 2406 		lds r18,1572
 566 0084 2F7E      		andi r18,lo8(-17)
 567               	.L28:
 568 0086 E0E2      		ldi r30,lo8(1568)
 569 0088 F6E0      		ldi r31,hi8(1568)
 570 008a 2483      		std Z+4,r18
  43:lcd.c         ****   }
  44:lcd.c         **** 
  45:lcd.c         ****   if(data&0x04)
 572               	.LM32:
 573 008c 82FF      		sbrs r24,2
 574 008e 00C0      		rjmp .L23
  46:lcd.c         ****   {
  47:lcd.c         **** 	  PORTB.OUT|=LCD_D6;
 576               	.LM33:
 577 0090 2091 2406 		lds r18,1572
 578 0094 2860      		ori r18,lo8(8)
 579 0096 00C0      		rjmp .L29
 580               	.L23:
  48:lcd.c         ****   }
  49:lcd.c         ****   else
  50:lcd.c         ****   {
  51:lcd.c         **** 	  PORTB.OUT&=~LCD_D6;
 582               	.LM34:
 583 0098 2091 2406 		lds r18,1572
 584 009c 277F      		andi r18,lo8(-9)
 585               	.L29:
 586 009e E0E2      		ldi r30,lo8(1568)
 587 00a0 F6E0      		ldi r31,hi8(1568)
 588 00a2 2483      		std Z+4,r18
  52:lcd.c         ****   }
  53:lcd.c         **** 
  54:lcd.c         ****   if(data&0x08)
 590               	.LM35:
 591 00a4 83FF      		sbrs r24,3
 592 00a6 00C0      		rjmp .L25
  55:lcd.c         ****   {
  56:lcd.c         **** 	  PORTB.OUT|=LCD_D7;
 594               	.LM36:
 595 00a8 8091 2406 		lds r24,1572
 596 00ac 8460      		ori r24,lo8(4)
 597 00ae 00C0      		rjmp .L30
 598               	.L25:
  57:lcd.c         ****   }
  58:lcd.c         ****   else
  59:lcd.c         ****   {
  60:lcd.c         **** 	  PORTB.OUT&=~LCD_D7;
 600               	.LM37:
 601 00b0 8091 2406 		lds r24,1572
 602 00b4 8B7F      		andi r24,lo8(-5)
 603               	.L30:
 604 00b6 E0E2      		ldi r30,lo8(1568)
 605 00b8 F6E0      		ldi r31,hi8(1568)
 606 00ba 8483      		std Z+4,r24
 607 00bc 0895      		ret
 609               	.Lscope2:
 611               		.stabd	78,0,0
 614               	.global	lcdWrite
 616               	lcdWrite:
 617               		.stabd	46,0,0
  61:lcd.c         ****   }
  62:lcd.c         **** }
  63:lcd.c         **** void lcdwritecommand(unsigned char command)
  64:lcd.c         **** {
  65:lcd.c         **** LCD_RS_clear;
  66:lcd.c         **** lcdWrite(command);
  67:lcd.c         **** }
  68:lcd.c         **** void lcdWrite(unsigned char data)
  69:lcd.c         **** {
 619               	.LM38:
 620               	.LFBB3:
 621 00be 0F93      		push r16
 622 00c0 1F93      		push r17
 623 00c2 CF93      		push r28
 624 00c4 DF93      		push r29
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 4 */
 628               	.L__stack_usage = 4
 629 00c6 182F      		mov r17,r24
  70:lcd.c         **** uint8_t pomoc=odwroc(data>>4);
 631               	.LM39:
 632 00c8 8295      		swap r24
 633 00ca 8F70      		andi r24,lo8(15)
 634 00cc 0E94 0000 		call odwroc
 635 00d0 082F      		mov r16,r24
  71:lcd.c         **** data=odwroc(data);
 637               	.LM40:
 638 00d2 812F      		mov r24,r17
 639 00d4 0E94 0000 		call odwroc
 640 00d8 182F      		mov r17,r24
  72:lcd.c         **** LCD_E_set;
 642               	.LM41:
 643 00da C0E0      		ldi r28,lo8(1536)
 644 00dc D6E0      		ldi r29,hi8(1536)
 645 00de 8C81      		ldd r24,Y+4
 646 00e0 8360      		ori r24,lo8(3)
 647 00e2 8C83      		std Y+4,r24
  73:lcd.c         **** polbajt(pomoc);
 649               	.LM42:
 650 00e4 802F      		mov r24,r16
 651 00e6 0E94 0000 		call polbajt
  74:lcd.c         **** LCD_E_clear;
 653               	.LM43:
 654 00ea 8C81      		ldd r24,Y+4
 655 00ec 8D7F      		andi r24,lo8(-3)
 656 00ee 8C83      		std Y+4,r24
  75:lcd.c         **** LCD_E_set;
 658               	.LM44:
 659 00f0 8C81      		ldd r24,Y+4
 660 00f2 8360      		ori r24,lo8(3)
 661 00f4 8C83      		std Y+4,r24
  76:lcd.c         **** polbajt(data);
 663               	.LM45:
 664 00f6 812F      		mov r24,r17
 665 00f8 0E94 0000 		call polbajt
  77:lcd.c         **** LCD_E_clear;
 667               	.LM46:
 668 00fc 8C81      		ldd r24,Y+4
 669 00fe 8D7F      		andi r24,lo8(-3)
 670 0100 8C83      		std Y+4,r24
 671               	.LBB15:
 672               	.LBB16:
 674               	.Ltext1:
   1:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 676               	.LM47:
 677 0102 87EC      		 ldi r24,lo8(199)
 678 0104 90E0      	    ldi r25,hi8(199)
 679 0106 0197      	    1:sbiw r24,1
 680 0108 01F4      	    brne 1b
 681 010a 00C0      		rjmp .
 682 010c 0000      		nop
 683               	/* epilogue start */
 684               	.LBE16:
 685               	.LBE15:
 687               	.Ltext2:
  78:lcd.c         **** _delay_us(50);
  79:lcd.c         **** }
 689               	.LM48:
 690 010e DF91      		pop r29
 691 0110 CF91      		pop r28
 692 0112 1F91      		pop r17
 693 0114 0F91      		pop r16
 694 0116 0895      		ret
 699               	.Lscope3:
 701               		.stabd	78,0,0
 704               	.global	lcdwritecommand
 706               	lcdwritecommand:
 707               		.stabd	46,0,0
  64:lcd.c         **** {
 709               	.LM49:
 710               	.LFBB4:
 711               	/* prologue: function */
 712               	/* frame size = 0 */
 713               	/* stack size = 0 */
 714               	.L__stack_usage = 0
  65:lcd.c         **** LCD_RS_clear;
 716               	.LM50:
 717 0118 E0E0      		ldi r30,lo8(1536)
 718 011a F6E0      		ldi r31,hi8(1536)
 719 011c 9481      		ldd r25,Z+4
 720 011e 9B7F      		andi r25,lo8(-5)
 721 0120 9483      		std Z+4,r25
  66:lcd.c         **** lcdWrite(command);
 723               	.LM51:
 724 0122 0E94 0000 		call lcdWrite
 725               	/* epilogue start */
  67:lcd.c         **** }
 727               	.LM52:
 728 0126 0895      		ret
 730               	.Lscope4:
 732               		.stabd	78,0,0
 735               	.global	lcdsend
 737               	lcdsend:
 738               		.stabd	46,0,0
  80:lcd.c         **** void lcdsend(unsigned char data)
  81:lcd.c         **** {
 740               	.LM53:
 741               	.LFBB5:
 742               	/* prologue: function */
 743               	/* frame size = 0 */
 744               	/* stack size = 0 */
 745               	.L__stack_usage = 0
  82:lcd.c         **** LCD_RS_set;
 747               	.LM54:
 748 0128 E0E0      		ldi r30,lo8(1536)
 749 012a F6E0      		ldi r31,hi8(1536)
 750 012c 9481      		ldd r25,Z+4
 751 012e 9460      		ori r25,lo8(4)
 752 0130 9483      		std Z+4,r25
  83:lcd.c         **** lcdWrite(data);
 754               	.LM55:
 755 0132 0E94 0000 		call lcdWrite
 756               	/* epilogue start */
  84:lcd.c         **** }
 758               	.LM56:
 759 0136 0895      		ret
 761               	.Lscope5:
 763               		.stabd	78,0,0
 765               	.global	lcdclear
 767               	lcdclear:
 768               		.stabd	46,0,0
  85:lcd.c         **** void lcdclear(void)
  86:lcd.c         **** {
 770               	.LM57:
 771               	.LFBB6:
 772               	/* prologue: function */
 773               	/* frame size = 0 */
 774               	/* stack size = 0 */
 775               	.L__stack_usage = 0
  87:lcd.c         **** lcdwritecommand(0x01);
 777               	.LM58:
 778 0138 81E0      		ldi r24,lo8(1)
 779 013a 0E94 0000 		call lcdwritecommand
 780               	.LBB17:
 781               	.LBB18:
 783               	.Ltext3:
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 785               	.LM59:
 786 013e 8FE3      		 ldi r24,lo8(7999)
 787 0140 9FE1      	    ldi r25,hi8(7999)
 788 0142 0197      	    1:sbiw r24,1
 789 0144 01F4      	    brne 1b
 790 0146 00C0      		rjmp .
 791 0148 0000      		nop
 792               	/* epilogue start */
 793               	.LBE18:
 794               	.LBE17:
 796               	.Ltext4:
  88:lcd.c         **** _delay_ms(2);
  89:lcd.c         **** }
 798               	.LM60:
 799 014a 0895      		ret
 801               	.Lscope6:
 803               		.stabd	78,0,0
 805               	.global	lcdinit
 807               	lcdinit:
 808               		.stabd	46,0,0
  90:lcd.c         **** void lcdinit(void)
  91:lcd.c         **** {// PB5 D4, PB2 D7
 810               	.LM61:
 811               	.LFBB7:
 812 014c CF93      		push r28
 813 014e DF93      		push r29
 814               	/* prologue: function */
 815               	/* frame size = 0 */
 816               	/* stack size = 2 */
 817               	.L__stack_usage = 2
  92:lcd.c         **** 
  93:lcd.c         **** 	PORTB.DIR|=(PIN5_bm|PIN4_bm|PIN3_bm|PIN2_bm);
 819               	.LM62:
 820 0150 8091 2006 		lds r24,1568
 821 0154 8C63      		ori r24,lo8(60)
 822 0156 8093 2006 		sts 1568,r24
  94:lcd.c         **** 	PORTA.DIR|=(PIN1_bm|PIN2_bm);
 824               	.LM63:
 825 015a E0E0      		ldi r30,lo8(1536)
 826 015c F6E0      		ldi r31,hi8(1536)
 827 015e 8091 0006 		lds r24,1536
 828 0162 8660      		ori r24,lo8(6)
 829 0164 8093 0006 		sts 1536,r24
  95:lcd.c         **** 	LCD_E_set;
 831               	.LM64:
 832 0168 8091 0406 		lds r24,1540
 833 016c 8360      		ori r24,lo8(3)
 834 016e 8483      		std Z+4,r24
  96:lcd.c         **** 	LCD_RS_set;
 836               	.LM65:
 837 0170 8091 0406 		lds r24,1540
 838 0174 8460      		ori r24,lo8(4)
 839 0176 8483      		std Z+4,r24
 840               	.LBB19:
 841               	.LBB20:
 843               	.Ltext5:
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 845               	.LM66:
 846 0178 8FE5      		 ldi r24,lo8(-5537)
 847 017a 9AEE      	    ldi r25,hi8(-5537)
 848 017c 0197      	    1:sbiw r24,1
 849 017e 01F4      	    brne 1b
 850 0180 00C0      		rjmp .
 851 0182 0000      		nop
 852               	.LBE20:
 853               	.LBE19:
 855               	.Ltext6:
  97:lcd.c         **** 	_delay_ms(15);
  98:lcd.c         **** 	LCD_RS_clear;
 857               	.LM67:
 858 0184 8091 0406 		lds r24,1540
 859 0188 8B7F      		andi r24,lo8(-5)
 860 018a 8483      		std Z+4,r24
  99:lcd.c         **** 	LCD_E_clear;
 862               	.LM68:
 863 018c 8091 0406 		lds r24,1540
 864 0190 8D7F      		andi r24,lo8(-3)
 865 0192 8483      		std Z+4,r24
 866 0194 83E0      		ldi r24,lo8(3)
 867 0196 90E0      		ldi r25,hi8(3)
 868               	.LBB21:
 100:lcd.c         **** 	for(int i = 0; i < 3; i++) 
 101:lcd.c         **** 	{
 102:lcd.c         **** 	   LCD_E_set;
 103:lcd.c         **** 	   PORTB.OUT&=0xF3;
 870               	.LM69:
 871 0198 40E2      		ldi r20,lo8(1568)
 872 019a 56E0      		ldi r21,hi8(1568)
 873               	.L36:
 102:lcd.c         **** 	   LCD_E_set;
 875               	.LM70:
 876 019c C0E0      		ldi r28,lo8(1536)
 877 019e D6E0      		ldi r29,hi8(1536)
 878 01a0 2091 0406 		lds r18,1540
 879 01a4 2360      		ori r18,lo8(3)
 880 01a6 2483      		std Z+4,r18
 882               	.LM71:
 883 01a8 2091 2406 		lds r18,1572
 884 01ac 237F      		andi r18,lo8(-13)
 885 01ae DA01      		movw r26,r20
 886 01b0 1496      		adiw r26,4
 887 01b2 2C93      		st X,r18
 888 01b4 1497      		sbiw r26,4
 104:lcd.c         **** 	   LCD_E_clear;	
 890               	.LM72:
 891 01b6 2091 0406 		lds r18,1540
 892 01ba 2D7F      		andi r18,lo8(-3)
 893 01bc 2483      		std Z+4,r18
 894               	.LBB22:
 895               	.LBB23:
 897               	.Ltext7:
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 899               	.LM73:
 900 01be AFE1      		 ldi r26,lo8(19999)
 901 01c0 BEE4      	    ldi r27,hi8(19999)
 902 01c2 1197      	    1:sbiw r26,1
 903 01c4 01F4      	    brne 1b
 904 01c6 00C0      		rjmp .
 905 01c8 0000      		nop
 906 01ca 0197      		sbiw r24,1
 907               	.LBE23:
 908               	.LBE22:
 910               	.Ltext8:
 100:lcd.c         **** 	for(int i = 0; i < 3; i++) 
 912               	.LM74:
 913 01cc 01F4      		brne .L36
 914               	.LBE21:
 105:lcd.c         **** 	   _delay_ms(5); // czekaj 5ms
 106:lcd.c         **** 	}
 107:lcd.c         **** 	LCD_E_set;
 916               	.LM75:
 917 01ce 8091 0406 		lds r24,1540
 918 01d2 8360      		ori r24,lo8(3)
 919 01d4 8C83      		std Y+4,r24
 108:lcd.c         **** 	polbajt(0x02); //tryb 4 bitowy
 921               	.LM76:
 922 01d6 82E0      		ldi r24,lo8(2)
 923 01d8 0E94 0000 		call polbajt
 109:lcd.c         **** 	LCD_E_clear;
 925               	.LM77:
 926 01dc 8091 0406 		lds r24,1540
 927 01e0 8D7F      		andi r24,lo8(-3)
 928 01e2 8C83      		std Y+4,r24
 929               	.LBB24:
 930               	.LBB25:
 932               	.Ltext9:
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 934               	.LM78:
 935 01e4 8FE9      		 ldi r24,lo8(3999)
 936 01e6 9FE0      	    ldi r25,hi8(3999)
 937 01e8 0197      	    1:sbiw r24,1
 938 01ea 01F4      	    brne 1b
 939 01ec 00C0      		rjmp .
 940 01ee 0000      		nop
 941               	.LBE25:
 942               	.LBE24:
 944               	.Ltext10:
 110:lcd.c         **** 	_delay_ms(1); // czekaj 1ms 
 111:lcd.c         **** 	lcdwritecommand(0x20|0|8|0);
 946               	.LM79:
 947 01f0 88E2      		ldi r24,lo8(40)
 948 01f2 0E94 0000 		call lcdwritecommand
 112:lcd.c         **** 	lcdwritecommand(0x80|0);
 950               	.LM80:
 951 01f6 80E8      		ldi r24,lo8(-128)
 952 01f8 0E94 0000 		call lcdwritecommand
 113:lcd.c         **** 	lcdwritecommand(0x01);
 954               	.LM81:
 955 01fc 81E0      		ldi r24,lo8(1)
 956 01fe 0E94 0000 		call lcdwritecommand
 957               	.LBB26:
 958               	.LBB27:
 960               	.Ltext11:
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 962               	.LM82:
 963 0202 AFE3      		 ldi r26,lo8(7999)
 964 0204 BFE1      	    ldi r27,hi8(7999)
 965 0206 1197      	    1:sbiw r26,1
 966 0208 01F4      	    brne 1b
 967 020a 00C0      		rjmp .
 968 020c 0000      		nop
 969               	.LBE27:
 970               	.LBE26:
 972               	.Ltext12:
 114:lcd.c         **** 	_delay_ms(2); // czekaj 2ms 
 115:lcd.c         **** 	lcdwritecommand(0x04|0|2);
 974               	.LM83:
 975 020e 86E0      		ldi r24,lo8(6)
 976 0210 0E94 0000 		call lcdwritecommand
 116:lcd.c         **** 	lcdwritecommand(0x08|4|2|1);	
 978               	.LM84:
 979 0214 8FE0      		ldi r24,lo8(15)
 980 0216 0E94 0000 		call lcdwritecommand
 981               	/* epilogue start */
 117:lcd.c         **** }
 983               	.LM85:
 984 021a DF91      		pop r29
 985 021c CF91      		pop r28
 986 021e 0895      		ret
 988               	.Lscope7:
 990               		.stabd	78,0,0
 992               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
     /tmp/ccLRAqNG.s:2      *ABS*:0000003f __SREG__
     /tmp/ccLRAqNG.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccLRAqNG.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccLRAqNG.s:5      *ABS*:00000034 __CCP__
     /tmp/ccLRAqNG.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccLRAqNG.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccLRAqNG.s:400    .text:00000000 odwroc
     /tmp/ccLRAqNG.s:526    .text:0000005c polbajt
     /tmp/ccLRAqNG.s:616    .text:000000be lcdWrite
     /tmp/ccLRAqNG.s:706    .text:00000118 lcdwritecommand
     /tmp/ccLRAqNG.s:737    .text:00000128 lcdsend
     /tmp/ccLRAqNG.s:767    .text:00000138 lcdclear
     /tmp/ccLRAqNG.s:807    .text:0000014c lcdinit

NO UNDEFINED SYMBOLS
