   1               		.file	"croutine.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 439               	.global	xCoRoutineCreate
 441               	xCoRoutineCreate:
 442               		.stabd	46,0,0
   1:../../freeRtos/Source/croutine.c **** /*
   2:../../freeRtos/Source/croutine.c ****     FreeRTOS V6.0.4 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:../../freeRtos/Source/croutine.c **** 
   4:../../freeRtos/Source/croutine.c ****     ***************************************************************************
   5:../../freeRtos/Source/croutine.c ****     *                                                                         *
   6:../../freeRtos/Source/croutine.c ****     * If you are:                                                             *
   7:../../freeRtos/Source/croutine.c ****     *                                                                         *
   8:../../freeRtos/Source/croutine.c ****     *    + New to FreeRTOS,                                                   *
   9:../../freeRtos/Source/croutine.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:../../freeRtos/Source/croutine.c ****     *    + Looking for basic training,                                        *
  11:../../freeRtos/Source/croutine.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:../../freeRtos/Source/croutine.c ****     *                                                                         *
  13:../../freeRtos/Source/croutine.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:../../freeRtos/Source/croutine.c ****     *                                                                         *
  15:../../freeRtos/Source/croutine.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:../../freeRtos/Source/croutine.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:../../freeRtos/Source/croutine.c ****     *                                                                         *
  18:../../freeRtos/Source/croutine.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:../../freeRtos/Source/croutine.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:../../freeRtos/Source/croutine.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:../../freeRtos/Source/croutine.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:../../freeRtos/Source/croutine.c ****     *                                                                         *
  23:../../freeRtos/Source/croutine.c ****     ***************************************************************************
  24:../../freeRtos/Source/croutine.c **** 
  25:../../freeRtos/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:../../freeRtos/Source/croutine.c **** 
  27:../../freeRtos/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../../freeRtos/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../../freeRtos/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../../freeRtos/Source/croutine.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:../../freeRtos/Source/croutine.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:../../freeRtos/Source/croutine.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:../../freeRtos/Source/croutine.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:../../freeRtos/Source/croutine.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:../../freeRtos/Source/croutine.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../../freeRtos/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public 
  37:../../freeRtos/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:../../freeRtos/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:../../freeRtos/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../../freeRtos/Source/croutine.c ****     FreeRTOS WEB site.
  41:../../freeRtos/Source/croutine.c **** 
  42:../../freeRtos/Source/croutine.c ****     1 tab == 4 spaces!
  43:../../freeRtos/Source/croutine.c **** 
  44:../../freeRtos/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../../freeRtos/Source/croutine.c ****     contact details.
  46:../../freeRtos/Source/croutine.c **** 
  47:../../freeRtos/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../../freeRtos/Source/croutine.c ****     critical systems.
  49:../../freeRtos/Source/croutine.c **** 
  50:../../freeRtos/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../../freeRtos/Source/croutine.c ****     licensing and training services.
  52:../../freeRtos/Source/croutine.c **** */
  53:../../freeRtos/Source/croutine.c **** 
  54:../../freeRtos/Source/croutine.c **** #include "FreeRTOS.h"
  55:../../freeRtos/Source/croutine.c **** #include "task.h"
  56:../../freeRtos/Source/croutine.c **** #include "croutine.h"
  57:../../freeRtos/Source/croutine.c **** 
  58:../../freeRtos/Source/croutine.c **** /*
  59:../../freeRtos/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:../../freeRtos/Source/croutine.c ****  * than file scope.
  61:../../freeRtos/Source/croutine.c ****  */
  62:../../freeRtos/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:../../freeRtos/Source/croutine.c **** 	#define static
  64:../../freeRtos/Source/croutine.c **** #endif
  65:../../freeRtos/Source/croutine.c **** 
  66:../../freeRtos/Source/croutine.c **** 
  67:../../freeRtos/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:../../freeRtos/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:../../freeRtos/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:../../freeRtos/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:../../freeRtos/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:../../freeRtos/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:../../freeRtos/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:../../freeRtos/Source/croutine.c **** 
  75:../../freeRtos/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:../../freeRtos/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:../../freeRtos/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:../../freeRtos/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:../../freeRtos/Source/croutine.c **** 
  80:../../freeRtos/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:../../freeRtos/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:../../freeRtos/Source/croutine.c **** 
  83:../../freeRtos/Source/croutine.c **** /*
  84:../../freeRtos/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:../../freeRtos/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:../../freeRtos/Source/croutine.c ****  *
  87:../../freeRtos/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:../../freeRtos/Source/croutine.c ****  * used from within an ISR.
  89:../../freeRtos/Source/croutine.c ****  */
  90:../../freeRtos/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:../../freeRtos/Source/croutine.c **** {																													\
  92:../../freeRtos/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:../../freeRtos/Source/croutine.c **** 	{																												\
  94:../../freeRtos/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:../../freeRtos/Source/croutine.c **** 	}																												\
  96:../../freeRtos/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:../../freeRtos/Source/croutine.c **** }	
  98:../../freeRtos/Source/croutine.c **** 
  99:../../freeRtos/Source/croutine.c **** /*
 100:../../freeRtos/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:../../freeRtos/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:../../freeRtos/Source/croutine.c ****  */
 103:../../freeRtos/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:../../freeRtos/Source/croutine.c **** 
 105:../../freeRtos/Source/croutine.c **** /*
 106:../../freeRtos/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:../../freeRtos/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:../../freeRtos/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:../../freeRtos/Source/croutine.c ****  * list by the co-routine scheduler.
 110:../../freeRtos/Source/croutine.c ****  */
 111:../../freeRtos/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:../../freeRtos/Source/croutine.c **** 
 113:../../freeRtos/Source/croutine.c **** /*
 114:../../freeRtos/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:../../freeRtos/Source/croutine.c ****  * see if any require waking.
 116:../../freeRtos/Source/croutine.c ****  *
 117:../../freeRtos/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:../../freeRtos/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:../../freeRtos/Source/croutine.c ****  * we need not look any further down the list.
 120:../../freeRtos/Source/croutine.c ****  */
 121:../../freeRtos/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:../../freeRtos/Source/croutine.c **** 
 123:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:../../freeRtos/Source/croutine.c **** 
 125:../../freeRtos/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:../../freeRtos/Source/croutine.c **** {
 444               	.LM0:
 445               	.LFBB1:
 446 0000 BF92      		push r11
 447 0002 CF92      		push r12
 448 0004 DF92      		push r13
 449 0006 EF92      		push r14
 450 0008 FF92      		push r15
 451 000a 0F93      		push r16
 452 000c 1F93      		push r17
 453 000e CF93      		push r28
 454 0010 DF93      		push r29
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 9 */
 458               	.L__stack_usage = 9
 459 0012 6C01      		movw r12,r24
 460 0014 B42E      		mov r11,r20
 127:../../freeRtos/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:../../freeRtos/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:../../freeRtos/Source/croutine.c **** 
 130:../../freeRtos/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:../../freeRtos/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 462               	.LM1:
 463 0016 8AE1      		ldi r24,lo8(26)
 464 0018 90E0      		ldi r25,hi8(26)
 465 001a 0E94 0000 		call pvPortMalloc
 466 001e E82E      		mov r14,r24
 467 0020 E701      		movw r28,r14
 468 0022 7E01      		movw r14,r28
 469 0024 F92E      		mov r15,r25
 470 0026 E701      		movw r28,r14
 132:../../freeRtos/Source/croutine.c **** 	if( pxCoRoutine )
 472               	.LM2:
 473 0028 2097      		sbiw r28,0
 474 002a 01F4      		brne .+2
 475 002c 00C0      		rjmp .L5
 133:../../freeRtos/Source/croutine.c **** 	{
 134:../../freeRtos/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:../../freeRtos/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:../../freeRtos/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 477               	.LM3:
 478 002e 8091 0000 		lds r24,pxCurrentCoRoutine
 479 0032 9091 0000 		lds r25,pxCurrentCoRoutine+1
 480 0036 0097      		sbiw r24,0
 481 0038 01F4      		brne .L3
 137:../../freeRtos/Source/croutine.c **** 		{
 138:../../freeRtos/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 483               	.LM4:
 484 003a E092 0000 		sts pxCurrentCoRoutine,r14
 485 003e F092 0000 		sts pxCurrentCoRoutine+1,r15
 486               	.LBB8:
 487               	.LBB9:
 139:../../freeRtos/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 140:../../freeRtos/Source/croutine.c **** 		}
 141:../../freeRtos/Source/croutine.c **** 
 142:../../freeRtos/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:../../freeRtos/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 144:../../freeRtos/Source/croutine.c **** 		{
 145:../../freeRtos/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 146:../../freeRtos/Source/croutine.c **** 		}
 147:../../freeRtos/Source/croutine.c **** 
 148:../../freeRtos/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 150:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 151:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 152:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 153:../../freeRtos/Source/croutine.c **** 
 154:../../freeRtos/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:../../freeRtos/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 156:../../freeRtos/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 157:../../freeRtos/Source/croutine.c **** 
 158:../../freeRtos/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:../../freeRtos/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:../../freeRtos/Source/croutine.c **** 		in a list. */
 161:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 162:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 163:../../freeRtos/Source/croutine.c **** 	
 164:../../freeRtos/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 166:../../freeRtos/Source/croutine.c **** 		
 167:../../freeRtos/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:../../freeRtos/Source/croutine.c **** 		list at the correct priority. */
 169:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 170:../../freeRtos/Source/croutine.c **** 
 171:../../freeRtos/Source/croutine.c **** 		xReturn = pdPASS;
 172:../../freeRtos/Source/croutine.c **** 	}
 173:../../freeRtos/Source/croutine.c **** 	else
 174:../../freeRtos/Source/croutine.c **** 	{		
 175:../../freeRtos/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 176:../../freeRtos/Source/croutine.c **** 	}
 177:../../freeRtos/Source/croutine.c **** 	
 178:../../freeRtos/Source/croutine.c **** 	return xReturn;	
 179:../../freeRtos/Source/croutine.c **** }
 180:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:../../freeRtos/Source/croutine.c **** 
 182:../../freeRtos/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:../../freeRtos/Source/croutine.c **** {
 184:../../freeRtos/Source/croutine.c **** portTickType xTimeToWake;
 185:../../freeRtos/Source/croutine.c **** 
 186:../../freeRtos/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:../../freeRtos/Source/croutine.c **** 	not a problem. */
 188:../../freeRtos/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 189:../../freeRtos/Source/croutine.c **** 
 190:../../freeRtos/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:../../freeRtos/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:../../freeRtos/Source/croutine.c **** 	both lists. */
 193:../../freeRtos/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 194:../../freeRtos/Source/croutine.c **** 
 195:../../freeRtos/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:../../freeRtos/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 197:../../freeRtos/Source/croutine.c **** 
 198:../../freeRtos/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 199:../../freeRtos/Source/croutine.c **** 	{
 200:../../freeRtos/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:../../freeRtos/Source/croutine.c **** 		overflow list. */
 202:../../freeRtos/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 203:../../freeRtos/Source/croutine.c **** 	}
 204:../../freeRtos/Source/croutine.c **** 	else
 205:../../freeRtos/Source/croutine.c **** 	{
 206:../../freeRtos/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:../../freeRtos/Source/croutine.c **** 		current block list. */
 208:../../freeRtos/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 209:../../freeRtos/Source/croutine.c **** 	}
 210:../../freeRtos/Source/croutine.c **** 
 211:../../freeRtos/Source/croutine.c **** 	if( pxEventList )
 212:../../freeRtos/Source/croutine.c **** 	{
 213:../../freeRtos/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:../../freeRtos/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:../../freeRtos/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 216:../../freeRtos/Source/croutine.c **** 	}
 217:../../freeRtos/Source/croutine.c **** }
 218:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../../freeRtos/Source/croutine.c **** 
 220:../../freeRtos/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:../../freeRtos/Source/croutine.c **** {
 222:../../freeRtos/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:../../freeRtos/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:../../freeRtos/Source/croutine.c **** 	the	ready lists itself. */
 225:../../freeRtos/Source/croutine.c **** 	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
 226:../../freeRtos/Source/croutine.c **** 	{
 227:../../freeRtos/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:../../freeRtos/Source/croutine.c **** 
 229:../../freeRtos/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:../../freeRtos/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 231:../../freeRtos/Source/croutine.c **** 		{	
 232:../../freeRtos/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 233:../../freeRtos/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 234:../../freeRtos/Source/croutine.c **** 		}
 235:../../freeRtos/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 236:../../freeRtos/Source/croutine.c **** 
 237:../../freeRtos/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 238:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 239:../../freeRtos/Source/croutine.c **** 	}
 240:../../freeRtos/Source/croutine.c **** }
 241:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:../../freeRtos/Source/croutine.c **** 
 243:../../freeRtos/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:../../freeRtos/Source/croutine.c **** {
 245:../../freeRtos/Source/croutine.c **** corCRCB *pxCRCB;
 246:../../freeRtos/Source/croutine.c **** 
 247:../../freeRtos/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 248:../../freeRtos/Source/croutine.c **** 	while( xPassedTicks )
 249:../../freeRtos/Source/croutine.c **** 	{
 250:../../freeRtos/Source/croutine.c **** 		xCoRoutineTickCount++;
 251:../../freeRtos/Source/croutine.c **** 		xPassedTicks--;
 252:../../freeRtos/Source/croutine.c **** 
 253:../../freeRtos/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:../../freeRtos/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 255:../../freeRtos/Source/croutine.c **** 		{
 256:../../freeRtos/Source/croutine.c **** 			xList * pxTemp;
 257:../../freeRtos/Source/croutine.c **** 
 258:../../freeRtos/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:../../freeRtos/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:../../freeRtos/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 261:../../freeRtos/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 262:../../freeRtos/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 263:../../freeRtos/Source/croutine.c **** 		}
 264:../../freeRtos/Source/croutine.c **** 
 265:../../freeRtos/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:../../freeRtos/Source/croutine.c **** 		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
 267:../../freeRtos/Source/croutine.c **** 		{	
 268:../../freeRtos/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 269:../../freeRtos/Source/croutine.c **** 			{			
 270:../../freeRtos/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 271:../../freeRtos/Source/croutine.c **** 				break;																				
 272:../../freeRtos/Source/croutine.c **** 			}																						
 273:../../freeRtos/Source/croutine.c **** 
 274:../../freeRtos/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 275:../../freeRtos/Source/croutine.c **** 			{
 276:../../freeRtos/Source/croutine.c **** 				/* The event could have occurred just before this critical
 277:../../freeRtos/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 278:../../freeRtos/Source/croutine.c **** 				have been moved to the pending ready list and the following
 279:../../freeRtos/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 280:../../freeRtos/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 281:../../freeRtos/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 282:../../freeRtos/Source/croutine.c **** 
 283:../../freeRtos/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 284:../../freeRtos/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 285:../../freeRtos/Source/croutine.c **** 				{															
 286:../../freeRtos/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 287:../../freeRtos/Source/croutine.c **** 				}
 288:../../freeRtos/Source/croutine.c **** 			}
 289:../../freeRtos/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 290:../../freeRtos/Source/croutine.c **** 
 291:../../freeRtos/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 292:../../freeRtos/Source/croutine.c **** 		}																									
 293:../../freeRtos/Source/croutine.c **** 	}
 294:../../freeRtos/Source/croutine.c **** 
 295:../../freeRtos/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 296:../../freeRtos/Source/croutine.c **** }
 297:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 298:../../freeRtos/Source/croutine.c **** 
 299:../../freeRtos/Source/croutine.c **** void vCoRoutineSchedule( void )
 300:../../freeRtos/Source/croutine.c **** {
 301:../../freeRtos/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 302:../../freeRtos/Source/croutine.c **** 	prvCheckPendingReadyList();
 303:../../freeRtos/Source/croutine.c **** 
 304:../../freeRtos/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 305:../../freeRtos/Source/croutine.c **** 	prvCheckDelayedList();
 306:../../freeRtos/Source/croutine.c **** 
 307:../../freeRtos/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 308:../../freeRtos/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 309:../../freeRtos/Source/croutine.c **** 	{
 310:../../freeRtos/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 311:../../freeRtos/Source/croutine.c **** 		{
 312:../../freeRtos/Source/croutine.c **** 			/* No more co-routines to check. */
 313:../../freeRtos/Source/croutine.c **** 			return;
 314:../../freeRtos/Source/croutine.c **** 		}
 315:../../freeRtos/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 316:../../freeRtos/Source/croutine.c **** 	}
 317:../../freeRtos/Source/croutine.c **** 
 318:../../freeRtos/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 319:../../freeRtos/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 320:../../freeRtos/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 321:../../freeRtos/Source/croutine.c **** 
 322:../../freeRtos/Source/croutine.c **** 	/* Call the co-routine. */
 323:../../freeRtos/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 324:../../freeRtos/Source/croutine.c **** 
 325:../../freeRtos/Source/croutine.c **** 	return;
 326:../../freeRtos/Source/croutine.c **** }
 327:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 328:../../freeRtos/Source/croutine.c **** 
 329:../../freeRtos/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 330:../../freeRtos/Source/croutine.c **** {
 331:../../freeRtos/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 332:../../freeRtos/Source/croutine.c **** 
 333:../../freeRtos/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 334:../../freeRtos/Source/croutine.c **** 	{
 335:../../freeRtos/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 489               	.LM5:
 490 0042 80E0      		ldi r24,lo8(pxReadyCoRoutineLists)
 491 0044 90E0      		ldi r25,hi8(pxReadyCoRoutineLists)
 492 0046 0E94 0000 		call vListInitialise
 336:../../freeRtos/Source/croutine.c **** 	}
 337:../../freeRtos/Source/croutine.c **** 
 338:../../freeRtos/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 494               	.LM6:
 495 004a 50E0      		ldi r21,lo8(xDelayedCoRoutineList1)
 496 004c E52E      		mov r14,r21
 497 004e 50E0      		ldi r21,hi8(xDelayedCoRoutineList1)
 498 0050 F52E      		mov r15,r21
 499 0052 C701      		movw r24,r14
 500 0054 0E94 0000 		call vListInitialise
 339:../../freeRtos/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 502               	.LM7:
 503 0058 00E0      		ldi r16,lo8(xDelayedCoRoutineList2)
 504 005a 10E0      		ldi r17,hi8(xDelayedCoRoutineList2)
 505 005c C801      		movw r24,r16
 506 005e 0E94 0000 		call vListInitialise
 340:../../freeRtos/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 508               	.LM8:
 509 0062 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
 510 0064 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 511 0066 0E94 0000 		call vListInitialise
 341:../../freeRtos/Source/croutine.c **** 
 342:../../freeRtos/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 343:../../freeRtos/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 344:../../freeRtos/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 513               	.LM9:
 514 006a E092 0000 		sts pxDelayedCoRoutineList,r14
 515 006e F092 0000 		sts pxDelayedCoRoutineList+1,r15
 345:../../freeRtos/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 517               	.LM10:
 518 0072 0093 0000 		sts pxOverflowDelayedCoRoutineList,r16
 519 0076 1093 0000 		sts pxOverflowDelayedCoRoutineList+1,r17
 520               	.L3:
 521               	.LBE9:
 522               	.LBE8:
 149:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 524               	.LM11:
 525 007a 188E      		std Y+24,__zero_reg__
 526 007c 198E      		std Y+25,__zero_reg__
 150:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 528               	.LM12:
 529 007e 1E8A      		std Y+22,__zero_reg__
 151:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 531               	.LM13:
 532 0080 BF8A      		std Y+23,r11
 152:../../freeRtos/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 534               	.LM14:
 535 0082 FE01      		movw r30,r28
 536 0084 C192      		st Z+,r12
 537 0086 D192      		st Z+,r13
 538 0088 8F01      		movw r16,r30
 155:../../freeRtos/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 540               	.LM15:
 541 008a CF01      		movw r24,r30
 542 008c 0E94 0000 		call vListInitialiseItem
 156:../../freeRtos/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 544               	.LM16:
 545 0090 CE01      		movw r24,r28
 546 0092 0C96      		adiw r24,12
 547 0094 0E94 0000 		call vListInitialiseItem
 161:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 549               	.LM17:
 550 0098 C887      		std Y+8,r28
 551 009a D987      		std Y+9,r29
 162:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 553               	.LM18:
 554 009c CA8B      		std Y+18,r28
 555 009e DB8B      		std Y+19,r29
 165:../../freeRtos/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 557               	.LM19:
 558 00a0 83E0      		ldi r24,lo8(3)
 559 00a2 90E0      		ldi r25,hi8(3)
 560 00a4 8C87      		std Y+12,r24
 561 00a6 9D87      		std Y+13,r25
 169:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 563               	.LM20:
 564 00a8 2E89      		ldd r18,Y+22
 565 00aa 8091 0000 		lds r24,uxTopCoRoutineReadyPriority
 566 00ae 8217      		cp r24,r18
 567 00b0 00F4      		brsh .L4
 169:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 569               	.LM21:
 570 00b2 2093 0000 		sts uxTopCoRoutineReadyPriority,r18
 571               	.L4:
 169:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 573               	.LM22:
 574 00b6 30E0      		ldi r19,lo8(0)
 575 00b8 C901      		movw r24,r18
 576 00ba 43E0      		ldi r20,3
 577 00bc 880F      	1:	lsl r24
 578 00be 991F      		rol r25
 579 00c0 4A95      		dec r20
 580 00c2 01F4      		brne 1b
 581 00c4 820F      		add r24,r18
 582 00c6 931F      		adc r25,r19
 583 00c8 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 584 00ca 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 585 00cc B801      		movw r22,r16
 586 00ce 0E94 0000 		call vListInsertEnd
 171:../../freeRtos/Source/croutine.c **** 		xReturn = pdPASS;
 588               	.LM23:
 589 00d2 81E0      		ldi r24,lo8(1)
 590 00d4 00C0      		rjmp .L2
 591               	.L5:
 175:../../freeRtos/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 593               	.LM24:
 594 00d6 8FEF      		ldi r24,lo8(-1)
 595               	.L2:
 596               	/* epilogue start */
 179:../../freeRtos/Source/croutine.c **** }
 598               	.LM25:
 599 00d8 DF91      		pop r29
 600 00da CF91      		pop r28
 601 00dc 1F91      		pop r17
 602 00de 0F91      		pop r16
 603 00e0 FF90      		pop r15
 604 00e2 EF90      		pop r14
 605 00e4 DF90      		pop r13
 606 00e6 CF90      		pop r12
 607 00e8 BF90      		pop r11
 608 00ea 0895      		ret
 613               	.Lscope1:
 615               		.stabd	78,0,0
 619               	.global	vCoRoutineAddToDelayedList
 621               	vCoRoutineAddToDelayedList:
 622               		.stabd	46,0,0
 183:../../freeRtos/Source/croutine.c **** {
 624               	.LM26:
 625               	.LFBB2:
 626 00ec 0F93      		push r16
 627 00ee 1F93      		push r17
 628 00f0 CF93      		push r28
 629 00f2 DF93      		push r29
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 4 */
 633               	.L__stack_usage = 4
 634 00f4 EB01      		movw r28,r22
 188:../../freeRtos/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 636               	.LM27:
 637 00f6 0091 0000 		lds r16,xCoRoutineTickCount
 638 00fa 1091 0000 		lds r17,xCoRoutineTickCount+1
 639 00fe 080F      		add r16,r24
 640 0100 191F      		adc r17,r25
 193:../../freeRtos/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 642               	.LM28:
 643 0102 8091 0000 		lds r24,pxCurrentCoRoutine
 644 0106 9091 0000 		lds r25,pxCurrentCoRoutine+1
 645 010a 0296      		adiw r24,2
 646 010c 0E94 0000 		call vListRemove
 196:../../freeRtos/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 648               	.LM29:
 649 0110 6091 0000 		lds r22,pxCurrentCoRoutine
 650 0114 7091 0000 		lds r23,pxCurrentCoRoutine+1
 651 0118 FB01      		movw r30,r22
 652 011a 0283      		std Z+2,r16
 653 011c 1383      		std Z+3,r17
 198:../../freeRtos/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 655               	.LM30:
 656 011e 8091 0000 		lds r24,xCoRoutineTickCount
 657 0122 9091 0000 		lds r25,xCoRoutineTickCount+1
 658 0126 6E5F      		subi r22,lo8(-(2))
 659 0128 7F4F      		sbci r23,hi8(-(2))
 660 012a 0817      		cp r16,r24
 661 012c 1907      		cpc r17,r25
 662 012e 00F4      		brsh .L7
 202:../../freeRtos/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 664               	.LM31:
 665 0130 8091 0000 		lds r24,pxOverflowDelayedCoRoutineList
 666 0134 9091 0000 		lds r25,pxOverflowDelayedCoRoutineList+1
 667 0138 00C0      		rjmp .L10
 668               	.L7:
 208:../../freeRtos/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 670               	.LM32:
 671 013a 8091 0000 		lds r24,pxDelayedCoRoutineList
 672 013e 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 673               	.L10:
 674 0142 0E94 0000 		call vListInsert
 211:../../freeRtos/Source/croutine.c **** 	if( pxEventList )
 676               	.LM33:
 677 0146 2097      		sbiw r28,0
 678 0148 01F0      		breq .L6
 215:../../freeRtos/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 680               	.LM34:
 681 014a 6091 0000 		lds r22,pxCurrentCoRoutine
 682 014e 7091 0000 		lds r23,pxCurrentCoRoutine+1
 683 0152 645F      		subi r22,lo8(-(12))
 684 0154 7F4F      		sbci r23,hi8(-(12))
 685 0156 CE01      		movw r24,r28
 686 0158 0E94 0000 		call vListInsert
 687               	.L6:
 688               	/* epilogue start */
 217:../../freeRtos/Source/croutine.c **** }
 690               	.LM35:
 691 015c DF91      		pop r29
 692 015e CF91      		pop r28
 693 0160 1F91      		pop r17
 694 0162 0F91      		pop r16
 695 0164 0895      		ret
 700               	.Lscope2:
 702               		.stabd	78,0,0
 704               	.global	vCoRoutineSchedule
 706               	vCoRoutineSchedule:
 707               		.stabd	46,0,0
 300:../../freeRtos/Source/croutine.c **** {
 709               	.LM36:
 710               	.LFBB3:
 711 0166 0F93      		push r16
 712 0168 1F93      		push r17
 713 016a CF93      		push r28
 714 016c DF93      		push r29
 715               	/* prologue: function */
 716               	/* frame size = 0 */
 717               	/* stack size = 4 */
 718               	.L__stack_usage = 4
 719 016e 00C0      		rjmp .L12
 720               	.L15:
 721               	.LBB17:
 722               	.LBB18:
 723               	.LBB19:
 230:../../freeRtos/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 725               	.LM37:
 726               	/* #APP */
 727               	 ;  230 "../../freeRtos/Source/croutine.c" 1
 728 0170 F894      		cli
 729               	 ;  0 "" 2
 232:../../freeRtos/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 731               	.LM38:
 732               	/* #NOAPP */
 733 0172 8091 0000 		lds r24,xPendingReadyCoRoutineList
 734 0176 8823      		tst r24
 735 0178 01F0      		breq .L28
 736 017a E091 0000 		lds r30,xPendingReadyCoRoutineList+5
 737 017e F091 0000 		lds r31,xPendingReadyCoRoutineList+5+1
 738 0182 C681      		ldd r28,Z+6
 739 0184 D781      		ldd r29,Z+7
 740 0186 00C0      		rjmp .L13
 741               	.L28:
 742 0188 C0E0      		ldi r28,lo8(0)
 743 018a D0E0      		ldi r29,hi8(0)
 744               	.L13:
 233:../../freeRtos/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 746               	.LM39:
 747 018c CE01      		movw r24,r28
 748 018e 0C96      		adiw r24,12
 749 0190 0E94 0000 		call vListRemove
 235:../../freeRtos/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 751               	.LM40:
 752               	/* #APP */
 753               	 ;  235 "../../freeRtos/Source/croutine.c" 1
 754 0194 7894      		sei
 755               	 ;  0 "" 2
 237:../../freeRtos/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 757               	.LM41:
 758               	/* #NOAPP */
 759 0196 8E01      		movw r16,r28
 760 0198 0E5F      		subi r16,lo8(-(2))
 761 019a 1F4F      		sbci r17,hi8(-(2))
 762 019c C801      		movw r24,r16
 763 019e 0E94 0000 		call vListRemove
 238:../../freeRtos/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 765               	.LM42:
 766 01a2 2E89      		ldd r18,Y+22
 767 01a4 8091 0000 		lds r24,uxTopCoRoutineReadyPriority
 768 01a8 8217      		cp r24,r18
 769 01aa 00F4      		brsh .L14
 770 01ac 2093 0000 		sts uxTopCoRoutineReadyPriority,r18
 771               	.L14:
 772 01b0 30E0      		ldi r19,lo8(0)
 773 01b2 C901      		movw r24,r18
 774 01b4 F3E0      		ldi r31,3
 775 01b6 880F      	1:	lsl r24
 776 01b8 991F      		rol r25
 777 01ba FA95      		dec r31
 778 01bc 01F4      		brne 1b
 779 01be 820F      		add r24,r18
 780 01c0 931F      		adc r25,r19
 781 01c2 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 782 01c4 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 783 01c6 B801      		movw r22,r16
 784 01c8 0E94 0000 		call vListInsertEnd
 785               	.L12:
 786               	.LBE19:
 225:../../freeRtos/Source/croutine.c **** 	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
 788               	.LM43:
 789 01cc 8091 0000 		lds r24,xPendingReadyCoRoutineList
 790 01d0 8823      		tst r24
 791 01d2 01F4      		brne .L15
 792               	.LBE18:
 793               	.LBE17:
 794               	.LBB20:
 795               	.LBB21:
 247:../../freeRtos/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 797               	.LM44:
 798 01d4 0E94 0000 		call xTaskGetTickCount
 799 01d8 2091 0000 		lds r18,xLastTickCount
 800 01dc 3091 0000 		lds r19,xLastTickCount+1
 801 01e0 821B      		sub r24,r18
 802 01e2 930B      		sbc r25,r19
 803 01e4 8093 0000 		sts xPassedTicks,r24
 804 01e8 9093 0000 		sts xPassedTicks+1,r25
 805 01ec 00C0      		rjmp .L32
 806               	.L22:
 250:../../freeRtos/Source/croutine.c **** 		xCoRoutineTickCount++;
 808               	.LM45:
 809 01ee 0196      		adiw r24,1
 810 01f0 8093 0000 		sts xCoRoutineTickCount,r24
 811 01f4 9093 0000 		sts xCoRoutineTickCount+1,r25
 251:../../freeRtos/Source/croutine.c **** 		xPassedTicks--;
 813               	.LM46:
 814 01f8 2150      		subi r18,lo8(-(-1))
 815 01fa 3040      		sbci r19,hi8(-(-1))
 816 01fc 2093 0000 		sts xPassedTicks,r18
 817 0200 3093 0000 		sts xPassedTicks+1,r19
 254:../../freeRtos/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 819               	.LM47:
 820 0204 0097      		sbiw r24,0
 821 0206 01F0      		breq .+2
 822 0208 00C0      		rjmp .L30
 823               	.LBB22:
 260:../../freeRtos/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 825               	.LM48:
 826 020a 8091 0000 		lds r24,pxDelayedCoRoutineList
 827 020e 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 261:../../freeRtos/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 829               	.LM49:
 830 0212 2091 0000 		lds r18,pxOverflowDelayedCoRoutineList
 831 0216 3091 0000 		lds r19,pxOverflowDelayedCoRoutineList+1
 832 021a 2093 0000 		sts pxDelayedCoRoutineList,r18
 833 021e 3093 0000 		sts pxDelayedCoRoutineList+1,r19
 262:../../freeRtos/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 835               	.LM50:
 836 0222 8093 0000 		sts pxOverflowDelayedCoRoutineList,r24
 837 0226 9093 0000 		sts pxOverflowDelayedCoRoutineList+1,r25
 838 022a 00C0      		rjmp .L30
 839               	.L21:
 840               	.LBE22:
 268:../../freeRtos/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 842               	.LM51:
 843 022c 2091 0000 		lds r18,xCoRoutineTickCount
 844 0230 3091 0000 		lds r19,xCoRoutineTickCount+1
 845 0234 8A81      		ldd r24,Y+2
 846 0236 9B81      		ldd r25,Y+3
 847 0238 2817      		cp r18,r24
 848 023a 3907      		cpc r19,r25
 849 023c 00F0      		brlo .L32
 274:../../freeRtos/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 851               	.LM52:
 852               	/* #APP */
 853               	 ;  274 "../../freeRtos/Source/croutine.c" 1
 854 023e F894      		cli
 855               	 ;  0 "" 2
 281:../../freeRtos/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 857               	.LM53:
 858               	/* #NOAPP */
 859 0240 8E01      		movw r16,r28
 860 0242 0E5F      		subi r16,lo8(-(2))
 861 0244 1F4F      		sbci r17,hi8(-(2))
 862 0246 C801      		movw r24,r16
 863 0248 0E94 0000 		call vListRemove
 284:../../freeRtos/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 865               	.LM54:
 866 024c 8C89      		ldd r24,Y+20
 867 024e 9D89      		ldd r25,Y+21
 868 0250 0097      		sbiw r24,0
 869 0252 01F0      		breq .L19
 286:../../freeRtos/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 871               	.LM55:
 872 0254 CE01      		movw r24,r28
 873 0256 0C96      		adiw r24,12
 874 0258 0E94 0000 		call vListRemove
 875               	.L19:
 289:../../freeRtos/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 877               	.LM56:
 878               	/* #APP */
 879               	 ;  289 "../../freeRtos/Source/croutine.c" 1
 880 025c 7894      		sei
 881               	 ;  0 "" 2
 291:../../freeRtos/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 883               	.LM57:
 884               	/* #NOAPP */
 885 025e 2E89      		ldd r18,Y+22
 886 0260 8091 0000 		lds r24,uxTopCoRoutineReadyPriority
 887 0264 8217      		cp r24,r18
 888 0266 00F4      		brsh .L20
 889 0268 2093 0000 		sts uxTopCoRoutineReadyPriority,r18
 890               	.L20:
 891 026c 30E0      		ldi r19,lo8(0)
 892 026e C901      		movw r24,r18
 893 0270 E3E0      		ldi r30,3
 894 0272 880F      	1:	lsl r24
 895 0274 991F      		rol r25
 896 0276 EA95      		dec r30
 897 0278 01F4      		brne 1b
 898 027a 820F      		add r24,r18
 899 027c 931F      		adc r25,r19
 900 027e 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 901 0280 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 902 0282 B801      		movw r22,r16
 903 0284 0E94 0000 		call vListInsertEnd
 904               	.L30:
 266:../../freeRtos/Source/croutine.c **** 		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
 906               	.LM58:
 907 0288 E091 0000 		lds r30,pxDelayedCoRoutineList
 908 028c F091 0000 		lds r31,pxDelayedCoRoutineList+1
 909 0290 8081      		ld r24,Z
 910 0292 8823      		tst r24
 911 0294 01F0      		breq .L32
 912 0296 0580      		ldd __tmp_reg__,Z+5
 913 0298 F681      		ldd r31,Z+6
 914 029a E02D      		mov r30,__tmp_reg__
 915 029c C681      		ldd r28,Z+6
 916 029e D781      		ldd r29,Z+7
 917 02a0 2097      		sbiw r28,0
 918 02a2 01F4      		brne .L21
 919               	.L32:
 248:../../freeRtos/Source/croutine.c **** 	while( xPassedTicks )
 921               	.LM59:
 922 02a4 2091 0000 		lds r18,xPassedTicks
 923 02a8 3091 0000 		lds r19,xPassedTicks+1
 924 02ac 8091 0000 		lds r24,xCoRoutineTickCount
 925 02b0 9091 0000 		lds r25,xCoRoutineTickCount+1
 926 02b4 2115      		cp r18,__zero_reg__
 927 02b6 3105      		cpc r19,__zero_reg__
 928 02b8 01F0      		breq .+2
 929 02ba 00C0      		rjmp .L22
 295:../../freeRtos/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 931               	.LM60:
 932 02bc 8093 0000 		sts xLastTickCount,r24
 933 02c0 9093 0000 		sts xLastTickCount+1,r25
 934 02c4 4091 0000 		lds r20,uxTopCoRoutineReadyPriority
 935               	.LBE21:
 936               	.LBE20:
 308:../../freeRtos/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 938               	.LM61:
 939 02c8 00C0      		rjmp .L23
 940               	.L26:
 310:../../freeRtos/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 942               	.LM62:
 943 02ca 4423      		tst r20
 944 02cc 01F4      		brne .L24
 945 02ce 1092 0000 		sts uxTopCoRoutineReadyPriority,__zero_reg__
 946 02d2 00C0      		rjmp .L11
 947               	.L24:
 948 02d4 4150      		subi r20,lo8(-(-1))
 949               	.L23:
 308:../../freeRtos/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 951               	.LM63:
 952 02d6 842F      		mov r24,r20
 953 02d8 90E0      		ldi r25,lo8(0)
 954 02da 9C01      		movw r18,r24
 955 02dc 73E0      		ldi r23,3
 956 02de 220F      	1:	lsl r18
 957 02e0 331F      		rol r19
 958 02e2 7A95      		dec r23
 959 02e4 01F4      		brne 1b
 960 02e6 280F      		add r18,r24
 961 02e8 391F      		adc r19,r25
 962 02ea F901      		movw r30,r18
 963 02ec E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 964 02ee F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 965 02f0 5081      		ld r21,Z
 966 02f2 5523      		tst r21
 967 02f4 01F0      		breq .L26
 308:../../freeRtos/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 969               	.LM64:
 970 02f6 4093 0000 		sts uxTopCoRoutineReadyPriority,r20
 971               	.LBB23:
 320:../../freeRtos/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 973               	.LM65:
 974 02fa A181      		ldd r26,Z+1
 975 02fc B281      		ldd r27,Z+2
 976 02fe 1296      		adiw r26,2
 977 0300 0D90      		ld __tmp_reg__,X+
 978 0302 BC91      		ld r27,X
 979 0304 A02D      		mov r26,__tmp_reg__
 980 0306 A183      		std Z+1,r26
 981 0308 B283      		std Z+2,r27
 982 030a 2050      		subi r18,lo8(-(pxReadyCoRoutineLists+3))
 983 030c 3040      		sbci r19,hi8(-(pxReadyCoRoutineLists+3))
 984 030e A217      		cp r26,r18
 985 0310 B307      		cpc r27,r19
 986 0312 01F4      		brne .L27
 320:../../freeRtos/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 988               	.LM66:
 989 0314 1296      		adiw r26,2
 990 0316 2D91      		ld r18,X+
 991 0318 3C91      		ld r19,X
 992 031a 1397      		sbiw r26,2+1
 993 031c 2183      		std Z+1,r18
 994 031e 3283      		std Z+2,r19
 995               	.L27:
 320:../../freeRtos/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 997               	.LM67:
 998 0320 FC01      		movw r30,r24
 999 0322 63E0      		ldi r22,3
 1000 0324 EE0F      	1:	lsl r30
 1001 0326 FF1F      		rol r31
 1002 0328 6A95      		dec r22
 1003 032a 01F4      		brne 1b
 1004 032c E80F      		add r30,r24
 1005 032e F91F      		adc r31,r25
 1006 0330 E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 1007 0332 F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 1008 0334 0180      		ldd __tmp_reg__,Z+1
 1009 0336 F281      		ldd r31,Z+2
 1010 0338 E02D      		mov r30,__tmp_reg__
 1011 033a A681      		ldd r26,Z+6
 1012 033c B781      		ldd r27,Z+7
 1013 033e A093 0000 		sts pxCurrentCoRoutine,r26
 1014 0342 B093 0000 		sts pxCurrentCoRoutine+1,r27
 1015               	.LBE23:
 323:../../freeRtos/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 1017               	.LM68:
 1018 0346 ED91      		ld r30,X+
 1019 0348 FC91      		ld r31,X
 1020 034a 1197      		sbiw r26,1
 1021 034c CD01      		movw r24,r26
 1022 034e 5796      		adiw r26,23
 1023 0350 6C91      		ld r22,X
 1024 0352 1995      		eicall
 1025               	.L11:
 1026               	/* epilogue start */
 326:../../freeRtos/Source/croutine.c **** }
 1028               	.LM69:
 1029 0354 DF91      		pop r29
 1030 0356 CF91      		pop r28
 1031 0358 1F91      		pop r17
 1032 035a 0F91      		pop r16
 1033 035c 0895      		ret
 1044               	.Lscope3:
 1046               		.stabd	78,0,0
 1049               	.global	xCoRoutineRemoveFromEventList
 1051               	xCoRoutineRemoveFromEventList:
 1052               		.stabd	46,0,0
 346:../../freeRtos/Source/croutine.c **** }
 347:../../freeRtos/Source/croutine.c **** /*-----------------------------------------------------------*/
 348:../../freeRtos/Source/croutine.c **** 
 349:../../freeRtos/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 350:../../freeRtos/Source/croutine.c **** {
 1054               	.LM70:
 1055               	.LFBB4:
 1056 035e 0F93      		push r16
 1057 0360 1F93      		push r17
 1058 0362 CF93      		push r28
 1059 0364 DF93      		push r29
 1060               	/* prologue: function */
 1061               	/* frame size = 0 */
 1062               	/* stack size = 4 */
 1063               	.L__stack_usage = 4
 1064 0366 FC01      		movw r30,r24
 351:../../freeRtos/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 352:../../freeRtos/Source/croutine.c **** signed portBASE_TYPE xReturn;
 353:../../freeRtos/Source/croutine.c **** 
 354:../../freeRtos/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 355:../../freeRtos/Source/croutine.c **** 	event lists and the pending ready list. */
 356:../../freeRtos/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 1066               	.LM71:
 1067 0368 8081      		ld r24,Z
 1068 036a 8823      		tst r24
 1069 036c 01F0      		breq .L36
 1071               	.LM72:
 1072 036e 0580      		ldd __tmp_reg__,Z+5
 1073 0370 F681      		ldd r31,Z+6
 1074 0372 E02D      		mov r30,__tmp_reg__
 1075 0374 C681      		ldd r28,Z+6
 1076 0376 D781      		ldd r29,Z+7
 1077 0378 00C0      		rjmp .L34
 1078               	.L36:
 1080               	.LM73:
 1081 037a C0E0      		ldi r28,lo8(0)
 1082 037c D0E0      		ldi r29,hi8(0)
 1083               	.L34:
 357:../../freeRtos/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 1085               	.LM74:
 1086 037e 8E01      		movw r16,r28
 1087 0380 045F      		subi r16,lo8(-(12))
 1088 0382 1F4F      		sbci r17,hi8(-(12))
 1089 0384 C801      		movw r24,r16
 1090 0386 0E94 0000 		call vListRemove
 358:../../freeRtos/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 1092               	.LM75:
 1093 038a 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
 1094 038c 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 1095 038e B801      		movw r22,r16
 1096 0390 0E94 0000 		call vListInsertEnd
 359:../../freeRtos/Source/croutine.c **** 
 360:../../freeRtos/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 1098               	.LM76:
 1099 0394 E091 0000 		lds r30,pxCurrentCoRoutine
 1100 0398 F091 0000 		lds r31,pxCurrentCoRoutine+1
 361:../../freeRtos/Source/croutine.c **** 	{
 362:../../freeRtos/Source/croutine.c **** 		xReturn = pdTRUE;
 1102               	.LM77:
 1103 039c 81E0      		ldi r24,lo8(1)
 1104 039e 2E89      		ldd r18,Y+22
 1105 03a0 9689      		ldd r25,Z+22
 1106 03a2 2917      		cp r18,r25
 1107 03a4 00F4      		brsh .L35
 1108 03a6 80E0      		ldi r24,lo8(0)
 1109               	.L35:
 1110               	/* epilogue start */
 363:../../freeRtos/Source/croutine.c **** 	}
 364:../../freeRtos/Source/croutine.c **** 	else
 365:../../freeRtos/Source/croutine.c **** 	{
 366:../../freeRtos/Source/croutine.c **** 		xReturn = pdFALSE;
 367:../../freeRtos/Source/croutine.c **** 	}
 368:../../freeRtos/Source/croutine.c **** 
 369:../../freeRtos/Source/croutine.c **** 	return xReturn;
 370:../../freeRtos/Source/croutine.c **** }
 1112               	.LM78:
 1113 03a8 DF91      		pop r29
 1114 03aa CF91      		pop r28
 1115 03ac 1F91      		pop r17
 1116 03ae 0F91      		pop r16
 1117 03b0 0895      		ret
 1122               	.Lscope4:
 1124               		.stabd	78,0,0
 1125               	.global	pxCurrentCoRoutine
 1126               	.global	pxCurrentCoRoutine
 1127               		.section .bss
 1130               	pxCurrentCoRoutine:
 1131 0000 0000      		.skip 2,0
 1132               		.lcomm xPendingReadyCoRoutineList,9
 1133               		.lcomm uxTopCoRoutineReadyPriority,1
 1134               		.lcomm pxReadyCoRoutineLists,9
 1135               		.lcomm xLastTickCount,2
 1136               		.lcomm xPassedTicks,2
 1137               		.lcomm xCoRoutineTickCount,2
 1138               		.lcomm pxDelayedCoRoutineList,2
 1139               		.lcomm pxOverflowDelayedCoRoutineList,2
 1140               		.lcomm xDelayedCoRoutineList1,9
 1141               		.lcomm xDelayedCoRoutineList2,9
 1153               		.text
 1155               	.Letext0:
 1156               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
     /tmp/cctHG8gU.s:2      *ABS*:0000003f __SREG__
     /tmp/cctHG8gU.s:3      *ABS*:0000003e __SP_H__
     /tmp/cctHG8gU.s:4      *ABS*:0000003d __SP_L__
     /tmp/cctHG8gU.s:5      *ABS*:00000034 __CCP__
     /tmp/cctHG8gU.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cctHG8gU.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cctHG8gU.s:441    .text:00000000 xCoRoutineCreate
     /tmp/cctHG8gU.s:1130   .bss:00000000 pxCurrentCoRoutine
     /tmp/cctHG8gU.s:1133   .bss:0000000c pxReadyCoRoutineLists
     /tmp/cctHG8gU.s:1139   .bss:0000001f xDelayedCoRoutineList1
     /tmp/cctHG8gU.s:1140   .bss:00000028 xDelayedCoRoutineList2
                             .bss:00000002 xPendingReadyCoRoutineList
     /tmp/cctHG8gU.s:1137   .bss:0000001b pxDelayedCoRoutineList
     /tmp/cctHG8gU.s:1138   .bss:0000001d pxOverflowDelayedCoRoutineList
     /tmp/cctHG8gU.s:1132   .bss:0000000b uxTopCoRoutineReadyPriority
     /tmp/cctHG8gU.s:621    .text:000000ec vCoRoutineAddToDelayedList
     /tmp/cctHG8gU.s:1136   .bss:00000019 xCoRoutineTickCount
     /tmp/cctHG8gU.s:706    .text:00000166 vCoRoutineSchedule
     /tmp/cctHG8gU.s:1134   .bss:00000015 xLastTickCount
     /tmp/cctHG8gU.s:1135   .bss:00000017 xPassedTicks
     /tmp/cctHG8gU.s:1051   .text:0000035e xCoRoutineRemoveFromEventList

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
__do_clear_bss
