   1               		.file	"enc28j60.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 557               		.weak	spiEnableEnc28j60
 559               	spiEnableEnc28j60:
 560               		.stabd	46,0,0
   1:../../freeRtos/Lib/enc28j60.c **** /*********************************************
   2:../../freeRtos/Lib/enc28j60.c ****  * vim:sw=8:ts=8:si:et
   3:../../freeRtos/Lib/enc28j60.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:../../freeRtos/Lib/enc28j60.c ****  * Author: Guido Socher 
   5:../../freeRtos/Lib/enc28j60.c ****  * Copyright: GPL V2
   6:../../freeRtos/Lib/enc28j60.c ****  * http://www.gnu.org/licenses/gpl.html
   7:../../freeRtos/Lib/enc28j60.c ****  *
   8:../../freeRtos/Lib/enc28j60.c ****  * Based on the enc28j60.c file from the AVRlib library by Pascal Stang
   9:../../freeRtos/Lib/enc28j60.c ****  * For AVRlib See http://www.procyonengineering.com/
  10:../../freeRtos/Lib/enc28j60.c ****  * Used with explicit permission of Pascal Stang.
  11:../../freeRtos/Lib/enc28j60.c ****  *
  12:../../freeRtos/Lib/enc28j60.c ****  * Title: Microchip ENC28J60 Ethernet Interface Driver
  13:../../freeRtos/Lib/enc28j60.c ****  * Chip type           : ATMEGA88 with ENC28J60
  14:../../freeRtos/Lib/enc28j60.c ****  *********************************************/
  15:../../freeRtos/Lib/enc28j60.c **** 
  16:../../freeRtos/Lib/enc28j60.c **** #include "enc28j60.h"
  17:../../freeRtos/Lib/enc28j60.c **** 
  18:../../freeRtos/Lib/enc28j60.c **** 
  19:../../freeRtos/Lib/enc28j60.c **** static uint8_t Enc28j60Bank;
  20:../../freeRtos/Lib/enc28j60.c **** static uint16_t gNextPacketPtr;
  21:../../freeRtos/Lib/enc28j60.c **** 
  22:../../freeRtos/Lib/enc28j60.c **** 
  23:../../freeRtos/Lib/enc28j60.c **** /**
  24:../../freeRtos/Lib/enc28j60.c ****  * Initialize enc28j60
  25:../../freeRtos/Lib/enc28j60.c ****  * @param *macaddr - pointer to the mac address (6 bytes)
  26:../../freeRtos/Lib/enc28j60.c ****  */
  27:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Init(uint8_t* macaddr);
  28:../../freeRtos/Lib/enc28j60.c **** 
  29:../../freeRtos/Lib/enc28j60.c **** /**
  30:../../freeRtos/Lib/enc28j60.c ****  * Read register value (without changing the bank)
  31:../../freeRtos/Lib/enc28j60.c ****  * @param op      - operation type
  32:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address
  33:../../freeRtos/Lib/enc28j60.c ****  * @return register value
  34:../../freeRtos/Lib/enc28j60.c ****  */
  35:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60ReadOp (uint8_t op, uint8_t address);
  36:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data);
  37:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60SetBank(uint8_t address);
  38:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60ReadBuffer(uint16_t len, uint8_t* data);
  39:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteBuffer(uint16_t len, uint8_t* data);
  40:../../freeRtos/Lib/enc28j60.c **** 
  41:../../freeRtos/Lib/enc28j60.c **** /**
  42:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 control register
  43:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  44:../../freeRtos/Lib/enc28j60.c ****  * @return control register value
  45:../../freeRtos/Lib/enc28j60.c ****  */
  46:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60Read(uint8_t address);
  47:../../freeRtos/Lib/enc28j60.c **** 
  48:../../freeRtos/Lib/enc28j60.c **** /**
  49:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 control register
  50:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  51:../../freeRtos/Lib/enc28j60.c ****  * @param data    - control register value to be writen
  52:../../freeRtos/Lib/enc28j60.c ****  */
  53:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Write(uint8_t address, uint8_t data);
  54:../../freeRtos/Lib/enc28j60.c **** 
  55:../../freeRtos/Lib/enc28j60.c **** /**
  56:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 phy register
  57:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  58:../../freeRtos/Lib/enc28j60.c ****  * @return phy register value
  59:../../freeRtos/Lib/enc28j60.c ****  */
  60:../../freeRtos/Lib/enc28j60.c **** static uint16_t enc28j60PhyReadH(uint8_t address);
  61:../../freeRtos/Lib/enc28j60.c **** 
  62:../../freeRtos/Lib/enc28j60.c **** /**
  63:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 phy register
  64:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  65:../../freeRtos/Lib/enc28j60.c ****  * @param data    - phy register value to be writen
  66:../../freeRtos/Lib/enc28j60.c ****  */
  67:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60PhyWrite(uint8_t address, uint16_t data);
  68:../../freeRtos/Lib/enc28j60.c **** 
  69:../../freeRtos/Lib/enc28j60.c **** 
  70:../../freeRtos/Lib/enc28j60.c **** //void     enc28j60BufferSend(uint16_t len, roundBuffer* buffer);
  71:../../freeRtos/Lib/enc28j60.c **** 
  72:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60hasRxPkt(void);
  73:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60getrev(void);
  74:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60linkup(void);
  75:../../freeRtos/Lib/enc28j60.c **** 
  76:../../freeRtos/Lib/enc28j60.c **** void nicMacInit(void)
  77:../../freeRtos/Lib/enc28j60.c **** { 
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  79:../../freeRtos/Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
  80:../../freeRtos/Lib/enc28j60.c **** //  enc28j60clkout      (2);     // change clkout from 6.25MHz to 12.5MHz
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
  84:../../freeRtos/Lib/enc28j60.c **** }
  85:../../freeRtos/Lib/enc28j60.c **** 
  86:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
  87:../../freeRtos/Lib/enc28j60.c **** {
  88:../../freeRtos/Lib/enc28j60.c ****   uint8_t result;
  89:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
  91:../../freeRtos/Lib/enc28j60.c ****   
  92:../../freeRtos/Lib/enc28j60.c ****   // issue read command
  93:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
  94:../../freeRtos/Lib/enc28j60.c **** 
  95:../../freeRtos/Lib/enc28j60.c ****   // read data
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSend(0x00);
  97:../../freeRtos/Lib/enc28j60.c **** 
  98:../../freeRtos/Lib/enc28j60.c ****   // do dummy read if needed (for mac and mii, see datasheet page 29)
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 100:../../freeRtos/Lib/enc28j60.c ****   {
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSend(0x00);
 102:../../freeRtos/Lib/enc28j60.c ****   }
 103:../../freeRtos/Lib/enc28j60.c **** 
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 105:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 106:../../freeRtos/Lib/enc28j60.c ****   return result; 
 107:../../freeRtos/Lib/enc28j60.c **** }
 108:../../freeRtos/Lib/enc28j60.c **** 
 109:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
 110:../../freeRtos/Lib/enc28j60.c **** {
 111:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 113:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 114:../../freeRtos/Lib/enc28j60.c ****   //spiSend(op | (address & ADDR_MASK));
 115:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 116:../../freeRtos/Lib/enc28j60.c ****   spiSend(data);
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 118:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 119:../../freeRtos/Lib/enc28j60.c **** }
 120:../../freeRtos/Lib/enc28j60.c **** 
 121:../../freeRtos/Lib/enc28j60.c **** void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
 122:../../freeRtos/Lib/enc28j60.c **** {
 123:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 125:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 127:../../freeRtos/Lib/enc28j60.c ****   {
 128:../../freeRtos/Lib/enc28j60.c ****     len--;
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSend(0x00);
 130:../../freeRtos/Lib/enc28j60.c ****     data++;
 131:../../freeRtos/Lib/enc28j60.c ****   }
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 134:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 135:../../freeRtos/Lib/enc28j60.c **** }
 136:../../freeRtos/Lib/enc28j60.c **** 
 137:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
 138:../../freeRtos/Lib/enc28j60.c **** {
 139:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 141:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 142:../../freeRtos/Lib/enc28j60.c ****   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 143:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 145:../../freeRtos/Lib/enc28j60.c ****   {
 146:../../freeRtos/Lib/enc28j60.c ****     len--;
 147:../../freeRtos/Lib/enc28j60.c ****     spiSend(*data);       // write data
 148:../../freeRtos/Lib/enc28j60.c ****     data++;
 149:../../freeRtos/Lib/enc28j60.c ****   }
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 151:../../freeRtos/Lib/enc28j60.c ****   //spiGive();
 152:../../freeRtos/Lib/enc28j60.c **** }
 153:../../freeRtos/Lib/enc28j60.c **** 
 154:../../freeRtos/Lib/enc28j60.c **** // void enc28j60WriteRoundBuffer(uint8_t len, roundBuffer *buffer)
 155:../../freeRtos/Lib/enc28j60.c **** // {
 156:../../freeRtos/Lib/enc28j60.c **** //   spiTake();
 157:../../freeRtos/Lib/enc28j60.c **** //   spiEnableEnc28j60();
 158:../../freeRtos/Lib/enc28j60.c **** //   // issue write command
 159:../../freeRtos/Lib/enc28j60.c **** //   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 160:../../freeRtos/Lib/enc28j60.c **** //   spiSend(ENC28J60_WRITE_BUF_MEM);
 161:../../freeRtos/Lib/enc28j60.c **** //   uint8_t data;
 162:../../freeRtos/Lib/enc28j60.c **** //   while(len)
 163:../../freeRtos/Lib/enc28j60.c **** //   {
 164:../../freeRtos/Lib/enc28j60.c **** //     len--;
 165:../../freeRtos/Lib/enc28j60.c **** //     data = *buffer->readIdx.ptr16;   
 166:../../freeRtos/Lib/enc28j60.c **** //     buffer->readIdx.ptr.L++;
 167:../../freeRtos/Lib/enc28j60.c **** //     
 168:../../freeRtos/Lib/enc28j60.c **** //     spiSend(*data);       // write data
 169:../../freeRtos/Lib/enc28j60.c **** //   }
 170:../../freeRtos/Lib/enc28j60.c **** //   spiDisableEnc28j60();  
 171:../../freeRtos/Lib/enc28j60.c **** //   spiGive();
 172:../../freeRtos/Lib/enc28j60.c **** // }
 173:../../freeRtos/Lib/enc28j60.c **** 
 174:../../freeRtos/Lib/enc28j60.c **** 
 175:../../freeRtos/Lib/enc28j60.c **** void enc28j60SetBank(uint8_t address)
 176:../../freeRtos/Lib/enc28j60.c **** {
 177:../../freeRtos/Lib/enc28j60.c ****   // set the bank (if needed)
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 179:../../freeRtos/Lib/enc28j60.c ****   {
 180:../../freeRtos/Lib/enc28j60.c ****     // set the bank
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 184:../../freeRtos/Lib/enc28j60.c ****   }
 185:../../freeRtos/Lib/enc28j60.c **** }
 186:../../freeRtos/Lib/enc28j60.c **** 
 187:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60Read(uint8_t address)
 188:../../freeRtos/Lib/enc28j60.c **** {
 189:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 191:../../freeRtos/Lib/enc28j60.c ****   // do the read
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 193:../../freeRtos/Lib/enc28j60.c ****   return result;
 194:../../freeRtos/Lib/enc28j60.c **** }
 195:../../freeRtos/Lib/enc28j60.c **** 
 196:../../freeRtos/Lib/enc28j60.c **** // read upper 8 bits
 197:../../freeRtos/Lib/enc28j60.c **** uint16_t enc28j60PhyReadH(uint8_t address)
 198:../../freeRtos/Lib/enc28j60.c **** {
 199:../../freeRtos/Lib/enc28j60.c ****   // Set the right address and start the register read operation
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 202:../../freeRtos/Lib/enc28j60.c ****   
 203:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(0);
 204:../../freeRtos/Lib/enc28j60.c **** 
 205:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY read completes
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 208:../../freeRtos/Lib/enc28j60.c **** 
 209:../../freeRtos/Lib/enc28j60.c ****   // reset reading bit
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 211:../../freeRtos/Lib/enc28j60.c **** 
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 213:../../freeRtos/Lib/enc28j60.c **** }
 214:../../freeRtos/Lib/enc28j60.c **** 
 215:../../freeRtos/Lib/enc28j60.c **** void enc28j60Write(uint8_t address, uint8_t data)
 216:../../freeRtos/Lib/enc28j60.c **** {
 217:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 219:../../freeRtos/Lib/enc28j60.c ****   // do the write
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 221:../../freeRtos/Lib/enc28j60.c **** }
 222:../../freeRtos/Lib/enc28j60.c **** 
 223:../../freeRtos/Lib/enc28j60.c **** void enc28j60PhyWrite(uint8_t address, uint16_t data)
 224:../../freeRtos/Lib/enc28j60.c **** {
 225:../../freeRtos/Lib/enc28j60.c ****   // set the PHY register address
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 227:../../freeRtos/Lib/enc28j60.c ****   // write the PHY data
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 230:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY write completes
 231:../../freeRtos/Lib/enc28j60.c ****   
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 233:../../freeRtos/Lib/enc28j60.c ****   {
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 235:../../freeRtos/Lib/enc28j60.c ****   }
 236:../../freeRtos/Lib/enc28j60.c **** }
 237:../../freeRtos/Lib/enc28j60.c **** 
 238:../../freeRtos/Lib/enc28j60.c **** void enc28j60Init(uint8_t* macaddr)
 239:../../freeRtos/Lib/enc28j60.c **** {
 240:../../freeRtos/Lib/enc28j60.c ****   // perform system reset
 241:../../freeRtos/Lib/enc28j60.c ****   
 242:../../freeRtos/Lib/enc28j60.c ****   //ENC28j60 reset is on PE2 TODO add in hardware.c macros for that.
 243:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_ON;   // PORTE &= ~0x04;
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 245:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04; 
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 247:../../freeRtos/Lib/enc28j60.c **** 
 248:../../freeRtos/Lib/enc28j60.c ****   // check CLKRDY bit to see if reset is complete
 249:../../freeRtos/Lib/enc28j60.c ****   // The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
 250:../../freeRtos/Lib/enc28j60.c ****   //while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
 251:../../freeRtos/Lib/enc28j60.c ****   // do bank 0 stuff
 252:../../freeRtos/Lib/enc28j60.c ****   // initialize receive buffer
 253:../../freeRtos/Lib/enc28j60.c ****   // 16-bit transfers, must write low byte first
 254:../../freeRtos/Lib/enc28j60.c ****   // set receive buffer start address
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 256:../../freeRtos/Lib/enc28j60.c ****   // Rx start
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 259:../../freeRtos/Lib/enc28j60.c ****   // set receive pointer address
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 262:../../freeRtos/Lib/enc28j60.c ****   // RX end
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 265:../../freeRtos/Lib/enc28j60.c ****   // TX start
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 268:../../freeRtos/Lib/enc28j60.c ****   // TX end
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 271:../../freeRtos/Lib/enc28j60.c **** 
 272:../../freeRtos/Lib/enc28j60.c ****   // do bank 1 stuff, packet filter:
 273:../../freeRtos/Lib/enc28j60.c ****   // For broadcast packets we allow only ARP packtets
 274:../../freeRtos/Lib/enc28j60.c ****   // All other packets should be unicast only for our mac (MAADR)
 275:../../freeRtos/Lib/enc28j60.c ****   //
 276:../../freeRtos/Lib/enc28j60.c ****   // The pattern to match on is therefore
 277:../../freeRtos/Lib/enc28j60.c ****   // Type     ETH.DST
 278:../../freeRtos/Lib/enc28j60.c ****   // ARP      BROADCAST
 279:../../freeRtos/Lib/enc28j60.c ****   // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
 280:../../freeRtos/Lib/enc28j60.c ****   // in binary these poitions are:11 0000 0011 1111
 281:../../freeRtos/Lib/enc28j60.c ****   // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 282:../../freeRtos/Lib/enc28j60.c ****   //enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);  //Bez wejsca dla broadcastu (
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 288:../../freeRtos/Lib/enc28j60.c ****   //
 289:../../freeRtos/Lib/enc28j60.c ****   //
 290:../../freeRtos/Lib/enc28j60.c ****   // do bank 2 stuff
 291:../../freeRtos/Lib/enc28j60.c ****   // enable MAC receive
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 293:../../freeRtos/Lib/enc28j60.c ****   // bring MAC out of reset
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 295:../../freeRtos/Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 297:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 300:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 302:../../freeRtos/Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 303:../../freeRtos/Lib/enc28j60.c ****   // Do not send packets longer than MAX_FRAMELEN:
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 306:../../freeRtos/Lib/enc28j60.c ****   
 307:../../freeRtos/Lib/enc28j60.c ****   // do bank 3 stuff
 308:../../freeRtos/Lib/enc28j60.c ****   // write MAC address
 309:../../freeRtos/Lib/enc28j60.c **** 
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 311:../../freeRtos/Lib/enc28j60.c ****   
 312:../../freeRtos/Lib/enc28j60.c ****   // no loopback of transmitted frames
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 314:../../freeRtos/Lib/enc28j60.c ****   
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 316:../../freeRtos/Lib/enc28j60.c ****   // enable interrutps
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 318:../../freeRtos/Lib/enc28j60.c ****   // enable packet reception
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 320:../../freeRtos/Lib/enc28j60.c **** }
 321:../../freeRtos/Lib/enc28j60.c **** 
 322:../../freeRtos/Lib/enc28j60.c **** // read the revision of the chip:
 323:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60getrev(void)
 324:../../freeRtos/Lib/enc28j60.c **** {
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 326:../../freeRtos/Lib/enc28j60.c **** }
 327:../../freeRtos/Lib/enc28j60.c **** 
 328:../../freeRtos/Lib/enc28j60.c **** // link status
 329:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60linkup(void)
 330:../../freeRtos/Lib/enc28j60.c **** {
 331:../../freeRtos/Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 333:../../freeRtos/Lib/enc28j60.c **** }
 334:../../freeRtos/Lib/enc28j60.c **** 
 335:../../freeRtos/Lib/enc28j60.c **** void nicSend(uint16_t len)
 336:../../freeRtos/Lib/enc28j60.c **** {
 337:../../freeRtos/Lib/enc28j60.c ****   // Check no transmit in progress
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 339:../../freeRtos/Lib/enc28j60.c ****   {
 340:../../freeRtos/Lib/enc28j60.c ****     // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 342:../../freeRtos/Lib/enc28j60.c ****     {
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 345:../../freeRtos/Lib/enc28j60.c ****     }
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 347:../../freeRtos/Lib/enc28j60.c ****   }
 348:../../freeRtos/Lib/enc28j60.c ****   // Set the write pointer to start of transmit buffer area
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 351:../../freeRtos/Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 354:../../freeRtos/Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 356:../../freeRtos/Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 358:../../freeRtos/Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 360:../../freeRtos/Lib/enc28j60.c **** }
 361:../../freeRtos/Lib/enc28j60.c **** 
 362:../../freeRtos/Lib/enc28j60.c **** // just probe if there might be a packet
 363:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60hasRxPkt(void)
 364:../../freeRtos/Lib/enc28j60.c **** {
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 366:../../freeRtos/Lib/enc28j60.c ****   {
 367:../../freeRtos/Lib/enc28j60.c ****     return(0);
 368:../../freeRtos/Lib/enc28j60.c ****   }
 369:../../freeRtos/Lib/enc28j60.c ****   return(1);
 370:../../freeRtos/Lib/enc28j60.c **** }
 371:../../freeRtos/Lib/enc28j60.c **** 
 372:../../freeRtos/Lib/enc28j60.c **** uint16_t nicPoll(void)
 373:../../freeRtos/Lib/enc28j60.c **** {
 374:../../freeRtos/Lib/enc28j60.c ****   uint16_t rxstat;
 375:../../freeRtos/Lib/enc28j60.c ****   uint16_t len;
 376:../../freeRtos/Lib/enc28j60.c ****   // check if a packet has been received and buffered
 377:../../freeRtos/Lib/enc28j60.c ****   //if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
 378:../../freeRtos/Lib/enc28j60.c ****   // The above does not work. See Rev. B4 Silicon Errata point 6.
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 380:../../freeRtos/Lib/enc28j60.c ****   {
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 382:../../freeRtos/Lib/enc28j60.c ****   }
 383:../../freeRtos/Lib/enc28j60.c **** 
 384:../../freeRtos/Lib/enc28j60.c ****   // Set the read pointer to the start of the received packet
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 387:../../freeRtos/Lib/enc28j60.c ****   // read the next packet pointer
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 390:../../freeRtos/Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 393:../../freeRtos/Lib/enc28j60.c ****   len-=4; //remove the CRC count
 394:../../freeRtos/Lib/enc28j60.c ****   // read the receive status (see datasheet page 43)
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 397:../../freeRtos/Lib/enc28j60.c ****   // limit retrieve length
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 399:../../freeRtos/Lib/enc28j60.c ****   {
 400:../../freeRtos/Lib/enc28j60.c ****     len= nicState.bufferSize-1;
 401:../../freeRtos/Lib/enc28j60.c ****   }
 402:../../freeRtos/Lib/enc28j60.c ****   // check CRC and symbol errors (see datasheet page 44, table 7-3):
 403:../../freeRtos/Lib/enc28j60.c ****   // The ERXFCON.CRCEN is set by default. Normally we should not
 404:../../freeRtos/Lib/enc28j60.c ****   // need to check this.
 405:../../freeRtos/Lib/enc28j60.c **** 
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 407:../../freeRtos/Lib/enc28j60.c ****   {
 408:../../freeRtos/Lib/enc28j60.c ****     // invalid
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 410:../../freeRtos/Lib/enc28j60.c ****   }
 411:../../freeRtos/Lib/enc28j60.c ****   else
 412:../../freeRtos/Lib/enc28j60.c ****   {
 413:../../freeRtos/Lib/enc28j60.c ****     // copy the packet from the receive buffer
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 415:../../freeRtos/Lib/enc28j60.c ****   }
 416:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 417:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 420:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 421:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out.
 422:../../freeRtos/Lib/enc28j60.c ****   // However, compensate for the errata point 13, rev B4: enver write an even address!
 423:../../freeRtos/Lib/enc28j60.c ****   //FIXME remove this warning
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 425:../../freeRtos/Lib/enc28j60.c ****   {
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 428:../../freeRtos/Lib/enc28j60.c ****   }
 429:../../freeRtos/Lib/enc28j60.c ****   else
 430:../../freeRtos/Lib/enc28j60.c ****   {
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 433:../../freeRtos/Lib/enc28j60.c ****   }
 434:../../freeRtos/Lib/enc28j60.c ****   // decrement the packet counter indicate we are done with this packet
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 437:../../freeRtos/Lib/enc28j60.c **** }
 438:../../freeRtos/Lib/enc28j60.c **** 
 439:../../freeRtos/Lib/enc28j60.c **** void spiEnableEnc28j60(void)  {};
 562               	.LM0:
 563               	.LFBB1:
 564               	/* prologue: function */
 565               	/* frame size = 0 */
 566               	/* stack size = 0 */
 567               	.L__stack_usage = 0
 568               	/* epilogue start */
 570               	.LM1:
 571 0000 0895      		ret
 573               	.Lscope1:
 575               		.stabd	78,0,0
 577               		.weak	spiDisableEnc28j60
 579               	spiDisableEnc28j60:
 580               		.stabd	46,0,0
 440:../../freeRtos/Lib/enc28j60.c **** void spiDisableEnc28j60(void) {};
 582               	.LM2:
 583               	.LFBB2:
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 0 */
 587               	.L__stack_usage = 0
 588               	/* epilogue start */
 590               	.LM3:
 591 0002 0895      		ret
 593               	.Lscope2:
 595               		.stabd	78,0,0
 601               	enc28j60WriteOp:
 602               		.stabd	46,0,0
 110:../../freeRtos/Lib/enc28j60.c **** {
 604               	.LM4:
 605               	.LFBB3:
 606 0004 1F93      		push r17
 607 0006 DF93      		push r29
 608 0008 CF93      		push r28
 609 000a 0F92      		push __tmp_reg__
 610 000c 0F92      		push __tmp_reg__
 611 000e CDB7      		in r28,__SP_L__
 612 0010 DEB7      		in r29,__SP_H__
 613               	/* prologue: function */
 614               	/* frame size = 2 */
 615               	/* stack size = 5 */
 616               	.L__stack_usage = 5
 617 0012 182F      		mov r17,r24
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 619               	.LM5:
 620 0014 4A83      		std Y+2,r20
 621 0016 6983      		std Y+1,r22
 622 0018 0E94 0000 		call spiEnableEnc28j60
 115:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 624               	.LM6:
 625 001c 6981      		ldd r22,Y+1
 626 001e 862F      		mov r24,r22
 627 0020 8F71      		andi r24,lo8(31)
 628 0022 812B      		or r24,r17
 629 0024 0E94 0000 		call spiSend
 116:../../freeRtos/Lib/enc28j60.c ****   spiSend(data);
 631               	.LM7:
 632 0028 4A81      		ldd r20,Y+2
 633 002a 842F      		mov r24,r20
 634 002c 0E94 0000 		call spiSend
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 636               	.LM8:
 637 0030 0E94 0000 		call spiDisableEnc28j60
 638               	/* epilogue start */
 119:../../freeRtos/Lib/enc28j60.c **** }
 640               	.LM9:
 641 0034 0F90      		pop __tmp_reg__
 642 0036 0F90      		pop __tmp_reg__
 643 0038 CF91      		pop r28
 644 003a DF91      		pop r29
 645 003c 1F91      		pop r17
 646 003e 0895      		ret
 648               	.Lscope3:
 650               		.stabd	78,0,0
 654               	enc28j60SetBank:
 655               		.stabd	46,0,0
 176:../../freeRtos/Lib/enc28j60.c **** {
 657               	.LM10:
 658               	.LFBB4:
 659 0040 1F93      		push r17
 660 0042 CF93      		push r28
 661 0044 DF93      		push r29
 662               	/* prologue: function */
 663               	/* frame size = 0 */
 664               	/* stack size = 3 */
 665               	.L__stack_usage = 3
 666 0046 182F      		mov r17,r24
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 668               	.LM11:
 669 0048 C82F      		mov r28,r24
 670 004a D0E0      		ldi r29,lo8(0)
 671 004c C076      		andi r28,lo8(96)
 672 004e D070      		andi r29,hi8(96)
 673 0050 2091 0000 		lds r18,Enc28j60Bank
 674 0054 30E0      		ldi r19,lo8(0)
 675 0056 C217      		cp r28,r18
 676 0058 D307      		cpc r29,r19
 677 005a 01F0      		breq .L4
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 679               	.LM12:
 680 005c 80EA      		ldi r24,lo8(-96)
 681 005e 6FE1      		ldi r22,lo8(31)
 682 0060 43E0      		ldi r20,lo8(3)
 683 0062 0E94 0000 		call enc28j60WriteOp
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 685               	.LM13:
 686 0066 AE01      		movw r20,r28
 687 0068 85E0      		ldi r24,5
 688 006a 5595      	1:	asr r21
 689 006c 4795      		ror r20
 690 006e 8A95      		dec r24
 691 0070 01F4      		brne 1b
 692 0072 80E8      		ldi r24,lo8(-128)
 693 0074 6FE1      		ldi r22,lo8(31)
 694 0076 0E94 0000 		call enc28j60WriteOp
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 696               	.LM14:
 697 007a 1076      		andi r17,lo8(96)
 698 007c 1093 0000 		sts Enc28j60Bank,r17
 699               	.L4:
 700               	/* epilogue start */
 185:../../freeRtos/Lib/enc28j60.c **** }
 702               	.LM15:
 703 0080 DF91      		pop r29
 704 0082 CF91      		pop r28
 705 0084 1F91      		pop r17
 706 0086 0895      		ret
 708               	.Lscope4:
 710               		.stabd	78,0,0
 715               	enc28j60Write:
 716               		.stabd	46,0,0
 216:../../freeRtos/Lib/enc28j60.c **** {
 718               	.LM16:
 719               	.LFBB5:
 720 0088 1F93      		push r17
 721 008a DF93      		push r29
 722 008c CF93      		push r28
 723 008e 0F92      		push __tmp_reg__
 724 0090 CDB7      		in r28,__SP_L__
 725 0092 DEB7      		in r29,__SP_H__
 726               	/* prologue: function */
 727               	/* frame size = 1 */
 728               	/* stack size = 4 */
 729               	.L__stack_usage = 4
 730 0094 182F      		mov r17,r24
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 732               	.LM17:
 733 0096 6983      		std Y+1,r22
 734 0098 0E94 0000 		call enc28j60SetBank
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 736               	.LM18:
 737 009c 80E4      		ldi r24,lo8(64)
 738 009e 612F      		mov r22,r17
 739 00a0 4981      		ldd r20,Y+1
 740 00a2 0E94 0000 		call enc28j60WriteOp
 741               	/* epilogue start */
 221:../../freeRtos/Lib/enc28j60.c **** }
 743               	.LM19:
 744 00a6 0F90      		pop __tmp_reg__
 745 00a8 CF91      		pop r28
 746 00aa DF91      		pop r29
 747 00ac 1F91      		pop r17
 748 00ae 0895      		ret
 750               	.Lscope5:
 752               		.stabd	78,0,0
 757               	enc28j60ReadOp:
 758               		.stabd	46,0,0
  87:../../freeRtos/Lib/enc28j60.c **** {
 760               	.LM20:
 761               	.LFBB6:
 762 00b0 1F93      		push r17
 763 00b2 DF93      		push r29
 764 00b4 CF93      		push r28
 765 00b6 0F92      		push __tmp_reg__
 766 00b8 CDB7      		in r28,__SP_L__
 767 00ba DEB7      		in r29,__SP_H__
 768               	/* prologue: function */
 769               	/* frame size = 1 */
 770               	/* stack size = 4 */
 771               	.L__stack_usage = 4
 772 00bc 162F      		mov r17,r22
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 774               	.LM21:
 775 00be 8983      		std Y+1,r24
 776 00c0 0E94 0000 		call spiEnableEnc28j60
  93:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 778               	.LM22:
 779 00c4 912F      		mov r25,r17
 780 00c6 9F71      		andi r25,lo8(31)
 781 00c8 8981      		ldd r24,Y+1
 782 00ca 892B      		or r24,r25
 783 00cc 0E94 0000 		call spiSend
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSend(0x00);
 785               	.LM23:
 786 00d0 80E0      		ldi r24,lo8(0)
 787 00d2 0E94 0000 		call spiSend
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 789               	.LM24:
 790 00d6 17FF      		sbrs r17,7
 791 00d8 00C0      		rjmp .L8
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSend(0x00);
 793               	.LM25:
 794 00da 80E0      		ldi r24,lo8(0)
 795 00dc 0E94 0000 		call spiSend
 796               	.L8:
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 798               	.LM26:
 799 00e0 8983      		std Y+1,r24
 800 00e2 0E94 0000 		call spiDisableEnc28j60
 107:../../freeRtos/Lib/enc28j60.c **** }
 802               	.LM27:
 803 00e6 8981      		ldd r24,Y+1
 804               	/* epilogue start */
 805 00e8 0F90      		pop __tmp_reg__
 806 00ea CF91      		pop r28
 807 00ec DF91      		pop r29
 808 00ee 1F91      		pop r17
 809 00f0 0895      		ret
 814               	.Lscope6:
 816               		.stabd	78,0,0
 820               	enc28j60Read:
 821               		.stabd	46,0,0
 188:../../freeRtos/Lib/enc28j60.c **** {
 823               	.LM28:
 824               	.LFBB7:
 825 00f2 DF93      		push r29
 826 00f4 CF93      		push r28
 827 00f6 0F92      		push __tmp_reg__
 828 00f8 CDB7      		in r28,__SP_L__
 829 00fa DEB7      		in r29,__SP_H__
 830               	/* prologue: function */
 831               	/* frame size = 1 */
 832               	/* stack size = 3 */
 833               	.L__stack_usage = 3
 834 00fc 682F      		mov r22,r24
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 836               	.LM29:
 837 00fe 6983      		std Y+1,r22
 838 0100 0E94 0000 		call enc28j60SetBank
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 840               	.LM30:
 841 0104 80E0      		ldi r24,lo8(0)
 842 0106 6981      		ldd r22,Y+1
 843 0108 0E94 0000 		call enc28j60ReadOp
 844               	/* epilogue start */
 194:../../freeRtos/Lib/enc28j60.c **** }
 846               	.LM31:
 847 010c 0F90      		pop __tmp_reg__
 848 010e CF91      		pop r28
 849 0110 DF91      		pop r29
 850 0112 0895      		ret
 852               	.Lscope7:
 854               		.stabd	78,0,0
 856               	.global	enc28j60hasRxPkt
 858               	enc28j60hasRxPkt:
 859               		.stabd	46,0,0
 364:../../freeRtos/Lib/enc28j60.c **** {
 861               	.LM32:
 862               	.LFBB8:
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 0 */
 866               	.L__stack_usage = 0
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 868               	.LM33:
 869 0114 89E3      		ldi r24,lo8(57)
 870 0116 0E94 0000 		call enc28j60Read
 367:../../freeRtos/Lib/enc28j60.c ****     return(0);
 872               	.LM34:
 873 011a 91E0      		ldi r25,lo8(1)
 874 011c 8823      		tst r24
 875 011e 01F4      		brne .L11
 876 0120 90E0      		ldi r25,lo8(0)
 877               	.L11:
 370:../../freeRtos/Lib/enc28j60.c **** }
 879               	.LM35:
 880 0122 892F      		mov r24,r25
 881               	/* epilogue start */
 882 0124 0895      		ret
 884               	.Lscope8:
 886               		.stabd	78,0,0
 888               	.global	enc28j60linkup
 890               	enc28j60linkup:
 891               		.stabd	46,0,0
 330:../../freeRtos/Lib/enc28j60.c **** {
 893               	.LM36:
 894               	.LFBB9:
 895               	/* prologue: function */
 896               	/* frame size = 0 */
 897               	/* stack size = 0 */
 898               	.L__stack_usage = 0
 899               	.LBB8:
 900               	.LBB9:
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 902               	.LM37:
 903 0126 84ED      		ldi r24,lo8(-44)
 904 0128 61E1      		ldi r22,lo8(17)
 905 012a 0E94 0000 		call enc28j60Write
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 907               	.LM38:
 908 012e 82ED      		ldi r24,lo8(-46)
 909 0130 61E0      		ldi r22,lo8(1)
 910 0132 0E94 0000 		call enc28j60Write
 911               	.L14:
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 913               	.LM39:
 914 0136 80E0      		ldi r24,lo8(0)
 915 0138 90E0      		ldi r25,hi8(0)
 916 013a 0E94 0000 		call vTaskDelay
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 918               	.LM40:
 919 013e 8AEE      		ldi r24,lo8(-22)
 920 0140 0E94 0000 		call enc28j60Read
 921 0144 80FD      		sbrc r24,0
 922 0146 00C0      		rjmp .L14
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 924               	.LM41:
 925 0148 82ED      		ldi r24,lo8(-46)
 926 014a 60E0      		ldi r22,lo8(0)
 927 014c 0E94 0000 		call enc28j60Write
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 929               	.LM42:
 930 0150 89ED      		ldi r24,lo8(-39)
 931 0152 0E94 0000 		call enc28j60Read
 932               	.LBE9:
 933               	.LBE8:
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 935               	.LM43:
 936 0156 91E0      		ldi r25,lo8(1)
 937 0158 8823      		tst r24
 938 015a 01F4      		brne .L15
 939 015c 90E0      		ldi r25,lo8(0)
 940               	.L15:
 333:../../freeRtos/Lib/enc28j60.c **** }
 942               	.LM44:
 943 015e 892F      		mov r24,r25
 944               	/* epilogue start */
 945 0160 0895      		ret
 947               	.Lscope9:
 949               		.stabd	78,0,0
 951               	.global	enc28j60getrev
 953               	enc28j60getrev:
 954               		.stabd	46,0,0
 324:../../freeRtos/Lib/enc28j60.c **** {
 956               	.LM45:
 957               	.LFBB10:
 958               	/* prologue: function */
 959               	/* frame size = 0 */
 960               	/* stack size = 0 */
 961               	.L__stack_usage = 0
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 963               	.LM46:
 964 0162 82E7      		ldi r24,lo8(114)
 965 0164 0E94 0000 		call enc28j60Read
 966               	/* epilogue start */
 326:../../freeRtos/Lib/enc28j60.c **** }
 968               	.LM47:
 969 0168 0895      		ret
 971               	.Lscope10:
 973               		.stabd	78,0,0
 977               	enc28j60PhyWrite:
 978               		.stabd	46,0,0
 224:../../freeRtos/Lib/enc28j60.c **** {
 980               	.LM48:
 981               	.LFBB11:
 982 016a 1F93      		push r17
 983 016c DF93      		push r29
 984 016e CF93      		push r28
 985 0170 0F92      		push __tmp_reg__
 986 0172 CDB7      		in r28,__SP_L__
 987 0174 DEB7      		in r29,__SP_H__
 988               	/* prologue: function */
 989               	/* frame size = 1 */
 990               	/* stack size = 4 */
 991               	.L__stack_usage = 4
 992 0176 982F      		mov r25,r24
 993 0178 162F      		mov r17,r22
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 995               	.LM49:
 996 017a 84ED      		ldi r24,lo8(-44)
 997 017c 692F      		mov r22,r25
 998 017e 7983      		std Y+1,r23
 999 0180 0E94 0000 		call enc28j60Write
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 1001               	.LM50:
 1002 0184 86ED      		ldi r24,lo8(-42)
 1003 0186 612F      		mov r22,r17
 1004 0188 0E94 0000 		call enc28j60Write
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 1006               	.LM51:
 1007 018c 87ED      		ldi r24,lo8(-41)
 1008 018e 7981      		ldd r23,Y+1
 1009 0190 672F      		mov r22,r23
 1010 0192 0E94 0000 		call enc28j60Write
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1012               	.LM52:
 1013 0196 00C0      		rjmp .L18
 1014               	.L19:
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 1016               	.LM53:
 1017 0198 80E0      		ldi r24,lo8(0)
 1018 019a 90E0      		ldi r25,hi8(0)
 1019 019c 0E94 0000 		call vTaskDelay
 1020               	.L18:
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1022               	.LM54:
 1023 01a0 8AEE      		ldi r24,lo8(-22)
 1024 01a2 0E94 0000 		call enc28j60Read
 1025 01a6 80FD      		sbrc r24,0
 1026 01a8 00C0      		rjmp .L19
 1027               	/* epilogue start */
 236:../../freeRtos/Lib/enc28j60.c **** }
 1029               	.LM55:
 1030 01aa 0F90      		pop __tmp_reg__
 1031 01ac CF91      		pop r28
 1032 01ae DF91      		pop r29
 1033 01b0 1F91      		pop r17
 1034 01b2 0895      		ret
 1036               	.Lscope11:
 1038               		.stabd	78,0,0
 1040               		.weak	nicPoll
 1042               	nicPoll:
 1043               		.stabd	46,0,0
 373:../../freeRtos/Lib/enc28j60.c **** {
 1045               	.LM56:
 1046               	.LFBB12:
 1047 01b4 CF92      		push r12
 1048 01b6 DF92      		push r13
 1049 01b8 EF92      		push r14
 1050 01ba FF92      		push r15
 1051 01bc 0F93      		push r16
 1052 01be 1F93      		push r17
 1053 01c0 CF93      		push r28
 1054 01c2 DF93      		push r29
 1055               	/* prologue: function */
 1056               	/* frame size = 0 */
 1057               	/* stack size = 8 */
 1058               	.L__stack_usage = 8
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 1060               	.LM57:
 1061 01c4 89E3      		ldi r24,lo8(57)
 1062 01c6 0E94 0000 		call enc28j60Read
 1063 01ca 8823      		tst r24
 1064 01cc 01F4      		brne .+2
 1065 01ce 00C0      		rjmp .L28
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 1067               	.LM58:
 1068 01d0 80E0      		ldi r24,lo8(0)
 1069 01d2 6091 0000 		lds r22,gNextPacketPtr
 1070 01d6 0E94 0000 		call enc28j60Write
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 1072               	.LM59:
 1073 01da 6091 0000 		lds r22,gNextPacketPtr+1
 1074 01de 81E0      		ldi r24,lo8(1)
 1075 01e0 0E94 0000 		call enc28j60Write
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1077               	.LM60:
 1078 01e4 8AE3      		ldi r24,lo8(58)
 1079 01e6 60E0      		ldi r22,lo8(0)
 1080 01e8 0E94 0000 		call enc28j60ReadOp
 1081 01ec C82F      		mov r28,r24
 1082 01ee D0E0      		ldi r29,lo8(0)
 1083 01f0 C093 0000 		sts gNextPacketPtr,r28
 1084 01f4 D093 0000 		sts gNextPacketPtr+1,r29
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1086               	.LM61:
 1087 01f8 8AE3      		ldi r24,lo8(58)
 1088 01fa 60E0      		ldi r22,lo8(0)
 1089 01fc 0E94 0000 		call enc28j60ReadOp
 1090 0200 382F      		mov r19,r24
 1091 0202 20E0      		ldi r18,lo8(0)
 1092 0204 C22B      		or r28,r18
 1093 0206 D32B      		or r29,r19
 1094 0208 C093 0000 		sts gNextPacketPtr,r28
 1095 020c D093 0000 		sts gNextPacketPtr+1,r29
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1097               	.LM62:
 1098 0210 8AE3      		ldi r24,lo8(58)
 1099 0212 60E0      		ldi r22,lo8(0)
 1100 0214 0E94 0000 		call enc28j60ReadOp
 1101 0218 C82E      		mov r12,r24
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1103               	.LM63:
 1104 021a 8AE3      		ldi r24,lo8(58)
 1105 021c 60E0      		ldi r22,lo8(0)
 1106 021e 0E94 0000 		call enc28j60ReadOp
 1107 0222 E82E      		mov r14,r24
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1109               	.LM64:
 1110 0224 8AE3      		ldi r24,lo8(58)
 1111 0226 60E0      		ldi r22,lo8(0)
 1112 0228 0E94 0000 		call enc28j60ReadOp
 1113 022c 082F      		mov r16,r24
 1114 022e 10E0      		ldi r17,lo8(0)
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 1116               	.LM65:
 1117 0230 8AE3      		ldi r24,lo8(58)
 1118 0232 60E0      		ldi r22,lo8(0)
 1119 0234 0E94 0000 		call enc28j60ReadOp
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 1121               	.LM66:
 1122 0238 4091 0000 		lds r20,nicState
 1123 023c 5091 0000 		lds r21,nicState+1
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 1125               	.LM67:
 1126 0240 382F      		mov r19,r24
 1127 0242 20E0      		ldi r18,lo8(0)
 1128 0244 022B      		or r16,r18
 1129 0246 132B      		or r17,r19
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 1131               	.LM68:
 1132 0248 07FF      		sbrs r16,7
 1133 024a 00C0      		rjmp .L29
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1135               	.LM69:
 1136 024c CC2D      		mov r28,r12
 1137 024e D0E0      		ldi r29,lo8(0)
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1139               	.LM70:
 1140 0250 3E2D      		mov r19,r14
 1141 0252 20E0      		ldi r18,lo8(0)
 1142 0254 C22B      		or r28,r18
 1143 0256 D32B      		or r29,r19
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 1145               	.LM71:
 1146 0258 4150      		subi r20,lo8(-(-1))
 1147 025a 5040      		sbci r21,hi8(-(-1))
 393:../../freeRtos/Lib/enc28j60.c ****   len-=4; //remove the CRC count
 1149               	.LM72:
 1150 025c 2497      		sbiw r28,4
 1151 025e 4C17      		cp r20,r28
 1152 0260 5D07      		cpc r21,r29
 1153 0262 00F4      		brsh .L23
 1154 0264 EA01      		movw r28,r20
 1155               	.L23:
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 1157               	.LM73:
 1158 0266 C090 0000 		lds r12,nicState+8
 1159 026a D090 0000 		lds r13,nicState+8+1
 1160               	.LBB10:
 1161               	.LBB11:
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 1163               	.LM74:
 1164 026e 0E94 0000 		call spiEnableEnc28j60
 125:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 1166               	.LM75:
 1167 0272 8AE3      		ldi r24,lo8(58)
 1168 0274 0E94 0000 		call spiSend
 1169 0278 7601      		movw r14,r12
 1170 027a 8E01      		movw r16,r28
 1171 027c 00C0      		rjmp .L24
 1172               	.L25:
 128:../../freeRtos/Lib/enc28j60.c ****     len--;
 1174               	.LM76:
 1175 027e 0150      		subi r16,lo8(-(-1))
 1176 0280 1040      		sbci r17,hi8(-(-1))
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSend(0x00);
 1178               	.LM77:
 1179 0282 80E0      		ldi r24,lo8(0)
 1180 0284 0E94 0000 		call spiSend
 1181 0288 F701      		movw r30,r14
 1182 028a 8193      		st Z+,r24
 1183 028c 7F01      		movw r14,r30
 1184               	.L24:
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 1186               	.LM78:
 1187 028e 0115      		cp r16,__zero_reg__
 1188 0290 1105      		cpc r17,__zero_reg__
 1189 0292 01F4      		brne .L25
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 1191               	.LM79:
 1192 0294 F601      		movw r30,r12
 1193 0296 EC0F      		add r30,r28
 1194 0298 FD1F      		adc r31,r29
 1195 029a 1082      		st Z,__zero_reg__
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 1197               	.LM80:
 1198 029c 0E94 0000 		call spiDisableEnc28j60
 1199 02a0 00C0      		rjmp .L22
 1200               	.L29:
 1201               	.LBE11:
 1202               	.LBE10:
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 1204               	.LM81:
 1205 02a2 C0E0      		ldi r28,lo8(0)
 1206 02a4 D0E0      		ldi r29,hi8(0)
 1207               	.L22:
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 1209               	.LM82:
 1210 02a6 8CE0      		ldi r24,lo8(12)
 1211 02a8 6091 0000 		lds r22,gNextPacketPtr
 1212 02ac 0E94 0000 		call enc28j60Write
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 1214               	.LM83:
 1215 02b0 6091 0000 		lds r22,gNextPacketPtr+1
 1216 02b4 8DE0      		ldi r24,lo8(13)
 1217 02b6 0E94 0000 		call enc28j60Write
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 1219               	.LM84:
 1220 02ba 6091 0000 		lds r22,gNextPacketPtr
 1221 02be 7091 0000 		lds r23,gNextPacketPtr+1
 1222 02c2 CB01      		movw r24,r22
 1223 02c4 0197      		sbiw r24,1
 1224 02c6 F9E1      		ldi r31,hi8(6655)
 1225 02c8 8F3F      		cpi r24,lo8(6655)
 1226 02ca 9F07      		cpc r25,r31
 1227 02cc 00F0      		brlo .L26
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 1229               	.LM85:
 1230 02ce 8CE0      		ldi r24,lo8(12)
 1231 02d0 6EEF      		ldi r22,lo8(-2)
 1232 02d2 0E94 0000 		call enc28j60Write
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 1234               	.LM86:
 1235 02d6 8DE0      		ldi r24,lo8(13)
 1236 02d8 69E1      		ldi r22,lo8(25)
 1237 02da 00C0      		rjmp .L30
 1238               	.L26:
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 1240               	.LM87:
 1241 02dc 6150      		subi r22,lo8(-(-1))
 1242 02de 8CE0      		ldi r24,lo8(12)
 1243 02e0 0E94 0000 		call enc28j60Write
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 1245               	.LM88:
 1246 02e4 2091 0000 		lds r18,gNextPacketPtr
 1247 02e8 3091 0000 		lds r19,gNextPacketPtr+1
 1248 02ec 2150      		subi r18,lo8(-(-1))
 1249 02ee 3040      		sbci r19,hi8(-(-1))
 1250 02f0 8DE0      		ldi r24,lo8(13)
 1251 02f2 632F      		mov r22,r19
 1252               	.L30:
 1253 02f4 0E94 0000 		call enc28j60Write
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 1255               	.LM89:
 1256 02f8 80E8      		ldi r24,lo8(-128)
 1257 02fa 6EE1      		ldi r22,lo8(30)
 1258 02fc 40E4      		ldi r20,lo8(64)
 1259 02fe 0E94 0000 		call enc28j60WriteOp
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 1261               	.LM90:
 1262 0302 00C0      		rjmp .L21
 1263               	.L28:
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 1265               	.LM91:
 1266 0304 C0E0      		ldi r28,lo8(0)
 1267 0306 D0E0      		ldi r29,hi8(0)
 1268               	.L21:
 437:../../freeRtos/Lib/enc28j60.c **** }
 1270               	.LM92:
 1271 0308 CE01      		movw r24,r28
 1272               	/* epilogue start */
 1273 030a DF91      		pop r29
 1274 030c CF91      		pop r28
 1275 030e 1F91      		pop r17
 1276 0310 0F91      		pop r16
 1277 0312 FF90      		pop r15
 1278 0314 EF90      		pop r14
 1279 0316 DF90      		pop r13
 1280 0318 CF90      		pop r12
 1281 031a 0895      		ret
 1283               	.Lscope12:
 1285               		.stabd	78,0,0
 1288               		.weak	nicSend
 1290               	nicSend:
 1291               		.stabd	46,0,0
 336:../../freeRtos/Lib/enc28j60.c **** {
 1293               	.LM93:
 1294               	.LFBB13:
 1295 031c 0F93      		push r16
 1296 031e 1F93      		push r17
 1297 0320 CF93      		push r28
 1298 0322 DF93      		push r29
 1299               	/* prologue: function */
 1300               	/* frame size = 0 */
 1301               	/* stack size = 4 */
 1302               	.L__stack_usage = 4
 1303 0324 EC01      		movw r28,r24
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 1305               	.LM94:
 1306 0326 00C0      		rjmp .L32
 1307               	.L34:
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 1309               	.LM95:
 1310 0328 8CE1      		ldi r24,lo8(28)
 1311 032a 0E94 0000 		call enc28j60Read
 1312 032e 81FF      		sbrs r24,1
 1313 0330 00C0      		rjmp .L33
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 1315               	.LM96:
 1316 0332 80E8      		ldi r24,lo8(-128)
 1317 0334 6FE1      		ldi r22,lo8(31)
 1318 0336 40E8      		ldi r20,lo8(-128)
 1319 0338 0E94 0000 		call enc28j60WriteOp
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 1321               	.LM97:
 1322 033c 80EA      		ldi r24,lo8(-96)
 1323 033e 6FE1      		ldi r22,lo8(31)
 1324 0340 40E8      		ldi r20,lo8(-128)
 1325 0342 0E94 0000 		call enc28j60WriteOp
 1326               	.L33:
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 1328               	.LM98:
 1329 0346 80E0      		ldi r24,lo8(0)
 1330 0348 90E0      		ldi r25,hi8(0)
 1331 034a 0E94 0000 		call vTaskDelay
 1332               	.L32:
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 1334               	.LM99:
 1335 034e 80E0      		ldi r24,lo8(0)
 1336 0350 6FE1      		ldi r22,lo8(31)
 1337 0352 0E94 0000 		call enc28j60ReadOp
 1338 0356 83FD      		sbrc r24,3
 1339 0358 00C0      		rjmp .L34
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 1341               	.LM100:
 1342 035a 82E0      		ldi r24,lo8(2)
 1343 035c 6FEF      		ldi r22,lo8(-1)
 1344 035e 0E94 0000 		call enc28j60Write
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 1346               	.LM101:
 1347 0362 83E0      		ldi r24,lo8(3)
 1348 0364 69E1      		ldi r22,lo8(25)
 1349 0366 0E94 0000 		call enc28j60Write
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 1351               	.LM102:
 1352 036a CE01      		movw r24,r28
 1353 036c 8150      		subi r24,lo8(-(-1))
 1354 036e 682F      		mov r22,r24
 1355 0370 86E0      		ldi r24,lo8(6)
 1356 0372 0E94 0000 		call enc28j60Write
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 1358               	.LM103:
 1359 0376 9E01      		movw r18,r28
 1360 0378 2150      		subi r18,lo8(-(6655))
 1361 037a 364E      		sbci r19,hi8(-(6655))
 1362 037c 87E0      		ldi r24,lo8(7)
 1363 037e 632F      		mov r22,r19
 1364 0380 0E94 0000 		call enc28j60Write
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 1366               	.LM104:
 1367 0384 8AE7      		ldi r24,lo8(122)
 1368 0386 60E0      		ldi r22,lo8(0)
 1369 0388 40E0      		ldi r20,lo8(0)
 1370 038a 0E94 0000 		call enc28j60WriteOp
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 1372               	.LM105:
 1373 038e 0091 0000 		lds r16,nicState+8
 1374 0392 1091 0000 		lds r17,nicState+8+1
 1375               	.LBB12:
 1376               	.LBB13:
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 1378               	.LM106:
 1379 0396 0E94 0000 		call spiEnableEnc28j60
 143:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 1381               	.LM107:
 1382 039a 8AE7      		ldi r24,lo8(122)
 1383 039c 00C0      		rjmp .L37
 1384               	.L36:
 146:../../freeRtos/Lib/enc28j60.c ****     len--;
 1386               	.LM108:
 1387 039e 2197      		sbiw r28,1
 147:../../freeRtos/Lib/enc28j60.c ****     spiSend(*data);       // write data
 1389               	.LM109:
 1390 03a0 F801      		movw r30,r16
 1391 03a2 8191      		ld r24,Z+
 1392 03a4 8F01      		movw r16,r30
 1393               	.L37:
 1394 03a6 0E94 0000 		call spiSend
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 1396               	.LM110:
 1397 03aa 2097      		sbiw r28,0
 1398 03ac 01F4      		brne .L36
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 1400               	.LM111:
 1401 03ae 0E94 0000 		call spiDisableEnc28j60
 1402               	.LBE13:
 1403               	.LBE12:
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 1405               	.LM112:
 1406 03b2 80E8      		ldi r24,lo8(-128)
 1407 03b4 6FE1      		ldi r22,lo8(31)
 1408 03b6 48E0      		ldi r20,lo8(8)
 1409 03b8 0E94 0000 		call enc28j60WriteOp
 1410               	/* epilogue start */
 360:../../freeRtos/Lib/enc28j60.c **** }
 1412               	.LM113:
 1413 03bc DF91      		pop r29
 1414 03be CF91      		pop r28
 1415 03c0 1F91      		pop r17
 1416 03c2 0F91      		pop r16
 1417 03c4 0895      		ret
 1422               	.Lscope13:
 1424               		.stabd	78,0,0
 1427               		.weak	nicSetMacAddress
 1429               	nicSetMacAddress:
 1430               		.stabd	46,0,0
 441:../../freeRtos/Lib/enc28j60.c **** 
 442:../../freeRtos/Lib/enc28j60.c **** void     nicSetMacAddress(uint8_t* macaddr)
 443:../../freeRtos/Lib/enc28j60.c **** {
 1432               	.LM114:
 1433               	.LFBB14:
 1434 03c6 CF93      		push r28
 1435 03c8 DF93      		push r29
 1436               	/* prologue: function */
 1437               	/* frame size = 0 */
 1438               	/* stack size = 2 */
 1439               	.L__stack_usage = 2
 1440 03ca EC01      		movw r28,r24
 444:../../freeRtos/Lib/enc28j60.c **** //NOTE: MAC address in ENC28J60 is byte-backward
 445:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR5, macaddr[0]); 
 1442               	.LM115:
 1443 03cc 84EE      		ldi r24,lo8(-28)
 1444 03ce 6881      		ld r22,Y
 1445 03d0 0E94 0000 		call enc28j60Write
 446:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR4, macaddr[1]);
 1447               	.LM116:
 1448 03d4 85EE      		ldi r24,lo8(-27)
 1449 03d6 6981      		ldd r22,Y+1
 1450 03d8 0E94 0000 		call enc28j60Write
 447:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR3, macaddr[2]);
 1452               	.LM117:
 1453 03dc 82EE      		ldi r24,lo8(-30)
 1454 03de 6A81      		ldd r22,Y+2
 1455 03e0 0E94 0000 		call enc28j60Write
 448:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR2, macaddr[3]);
 1457               	.LM118:
 1458 03e4 83EE      		ldi r24,lo8(-29)
 1459 03e6 6B81      		ldd r22,Y+3
 1460 03e8 0E94 0000 		call enc28j60Write
 449:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR1, macaddr[4]);
 1462               	.LM119:
 1463 03ec 80EE      		ldi r24,lo8(-32)
 1464 03ee 6C81      		ldd r22,Y+4
 1465 03f0 0E94 0000 		call enc28j60Write
 450:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1467               	.LM120:
 1468 03f4 81EE      		ldi r24,lo8(-31)
 1469 03f6 6D81      		ldd r22,Y+5
 1470 03f8 0E94 0000 		call enc28j60Write
 1471               	/* epilogue start */
 451:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 452:../../freeRtos/Lib/enc28j60.c **** }
 1473               	.LM121:
 1474 03fc DF91      		pop r29
 1475 03fe CF91      		pop r28
 1476 0400 0895      		ret
 1478               	.Lscope14:
 1480               		.stabd	78,0,0
 1482               		.weak	nicMacInit
 1484               	nicMacInit:
 1485               		.stabd	46,0,0
  77:../../freeRtos/Lib/enc28j60.c **** { 
 1487               	.LM122:
 1488               	.LFBB15:
 1489               	/* prologue: function */
 1490               	/* frame size = 0 */
 1491               	/* stack size = 0 */
 1492               	.L__stack_usage = 0
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1494               	.LM123:
 1495 0402 85E0      		ldi r24,lo8(5)
 1496 0404 90E0      		ldi r25,hi8(5)
 1497 0406 0E94 0000 		call vTaskDelay
 1498               	.LBB16:
 1499               	.LBB17:
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1501               	.LM124:
 1502 040a 85E0      		ldi r24,lo8(5)
 1503 040c 90E0      		ldi r25,hi8(5)
 1504 040e 0E94 0000 		call vTaskDelay
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1506               	.LM125:
 1507 0412 85E0      		ldi r24,lo8(5)
 1508 0414 90E0      		ldi r25,hi8(5)
 1509 0416 0E94 0000 		call vTaskDelay
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 1511               	.LM126:
 1512 041a 1092 0000 		sts gNextPacketPtr,__zero_reg__
 1513 041e 1092 0000 		sts gNextPacketPtr+1,__zero_reg__
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 1515               	.LM127:
 1516 0422 88E0      		ldi r24,lo8(8)
 1517 0424 60E0      		ldi r22,lo8(0)
 1518 0426 0E94 0000 		call enc28j60Write
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 1520               	.LM128:
 1521 042a 89E0      		ldi r24,lo8(9)
 1522 042c 60E0      		ldi r22,lo8(0)
 1523 042e 0E94 0000 		call enc28j60Write
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 1525               	.LM129:
 1526 0432 8CE0      		ldi r24,lo8(12)
 1527 0434 60E0      		ldi r22,lo8(0)
 1528 0436 0E94 0000 		call enc28j60Write
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 1530               	.LM130:
 1531 043a 8DE0      		ldi r24,lo8(13)
 1532 043c 60E0      		ldi r22,lo8(0)
 1533 043e 0E94 0000 		call enc28j60Write
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 1535               	.LM131:
 1536 0442 8AE0      		ldi r24,lo8(10)
 1537 0444 6EEF      		ldi r22,lo8(-2)
 1538 0446 0E94 0000 		call enc28j60Write
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 1540               	.LM132:
 1541 044a 8BE0      		ldi r24,lo8(11)
 1542 044c 69E1      		ldi r22,lo8(25)
 1543 044e 0E94 0000 		call enc28j60Write
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 1545               	.LM133:
 1546 0452 84E0      		ldi r24,lo8(4)
 1547 0454 6FEF      		ldi r22,lo8(-1)
 1548 0456 0E94 0000 		call enc28j60Write
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 1550               	.LM134:
 1551 045a 85E0      		ldi r24,lo8(5)
 1552 045c 69E1      		ldi r22,lo8(25)
 1553 045e 0E94 0000 		call enc28j60Write
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 1555               	.LM135:
 1556 0462 86E0      		ldi r24,lo8(6)
 1557 0464 6FEF      		ldi r22,lo8(-1)
 1558 0466 0E94 0000 		call enc28j60Write
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 1560               	.LM136:
 1561 046a 87E0      		ldi r24,lo8(7)
 1562 046c 6FE1      		ldi r22,lo8(31)
 1563 046e 0E94 0000 		call enc28j60Write
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 1565               	.LM137:
 1566 0472 88E3      		ldi r24,lo8(56)
 1567 0474 62EB      		ldi r22,lo8(-78)
 1568 0476 0E94 0000 		call enc28j60Write
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 1570               	.LM138:
 1571 047a 88E2      		ldi r24,lo8(40)
 1572 047c 6FE3      		ldi r22,lo8(63)
 1573 047e 0E94 0000 		call enc28j60Write
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 1575               	.LM139:
 1576 0482 89E2      		ldi r24,lo8(41)
 1577 0484 60E3      		ldi r22,lo8(48)
 1578 0486 0E94 0000 		call enc28j60Write
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 1580               	.LM140:
 1581 048a 80E3      		ldi r24,lo8(48)
 1582 048c 69EF      		ldi r22,lo8(-7)
 1583 048e 0E94 0000 		call enc28j60Write
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 1585               	.LM141:
 1586 0492 81E3      		ldi r24,lo8(49)
 1587 0494 67EF      		ldi r22,lo8(-9)
 1588 0496 0E94 0000 		call enc28j60Write
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 1590               	.LM142:
 1591 049a 80EC      		ldi r24,lo8(-64)
 1592 049c 6DE0      		ldi r22,lo8(13)
 1593 049e 0E94 0000 		call enc28j60Write
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 1595               	.LM143:
 1596 04a2 81EC      		ldi r24,lo8(-63)
 1597 04a4 60E0      		ldi r22,lo8(0)
 1598 04a6 0E94 0000 		call enc28j60Write
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 1600               	.LM144:
 1601 04aa 80E8      		ldi r24,lo8(-128)
 1602 04ac 62EC      		ldi r22,lo8(-62)
 1603 04ae 42E3      		ldi r20,lo8(50)
 1604 04b0 0E94 0000 		call enc28j60WriteOp
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 1606               	.LM145:
 1607 04b4 86EC      		ldi r24,lo8(-58)
 1608 04b6 62E1      		ldi r22,lo8(18)
 1609 04b8 0E94 0000 		call enc28j60Write
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 1611               	.LM146:
 1612 04bc 87EC      		ldi r24,lo8(-57)
 1613 04be 6CE0      		ldi r22,lo8(12)
 1614 04c0 0E94 0000 		call enc28j60Write
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 1616               	.LM147:
 1617 04c4 84EC      		ldi r24,lo8(-60)
 1618 04c6 62E1      		ldi r22,lo8(18)
 1619 04c8 0E94 0000 		call enc28j60Write
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 1621               	.LM148:
 1622 04cc 8AEC      		ldi r24,lo8(-54)
 1623 04ce 6CED      		ldi r22,lo8(-36)
 1624 04d0 0E94 0000 		call enc28j60Write
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 1626               	.LM149:
 1627 04d4 8BEC      		ldi r24,lo8(-53)
 1628 04d6 65E0      		ldi r22,lo8(5)
 1629 04d8 0E94 0000 		call enc28j60Write
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 1631               	.LM150:
 1632 04dc 80E0      		ldi r24,lo8(nicState+2)
 1633 04de 90E0      		ldi r25,hi8(nicState+2)
 1634 04e0 0E94 0000 		call nicSetMacAddress
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 1636               	.LM151:
 1637 04e4 80E1      		ldi r24,lo8(16)
 1638 04e6 60E0      		ldi r22,lo8(256)
 1639 04e8 71E0      		ldi r23,hi8(256)
 1640 04ea 0E94 0000 		call enc28j60PhyWrite
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 1642               	.LM152:
 1643 04ee 8FE1      		ldi r24,lo8(31)
 1644 04f0 0E94 0000 		call enc28j60SetBank
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 1646               	.LM153:
 1647 04f4 80E8      		ldi r24,lo8(-128)
 1648 04f6 6BE1      		ldi r22,lo8(27)
 1649 04f8 40EC      		ldi r20,lo8(-64)
 1650 04fa 0E94 0000 		call enc28j60WriteOp
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 1652               	.LM154:
 1653 04fe 80E8      		ldi r24,lo8(-128)
 1654 0500 6FE1      		ldi r22,lo8(31)
 1655 0502 44E0      		ldi r20,lo8(4)
 1656 0504 0E94 0000 		call enc28j60WriteOp
 1657               	.LBE17:
 1658               	.LBE16:
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1660               	.LM155:
 1661 0508 85E0      		ldi r24,lo8(5)
 1662 050a 90E0      		ldi r25,hi8(5)
 1663 050c 0E94 0000 		call vTaskDelay
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
 1665               	.LM156:
 1666 0510 84E1      		ldi r24,lo8(20)
 1667 0512 66E7      		ldi r22,lo8(1142)
 1668 0514 74E0      		ldi r23,hi8(1142)
 1669 0516 0E94 0000 		call enc28j60PhyWrite
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
 1671               	.LM157:
 1672 051a 82E0      		ldi r24,lo8(2)
 1673 051c 90E0      		ldi r25,hi8(2)
 1674 051e 0E94 0000 		call vTaskDelay
 1675               	/* epilogue start */
  84:../../freeRtos/Lib/enc28j60.c **** }
 1677               	.LM158:
 1678 0522 0895      		ret
 1680               	.Lscope15:
 1682               		.stabd	78,0,0
 1685               		.weak	nicGetMacAddress
 1687               	nicGetMacAddress:
 1688               		.stabd	46,0,0
 453:../../freeRtos/Lib/enc28j60.c **** 
 454:../../freeRtos/Lib/enc28j60.c **** void     nicGetMacAddress(uint8_t* macaddr)
 455:../../freeRtos/Lib/enc28j60.c **** {
 1690               	.LM159:
 1691               	.LFBB16:
 1692 0524 CF93      		push r28
 1693 0526 DF93      		push r29
 1694               	/* prologue: function */
 1695               	/* frame size = 0 */
 1696               	/* stack size = 2 */
 1697               	.L__stack_usage = 2
 1698 0528 EC01      		movw r28,r24
 456:../../freeRtos/Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0); 
 1700               	.LM160:
 1701 052a 81EE      		ldi r24,lo8(-31)
 1702 052c 0E94 0000 		call enc28j60Read
 1703 0530 8D83      		std Y+5,r24
 457:../../freeRtos/Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1); 
 1705               	.LM161:
 1706 0532 80EE      		ldi r24,lo8(-32)
 1707 0534 0E94 0000 		call enc28j60Read
 1708 0538 8C83      		std Y+4,r24
 458:../../freeRtos/Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2); 
 1710               	.LM162:
 1711 053a 83EE      		ldi r24,lo8(-29)
 1712 053c 0E94 0000 		call enc28j60Read
 1713 0540 8B83      		std Y+3,r24
 459:../../freeRtos/Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3); 
 1715               	.LM163:
 1716 0542 82EE      		ldi r24,lo8(-30)
 1717 0544 0E94 0000 		call enc28j60Read
 1718 0548 8A83      		std Y+2,r24
 460:../../freeRtos/Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4); 
 1720               	.LM164:
 1721 054a 85EE      		ldi r24,lo8(-27)
 1722 054c 0E94 0000 		call enc28j60Read
 1723 0550 8983      		std Y+1,r24
 461:../../freeRtos/Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5); 
 1725               	.LM165:
 1726 0552 84EE      		ldi r24,lo8(-28)
 1727 0554 0E94 0000 		call enc28j60Read
 1728 0558 8883      		st Y,r24
 1729               	/* epilogue start */
 462:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 463:../../freeRtos/Lib/enc28j60.c **** }
 1731               	.LM166:
 1732 055a DF91      		pop r29
 1733 055c CF91      		pop r28
 1734 055e 0895      		ret
 1736               	.Lscope16:
 1738               		.stabd	78,0,0
 1741               		.weak	nicRegDump
 1743               	nicRegDump:
 1744               		.stabd	46,0,0
 464:../../freeRtos/Lib/enc28j60.c **** 
 465:../../freeRtos/Lib/enc28j60.c **** void     nicRegDump(FILE *stream)
 466:../../freeRtos/Lib/enc28j60.c **** {
 1746               	.LM167:
 1747               	.LFBB17:
 1748 0560 CF93      		push r28
 1749 0562 DF93      		push r29
 1750               	/* prologue: function */
 1751               	/* frame size = 0 */
 1752               	/* stack size = 2 */
 1753               	.L__stack_usage = 2
 1754 0564 EC01      		movw r28,r24
 467:../../freeRtos/Lib/enc28j60.c ****   uint8_t temp;
 468:../../freeRtos/Lib/enc28j60.c ****   fprintf_P(stream, PSTR("ENC28j60 stan rejestrow:\r\n"));
 1756               	.LM168:
 1757 0566 00D0      		rcall .
 1758 0568 0F92      		push __tmp_reg__
 1759 056a ADB7      		in r26,__SP_L__
 1760 056c BEB7      		in r27,__SP_H__
 1761 056e 1196      		adiw r26,1
 1762 0570 8D93      		st X+,r24
 1763 0572 9C93      		st X,r25
 1764 0574 1297      		sbiw r26,1+1
 1765 0576 80E0      		ldi r24,lo8(__c.5195)
 1766 0578 90E0      		ldi r25,hi8(__c.5195)
 1767 057a 1396      		adiw r26,3
 1768 057c 8D93      		st X+,r24
 1769 057e 9C93      		st X,r25
 1770 0580 1497      		sbiw r26,3+1
 1771 0582 0E94 0000 		call fprintf_P
 469:../../freeRtos/Lib/enc28j60.c **** 
 470:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR0); fprintf_P(stream, PSTR("\tMAADR0 0x%x\r\n"), temp);
 1773               	.LM169:
 1774 0586 0F90      		pop __tmp_reg__
 1775 0588 0F90      		pop __tmp_reg__
 1776 058a 0F90      		pop __tmp_reg__
 1777 058c 0F90      		pop __tmp_reg__
 1778 058e 81EE      		ldi r24,lo8(-31)
 1779 0590 0E94 0000 		call enc28j60Read
 1780 0594 00D0      		rcall .
 1781 0596 00D0      		rcall .
 1782 0598 EDB7      		in r30,__SP_L__
 1783 059a FEB7      		in r31,__SP_H__
 1784 059c 3196      		adiw r30,1
 1785 059e ADB7      		in r26,__SP_L__
 1786 05a0 BEB7      		in r27,__SP_H__
 1787 05a2 1196      		adiw r26,1
 1788 05a4 CD93      		st X+,r28
 1789 05a6 DC93      		st X,r29
 1790 05a8 1297      		sbiw r26,1+1
 1791 05aa 20E0      		ldi r18,lo8(__c.5197)
 1792 05ac 30E0      		ldi r19,hi8(__c.5197)
 1793 05ae 2283      		std Z+2,r18
 1794 05b0 3383      		std Z+3,r19
 1795 05b2 8483      		std Z+4,r24
 1796 05b4 1582      		std Z+5,__zero_reg__
 1797 05b6 0E94 0000 		call fprintf_P
 471:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR1); fprintf_P(stream, PSTR("\tMAADR1 0x%x\r\n"), temp);
 1799               	.LM170:
 1800 05ba EDB7      		in r30,__SP_L__
 1801 05bc FEB7      		in r31,__SP_H__
 1802 05be 3696      		adiw r30,6
 1803 05c0 EDBF      		out __SP_L__,r30
 1804 05c2 FEBF      		out __SP_H__,r31
 1805 05c4 80EE      		ldi r24,lo8(-32)
 1806 05c6 0E94 0000 		call enc28j60Read
 1807 05ca 00D0      		rcall .
 1808 05cc 00D0      		rcall .
 1809 05ce EDB7      		in r30,__SP_L__
 1810 05d0 FEB7      		in r31,__SP_H__
 1811 05d2 3196      		adiw r30,1
 1812 05d4 ADB7      		in r26,__SP_L__
 1813 05d6 BEB7      		in r27,__SP_H__
 1814 05d8 1196      		adiw r26,1
 1815 05da CD93      		st X+,r28
 1816 05dc DC93      		st X,r29
 1817 05de 1297      		sbiw r26,1+1
 1818 05e0 20E0      		ldi r18,lo8(__c.5199)
 1819 05e2 30E0      		ldi r19,hi8(__c.5199)
 1820 05e4 2283      		std Z+2,r18
 1821 05e6 3383      		std Z+3,r19
 1822 05e8 8483      		std Z+4,r24
 1823 05ea 1582      		std Z+5,__zero_reg__
 1824 05ec 0E94 0000 		call fprintf_P
 472:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR2); fprintf_P(stream, PSTR("\tMAADR2 0x%x\r\n"), temp);
 1826               	.LM171:
 1827 05f0 EDB7      		in r30,__SP_L__
 1828 05f2 FEB7      		in r31,__SP_H__
 1829 05f4 3696      		adiw r30,6
 1830 05f6 EDBF      		out __SP_L__,r30
 1831 05f8 FEBF      		out __SP_H__,r31
 1832 05fa 83EE      		ldi r24,lo8(-29)
 1833 05fc 0E94 0000 		call enc28j60Read
 1834 0600 00D0      		rcall .
 1835 0602 00D0      		rcall .
 1836 0604 EDB7      		in r30,__SP_L__
 1837 0606 FEB7      		in r31,__SP_H__
 1838 0608 3196      		adiw r30,1
 1839 060a ADB7      		in r26,__SP_L__
 1840 060c BEB7      		in r27,__SP_H__
 1841 060e 1196      		adiw r26,1
 1842 0610 CD93      		st X+,r28
 1843 0612 DC93      		st X,r29
 1844 0614 1297      		sbiw r26,1+1
 1845 0616 20E0      		ldi r18,lo8(__c.5201)
 1846 0618 30E0      		ldi r19,hi8(__c.5201)
 1847 061a 2283      		std Z+2,r18
 1848 061c 3383      		std Z+3,r19
 1849 061e 8483      		std Z+4,r24
 1850 0620 1582      		std Z+5,__zero_reg__
 1851 0622 0E94 0000 		call fprintf_P
 473:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR3); fprintf_P(stream, PSTR("\tMAADR3 0x%x\r\n"), temp);
 1853               	.LM172:
 1854 0626 EDB7      		in r30,__SP_L__
 1855 0628 FEB7      		in r31,__SP_H__
 1856 062a 3696      		adiw r30,6
 1857 062c EDBF      		out __SP_L__,r30
 1858 062e FEBF      		out __SP_H__,r31
 1859 0630 82EE      		ldi r24,lo8(-30)
 1860 0632 0E94 0000 		call enc28j60Read
 1861 0636 00D0      		rcall .
 1862 0638 00D0      		rcall .
 1863 063a EDB7      		in r30,__SP_L__
 1864 063c FEB7      		in r31,__SP_H__
 1865 063e 3196      		adiw r30,1
 1866 0640 ADB7      		in r26,__SP_L__
 1867 0642 BEB7      		in r27,__SP_H__
 1868 0644 1196      		adiw r26,1
 1869 0646 CD93      		st X+,r28
 1870 0648 DC93      		st X,r29
 1871 064a 1297      		sbiw r26,1+1
 1872 064c 20E0      		ldi r18,lo8(__c.5203)
 1873 064e 30E0      		ldi r19,hi8(__c.5203)
 1874 0650 2283      		std Z+2,r18
 1875 0652 3383      		std Z+3,r19
 1876 0654 8483      		std Z+4,r24
 1877 0656 1582      		std Z+5,__zero_reg__
 1878 0658 0E94 0000 		call fprintf_P
 474:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR4); fprintf_P(stream, PSTR("\tMAADR4 0x%x\r\n"), temp);
 1880               	.LM173:
 1881 065c EDB7      		in r30,__SP_L__
 1882 065e FEB7      		in r31,__SP_H__
 1883 0660 3696      		adiw r30,6
 1884 0662 EDBF      		out __SP_L__,r30
 1885 0664 FEBF      		out __SP_H__,r31
 1886 0666 85EE      		ldi r24,lo8(-27)
 1887 0668 0E94 0000 		call enc28j60Read
 1888 066c 00D0      		rcall .
 1889 066e 00D0      		rcall .
 1890 0670 EDB7      		in r30,__SP_L__
 1891 0672 FEB7      		in r31,__SP_H__
 1892 0674 3196      		adiw r30,1
 1893 0676 ADB7      		in r26,__SP_L__
 1894 0678 BEB7      		in r27,__SP_H__
 1895 067a 1196      		adiw r26,1
 1896 067c CD93      		st X+,r28
 1897 067e DC93      		st X,r29
 1898 0680 1297      		sbiw r26,1+1
 1899 0682 20E0      		ldi r18,lo8(__c.5205)
 1900 0684 30E0      		ldi r19,hi8(__c.5205)
 1901 0686 2283      		std Z+2,r18
 1902 0688 3383      		std Z+3,r19
 1903 068a 8483      		std Z+4,r24
 1904 068c 1582      		std Z+5,__zero_reg__
 1905 068e 0E94 0000 		call fprintf_P
 475:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR5); fprintf_P(stream, PSTR("\tMAADR5 0x%x\r\n"), temp);
 1907               	.LM174:
 1908 0692 EDB7      		in r30,__SP_L__
 1909 0694 FEB7      		in r31,__SP_H__
 1910 0696 3696      		adiw r30,6
 1911 0698 EDBF      		out __SP_L__,r30
 1912 069a FEBF      		out __SP_H__,r31
 1913 069c 84EE      		ldi r24,lo8(-28)
 1914 069e 0E94 0000 		call enc28j60Read
 1915 06a2 00D0      		rcall .
 1916 06a4 00D0      		rcall .
 1917 06a6 EDB7      		in r30,__SP_L__
 1918 06a8 FEB7      		in r31,__SP_H__
 1919 06aa 3196      		adiw r30,1
 1920 06ac ADB7      		in r26,__SP_L__
 1921 06ae BEB7      		in r27,__SP_H__
 1922 06b0 1196      		adiw r26,1
 1923 06b2 CD93      		st X+,r28
 1924 06b4 DC93      		st X,r29
 1925 06b6 1297      		sbiw r26,1+1
 1926 06b8 20E0      		ldi r18,lo8(__c.5207)
 1927 06ba 30E0      		ldi r19,hi8(__c.5207)
 1928 06bc 2283      		std Z+2,r18
 1929 06be 3383      		std Z+3,r19
 1930 06c0 8483      		std Z+4,r24
 1931 06c2 1582      		std Z+5,__zero_reg__
 1932 06c4 0E94 0000 		call fprintf_P
 1933 06c8 EDB7      		in r30,__SP_L__
 1934 06ca FEB7      		in r31,__SP_H__
 1935 06cc 3696      		adiw r30,6
 1936 06ce EDBF      		out __SP_L__,r30
 1937 06d0 FEBF      		out __SP_H__,r31
 1938               	/* epilogue start */
 476:../../freeRtos/Lib/enc28j60.c **** }
 1940               	.LM175:
 1941 06d2 DF91      		pop r29
 1942 06d4 CF91      		pop r28
 1943 06d6 0895      		ret
 1945               	.Lscope17:
 1947               		.stabd	78,0,0
 1948               		.comm klastry,128,1
 1949               		.comm wwwport,1,1
 1950               		.comm rollers,2,1
 1951               		.comm xSemaphoreSpiSS,2,1
 1952               		.comm portA,1,1
 1953               		.comm portB,1,1
 1954               		.comm lockSensors,2,1
 1955               		.comm xSemaphoreRs485,2,1
 1956               		.comm nicState,14,1
 1957               		.comm plen,2,1
 1958               		.comm IpMyConfig,15,1
 1959               		.comm arpDebug,2,1
 1960               		.comm arpDebugLevel,1,1
 1961               		.comm icmpDebug,2,1
 1962               		.comm icmpDebugLevel,1,1
 1963               		.comm udpSocket,2,1
 1964               		.comm udpDbgStream,2,1
 1965               		.comm udpDbgLevel,1,1
 1966               		.comm tcpDebugStream,2,1
 1967               		.comm tcpDebugLevel,1,1
 1968               		.comm sockets,2,1
 1969               		.comm czasRtc,7,1
 1970               		.section	.progmem.data,"a",@progbits
 1973               	__c.5207:
 1974 0000 094D 4141 		.string	"\tMAADR5 0x%x\r\n"
 1974      4452 3520 
 1974      3078 2578 
 1974      0D0A 00
 1977               	__c.5205:
 1978 000f 094D 4141 		.string	"\tMAADR4 0x%x\r\n"
 1978      4452 3420 
 1978      3078 2578 
 1978      0D0A 00
 1981               	__c.5203:
 1982 001e 094D 4141 		.string	"\tMAADR3 0x%x\r\n"
 1982      4452 3320 
 1982      3078 2578 
 1982      0D0A 00
 1985               	__c.5201:
 1986 002d 094D 4141 		.string	"\tMAADR2 0x%x\r\n"
 1986      4452 3220 
 1986      3078 2578 
 1986      0D0A 00
 1989               	__c.5199:
 1990 003c 094D 4141 		.string	"\tMAADR1 0x%x\r\n"
 1990      4452 3120 
 1990      3078 2578 
 1990      0D0A 00
 1993               	__c.5197:
 1994 004b 094D 4141 		.string	"\tMAADR0 0x%x\r\n"
 1994      4452 3020 
 1994      3078 2578 
 1994      0D0A 00
 1997               	__c.5195:
 1998 005a 454E 4332 		.string	"ENC28j60 stan rejestrow:\r\n"
 1998      386A 3630 
 1998      2073 7461 
 1998      6E20 7265 
 1998      6A65 7374 
 1999               		.lcomm Enc28j60Bank,1
 2000               		.lcomm gNextPacketPtr,2
 2025               		.weak	spiSend
 2026               		.text
 2028               	.Letext0:
 2029               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 enc28j60.c
     /tmp/ccUhmcFo.s:2      *ABS*:0000003f __SREG__
     /tmp/ccUhmcFo.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccUhmcFo.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccUhmcFo.s:5      *ABS*:00000034 __CCP__
     /tmp/ccUhmcFo.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccUhmcFo.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccUhmcFo.s:559    .text:00000000 spiEnableEnc28j60
     /tmp/ccUhmcFo.s:579    .text:00000002 spiDisableEnc28j60
     /tmp/ccUhmcFo.s:601    .text:00000004 enc28j60WriteOp
     /tmp/ccUhmcFo.s:654    .text:00000040 enc28j60SetBank
                             .bss:00000000 Enc28j60Bank
     /tmp/ccUhmcFo.s:715    .text:00000088 enc28j60Write
     /tmp/ccUhmcFo.s:757    .text:000000b0 enc28j60ReadOp
     /tmp/ccUhmcFo.s:820    .text:000000f2 enc28j60Read
     /tmp/ccUhmcFo.s:858    .text:00000114 enc28j60hasRxPkt
     /tmp/ccUhmcFo.s:890    .text:00000126 enc28j60linkup
     /tmp/ccUhmcFo.s:953    .text:00000162 enc28j60getrev
     /tmp/ccUhmcFo.s:977    .text:0000016a enc28j60PhyWrite
     /tmp/ccUhmcFo.s:1042   .text:000001b4 nicPoll
     /tmp/ccUhmcFo.s:1999   .bss:00000001 gNextPacketPtr
                            *COM*:0000000e nicState
     /tmp/ccUhmcFo.s:1290   .text:0000031c nicSend
     /tmp/ccUhmcFo.s:1429   .text:000003c6 nicSetMacAddress
     /tmp/ccUhmcFo.s:1484   .text:00000402 nicMacInit
     /tmp/ccUhmcFo.s:1687   .text:00000524 nicGetMacAddress
     /tmp/ccUhmcFo.s:1743   .text:00000560 nicRegDump
     /tmp/ccUhmcFo.s:1997   .progmem.data:0000005a __c.5195
     /tmp/ccUhmcFo.s:1993   .progmem.data:0000004b __c.5197
     /tmp/ccUhmcFo.s:1989   .progmem.data:0000003c __c.5199
     /tmp/ccUhmcFo.s:1985   .progmem.data:0000002d __c.5201
     /tmp/ccUhmcFo.s:1981   .progmem.data:0000001e __c.5203
     /tmp/ccUhmcFo.s:1977   .progmem.data:0000000f __c.5205
     /tmp/ccUhmcFo.s:1973   .progmem.data:00000000 __c.5207
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:00000002 plen
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000007 czasRtc

UNDEFINED SYMBOLS
spiSend
vTaskDelay
fprintf_P
__do_clear_bss
