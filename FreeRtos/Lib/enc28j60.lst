   1               		.file	"enc28j60.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 269               		.weak	spiEnableEnc28j60
 271               	spiEnableEnc28j60:
 272               		.stabd	46,0,0
   1:../../freeRtos/Lib/enc28j60.c **** /*********************************************
   2:../../freeRtos/Lib/enc28j60.c ****  * vim:sw=8:ts=8:si:et
   3:../../freeRtos/Lib/enc28j60.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:../../freeRtos/Lib/enc28j60.c ****  * Author: Guido Socher 
   5:../../freeRtos/Lib/enc28j60.c ****  * Copyright: GPL V2
   6:../../freeRtos/Lib/enc28j60.c ****  * http://www.gnu.org/licenses/gpl.html
   7:../../freeRtos/Lib/enc28j60.c ****  *
   8:../../freeRtos/Lib/enc28j60.c ****  * Based on the enc28j60.c file from the AVRlib library by Pascal Stang
   9:../../freeRtos/Lib/enc28j60.c ****  * For AVRlib See http://www.procyonengineering.com/
  10:../../freeRtos/Lib/enc28j60.c ****  * Used with explicit permission of Pascal Stang.
  11:../../freeRtos/Lib/enc28j60.c ****  *
  12:../../freeRtos/Lib/enc28j60.c ****  * Title: Microchip ENC28J60 Ethernet Interface Driver
  13:../../freeRtos/Lib/enc28j60.c ****  * Chip type           : ATMEGA88 with ENC28J60
  14:../../freeRtos/Lib/enc28j60.c ****  *********************************************/
  15:../../freeRtos/Lib/enc28j60.c **** 
  16:../../freeRtos/Lib/enc28j60.c **** #include "enc28j60.h"
  17:../../freeRtos/Lib/enc28j60.c **** 
  18:../../freeRtos/Lib/enc28j60.c **** 
  19:../../freeRtos/Lib/enc28j60.c **** static uint8_t Enc28j60Bank;
  20:../../freeRtos/Lib/enc28j60.c **** static uint16_t gNextPacketPtr;
  21:../../freeRtos/Lib/enc28j60.c **** 
  22:../../freeRtos/Lib/enc28j60.c **** 
  23:../../freeRtos/Lib/enc28j60.c **** /**
  24:../../freeRtos/Lib/enc28j60.c ****  * Initialize enc28j60
  25:../../freeRtos/Lib/enc28j60.c ****  * @param *macaddr - pointer to the mac address (6 bytes)
  26:../../freeRtos/Lib/enc28j60.c ****  */
  27:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Init(uint8_t* macaddr);
  28:../../freeRtos/Lib/enc28j60.c **** 
  29:../../freeRtos/Lib/enc28j60.c **** /**
  30:../../freeRtos/Lib/enc28j60.c ****  * Read register value (without changing the bank)
  31:../../freeRtos/Lib/enc28j60.c ****  * @param op      - operation type
  32:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address
  33:../../freeRtos/Lib/enc28j60.c ****  * @return register value
  34:../../freeRtos/Lib/enc28j60.c ****  */
  35:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60ReadOp (uint8_t op, uint8_t address);
  36:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data);
  37:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60SetBank(uint8_t address);
  38:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60ReadBuffer(uint16_t len, uint8_t* data);
  39:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteBuffer(uint16_t len, uint8_t* data);
  40:../../freeRtos/Lib/enc28j60.c **** 
  41:../../freeRtos/Lib/enc28j60.c **** /**
  42:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 control register
  43:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  44:../../freeRtos/Lib/enc28j60.c ****  * @return control register value
  45:../../freeRtos/Lib/enc28j60.c ****  */
  46:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60Read(uint8_t address);
  47:../../freeRtos/Lib/enc28j60.c **** 
  48:../../freeRtos/Lib/enc28j60.c **** /**
  49:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 control register
  50:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  51:../../freeRtos/Lib/enc28j60.c ****  * @param data    - control register value to be writen
  52:../../freeRtos/Lib/enc28j60.c ****  */
  53:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Write(uint8_t address, uint8_t data);
  54:../../freeRtos/Lib/enc28j60.c **** 
  55:../../freeRtos/Lib/enc28j60.c **** /**
  56:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 phy register
  57:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  58:../../freeRtos/Lib/enc28j60.c ****  * @return phy register value
  59:../../freeRtos/Lib/enc28j60.c ****  */
  60:../../freeRtos/Lib/enc28j60.c **** static uint16_t enc28j60PhyReadH(uint8_t address);
  61:../../freeRtos/Lib/enc28j60.c **** 
  62:../../freeRtos/Lib/enc28j60.c **** /**
  63:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 phy register
  64:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  65:../../freeRtos/Lib/enc28j60.c ****  * @param data    - phy register value to be writen
  66:../../freeRtos/Lib/enc28j60.c ****  */
  67:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60PhyWrite(uint8_t address, uint16_t data);
  68:../../freeRtos/Lib/enc28j60.c **** 
  69:../../freeRtos/Lib/enc28j60.c **** 
  70:../../freeRtos/Lib/enc28j60.c **** //void     enc28j60BufferSend(uint16_t len, roundBuffer* buffer);
  71:../../freeRtos/Lib/enc28j60.c **** 
  72:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60hasRxPkt(void);
  73:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60getrev(void);
  74:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60linkup(void);
  75:../../freeRtos/Lib/enc28j60.c **** 
  76:../../freeRtos/Lib/enc28j60.c **** void nicMacInit(void)
  77:../../freeRtos/Lib/enc28j60.c **** { 
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  79:../../freeRtos/Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
  80:../../freeRtos/Lib/enc28j60.c **** //  enc28j60clkout      (2);     // change clkout from 6.25MHz to 12.5MHz
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
  84:../../freeRtos/Lib/enc28j60.c **** }
  85:../../freeRtos/Lib/enc28j60.c **** 
  86:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
  87:../../freeRtos/Lib/enc28j60.c **** {
  88:../../freeRtos/Lib/enc28j60.c ****   uint8_t result;
  89:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
  91:../../freeRtos/Lib/enc28j60.c ****   
  92:../../freeRtos/Lib/enc28j60.c ****   // issue read command
  93:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
  94:../../freeRtos/Lib/enc28j60.c **** 
  95:../../freeRtos/Lib/enc28j60.c ****   // read data
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSend(0x00);
  97:../../freeRtos/Lib/enc28j60.c **** 
  98:../../freeRtos/Lib/enc28j60.c ****   // do dummy read if needed (for mac and mii, see datasheet page 29)
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 100:../../freeRtos/Lib/enc28j60.c ****   {
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSend(0x00);
 102:../../freeRtos/Lib/enc28j60.c ****   }
 103:../../freeRtos/Lib/enc28j60.c **** 
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 105:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 106:../../freeRtos/Lib/enc28j60.c ****   return result; 
 107:../../freeRtos/Lib/enc28j60.c **** }
 108:../../freeRtos/Lib/enc28j60.c **** 
 109:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
 110:../../freeRtos/Lib/enc28j60.c **** {
 111:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 113:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 114:../../freeRtos/Lib/enc28j60.c ****   //spiSend(op | (address & ADDR_MASK));
 115:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 116:../../freeRtos/Lib/enc28j60.c ****   spiSend(data);
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 118:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 119:../../freeRtos/Lib/enc28j60.c **** }
 120:../../freeRtos/Lib/enc28j60.c **** 
 121:../../freeRtos/Lib/enc28j60.c **** void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
 122:../../freeRtos/Lib/enc28j60.c **** {
 123:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 125:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 127:../../freeRtos/Lib/enc28j60.c ****   {
 128:../../freeRtos/Lib/enc28j60.c ****     len--;
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSend(0x00);
 130:../../freeRtos/Lib/enc28j60.c ****     data++;
 131:../../freeRtos/Lib/enc28j60.c ****   }
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 134:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 135:../../freeRtos/Lib/enc28j60.c **** }
 136:../../freeRtos/Lib/enc28j60.c **** 
 137:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
 138:../../freeRtos/Lib/enc28j60.c **** {
 139:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 141:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 142:../../freeRtos/Lib/enc28j60.c ****   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 143:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 145:../../freeRtos/Lib/enc28j60.c ****   {
 146:../../freeRtos/Lib/enc28j60.c ****     len--;
 147:../../freeRtos/Lib/enc28j60.c ****     spiSend(*data);       // write data
 148:../../freeRtos/Lib/enc28j60.c ****     data++;
 149:../../freeRtos/Lib/enc28j60.c ****   }
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 151:../../freeRtos/Lib/enc28j60.c ****   //spiGive();
 152:../../freeRtos/Lib/enc28j60.c **** }
 153:../../freeRtos/Lib/enc28j60.c **** 
 154:../../freeRtos/Lib/enc28j60.c **** // void enc28j60WriteRoundBuffer(uint8_t len, roundBuffer *buffer)
 155:../../freeRtos/Lib/enc28j60.c **** // {
 156:../../freeRtos/Lib/enc28j60.c **** //   spiTake();
 157:../../freeRtos/Lib/enc28j60.c **** //   spiEnableEnc28j60();
 158:../../freeRtos/Lib/enc28j60.c **** //   // issue write command
 159:../../freeRtos/Lib/enc28j60.c **** //   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 160:../../freeRtos/Lib/enc28j60.c **** //   spiSend(ENC28J60_WRITE_BUF_MEM);
 161:../../freeRtos/Lib/enc28j60.c **** //   uint8_t data;
 162:../../freeRtos/Lib/enc28j60.c **** //   while(len)
 163:../../freeRtos/Lib/enc28j60.c **** //   {
 164:../../freeRtos/Lib/enc28j60.c **** //     len--;
 165:../../freeRtos/Lib/enc28j60.c **** //     data = *buffer->readIdx.ptr16;   
 166:../../freeRtos/Lib/enc28j60.c **** //     buffer->readIdx.ptr.L++;
 167:../../freeRtos/Lib/enc28j60.c **** //     
 168:../../freeRtos/Lib/enc28j60.c **** //     spiSend(*data);       // write data
 169:../../freeRtos/Lib/enc28j60.c **** //   }
 170:../../freeRtos/Lib/enc28j60.c **** //   spiDisableEnc28j60();  
 171:../../freeRtos/Lib/enc28j60.c **** //   spiGive();
 172:../../freeRtos/Lib/enc28j60.c **** // }
 173:../../freeRtos/Lib/enc28j60.c **** 
 174:../../freeRtos/Lib/enc28j60.c **** 
 175:../../freeRtos/Lib/enc28j60.c **** void enc28j60SetBank(uint8_t address)
 176:../../freeRtos/Lib/enc28j60.c **** {
 177:../../freeRtos/Lib/enc28j60.c ****   // set the bank (if needed)
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 179:../../freeRtos/Lib/enc28j60.c ****   {
 180:../../freeRtos/Lib/enc28j60.c ****     // set the bank
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 184:../../freeRtos/Lib/enc28j60.c ****   }
 185:../../freeRtos/Lib/enc28j60.c **** }
 186:../../freeRtos/Lib/enc28j60.c **** 
 187:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60Read(uint8_t address)
 188:../../freeRtos/Lib/enc28j60.c **** {
 189:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 191:../../freeRtos/Lib/enc28j60.c ****   // do the read
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 193:../../freeRtos/Lib/enc28j60.c ****   return result;
 194:../../freeRtos/Lib/enc28j60.c **** }
 195:../../freeRtos/Lib/enc28j60.c **** 
 196:../../freeRtos/Lib/enc28j60.c **** // read upper 8 bits
 197:../../freeRtos/Lib/enc28j60.c **** uint16_t enc28j60PhyReadH(uint8_t address)
 198:../../freeRtos/Lib/enc28j60.c **** {
 199:../../freeRtos/Lib/enc28j60.c ****   // Set the right address and start the register read operation
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 202:../../freeRtos/Lib/enc28j60.c ****   
 203:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(0);
 204:../../freeRtos/Lib/enc28j60.c **** 
 205:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY read completes
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 208:../../freeRtos/Lib/enc28j60.c **** 
 209:../../freeRtos/Lib/enc28j60.c ****   // reset reading bit
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 211:../../freeRtos/Lib/enc28j60.c **** 
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 213:../../freeRtos/Lib/enc28j60.c **** }
 214:../../freeRtos/Lib/enc28j60.c **** 
 215:../../freeRtos/Lib/enc28j60.c **** void enc28j60Write(uint8_t address, uint8_t data)
 216:../../freeRtos/Lib/enc28j60.c **** {
 217:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 219:../../freeRtos/Lib/enc28j60.c ****   // do the write
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 221:../../freeRtos/Lib/enc28j60.c **** }
 222:../../freeRtos/Lib/enc28j60.c **** 
 223:../../freeRtos/Lib/enc28j60.c **** void enc28j60PhyWrite(uint8_t address, uint16_t data)
 224:../../freeRtos/Lib/enc28j60.c **** {
 225:../../freeRtos/Lib/enc28j60.c ****   // set the PHY register address
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 227:../../freeRtos/Lib/enc28j60.c ****   // write the PHY data
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 230:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY write completes
 231:../../freeRtos/Lib/enc28j60.c ****   
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 233:../../freeRtos/Lib/enc28j60.c ****   {
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 235:../../freeRtos/Lib/enc28j60.c ****   }
 236:../../freeRtos/Lib/enc28j60.c **** }
 237:../../freeRtos/Lib/enc28j60.c **** 
 238:../../freeRtos/Lib/enc28j60.c **** void enc28j60Init(uint8_t* macaddr)
 239:../../freeRtos/Lib/enc28j60.c **** {
 240:../../freeRtos/Lib/enc28j60.c ****   // perform system reset
 241:../../freeRtos/Lib/enc28j60.c ****   
 242:../../freeRtos/Lib/enc28j60.c ****   //ENC28j60 reset is on PE2 TODO add in hardware.c macros for that.
 243:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_ON;   // PORTE &= ~0x04;
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 245:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04; 
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 247:../../freeRtos/Lib/enc28j60.c **** 
 248:../../freeRtos/Lib/enc28j60.c ****   // check CLKRDY bit to see if reset is complete
 249:../../freeRtos/Lib/enc28j60.c ****   // The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
 250:../../freeRtos/Lib/enc28j60.c ****   //while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
 251:../../freeRtos/Lib/enc28j60.c ****   // do bank 0 stuff
 252:../../freeRtos/Lib/enc28j60.c ****   // initialize receive buffer
 253:../../freeRtos/Lib/enc28j60.c ****   // 16-bit transfers, must write low byte first
 254:../../freeRtos/Lib/enc28j60.c ****   // set receive buffer start address
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 256:../../freeRtos/Lib/enc28j60.c ****   // Rx start
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 259:../../freeRtos/Lib/enc28j60.c ****   // set receive pointer address
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 262:../../freeRtos/Lib/enc28j60.c ****   // RX end
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 265:../../freeRtos/Lib/enc28j60.c ****   // TX start
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 268:../../freeRtos/Lib/enc28j60.c ****   // TX end
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 271:../../freeRtos/Lib/enc28j60.c **** 
 272:../../freeRtos/Lib/enc28j60.c ****   // do bank 1 stuff, packet filter:
 273:../../freeRtos/Lib/enc28j60.c ****   // For broadcast packets we allow only ARP packtets
 274:../../freeRtos/Lib/enc28j60.c ****   // All other packets should be unicast only for our mac (MAADR)
 275:../../freeRtos/Lib/enc28j60.c ****   //
 276:../../freeRtos/Lib/enc28j60.c ****   // The pattern to match on is therefore
 277:../../freeRtos/Lib/enc28j60.c ****   // Type     ETH.DST
 278:../../freeRtos/Lib/enc28j60.c ****   // ARP      BROADCAST
 279:../../freeRtos/Lib/enc28j60.c ****   // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
 280:../../freeRtos/Lib/enc28j60.c ****   // in binary these poitions are:11 0000 0011 1111
 281:../../freeRtos/Lib/enc28j60.c ****   // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 282:../../freeRtos/Lib/enc28j60.c ****   //enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);  //Bez wejsca dla broadcastu (
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 288:../../freeRtos/Lib/enc28j60.c ****   //
 289:../../freeRtos/Lib/enc28j60.c ****   //
 290:../../freeRtos/Lib/enc28j60.c ****   // do bank 2 stuff
 291:../../freeRtos/Lib/enc28j60.c ****   // enable MAC receive
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 293:../../freeRtos/Lib/enc28j60.c ****   // bring MAC out of reset
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 295:../../freeRtos/Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 297:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 300:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 302:../../freeRtos/Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 303:../../freeRtos/Lib/enc28j60.c ****   // Do not send packets longer than MAX_FRAMELEN:
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 306:../../freeRtos/Lib/enc28j60.c ****   
 307:../../freeRtos/Lib/enc28j60.c ****   // do bank 3 stuff
 308:../../freeRtos/Lib/enc28j60.c ****   // write MAC address
 309:../../freeRtos/Lib/enc28j60.c **** 
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 311:../../freeRtos/Lib/enc28j60.c ****   
 312:../../freeRtos/Lib/enc28j60.c ****   // no loopback of transmitted frames
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 314:../../freeRtos/Lib/enc28j60.c ****   
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 316:../../freeRtos/Lib/enc28j60.c ****   // enable interrutps
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 318:../../freeRtos/Lib/enc28j60.c ****   // enable packet reception
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 320:../../freeRtos/Lib/enc28j60.c **** }
 321:../../freeRtos/Lib/enc28j60.c **** 
 322:../../freeRtos/Lib/enc28j60.c **** // read the revision of the chip:
 323:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60getrev(void)
 324:../../freeRtos/Lib/enc28j60.c **** {
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 326:../../freeRtos/Lib/enc28j60.c **** }
 327:../../freeRtos/Lib/enc28j60.c **** 
 328:../../freeRtos/Lib/enc28j60.c **** // link status
 329:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60linkup(void)
 330:../../freeRtos/Lib/enc28j60.c **** {
 331:../../freeRtos/Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 333:../../freeRtos/Lib/enc28j60.c **** }
 334:../../freeRtos/Lib/enc28j60.c **** 
 335:../../freeRtos/Lib/enc28j60.c **** void nicSend(uint16_t len)
 336:../../freeRtos/Lib/enc28j60.c **** {
 337:../../freeRtos/Lib/enc28j60.c ****   // Check no transmit in progress
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 339:../../freeRtos/Lib/enc28j60.c ****   {
 340:../../freeRtos/Lib/enc28j60.c ****     // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 342:../../freeRtos/Lib/enc28j60.c ****     {
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 345:../../freeRtos/Lib/enc28j60.c ****     }
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 347:../../freeRtos/Lib/enc28j60.c ****   }
 348:../../freeRtos/Lib/enc28j60.c ****   // Set the write pointer to start of transmit buffer area
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 351:../../freeRtos/Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 354:../../freeRtos/Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 356:../../freeRtos/Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 358:../../freeRtos/Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 360:../../freeRtos/Lib/enc28j60.c **** }
 361:../../freeRtos/Lib/enc28j60.c **** 
 362:../../freeRtos/Lib/enc28j60.c **** // just probe if there might be a packet
 363:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60hasRxPkt(void)
 364:../../freeRtos/Lib/enc28j60.c **** {
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 366:../../freeRtos/Lib/enc28j60.c ****   {
 367:../../freeRtos/Lib/enc28j60.c ****     return(0);
 368:../../freeRtos/Lib/enc28j60.c ****   }
 369:../../freeRtos/Lib/enc28j60.c ****   return(1);
 370:../../freeRtos/Lib/enc28j60.c **** }
 371:../../freeRtos/Lib/enc28j60.c **** 
 372:../../freeRtos/Lib/enc28j60.c **** uint16_t nicPoll(void)
 373:../../freeRtos/Lib/enc28j60.c **** {
 374:../../freeRtos/Lib/enc28j60.c ****   uint16_t rxstat;
 375:../../freeRtos/Lib/enc28j60.c ****   uint16_t len;
 376:../../freeRtos/Lib/enc28j60.c ****   // check if a packet has been received and buffered
 377:../../freeRtos/Lib/enc28j60.c ****   //if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
 378:../../freeRtos/Lib/enc28j60.c ****   // The above does not work. See Rev. B4 Silicon Errata point 6.
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 380:../../freeRtos/Lib/enc28j60.c ****   {
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 382:../../freeRtos/Lib/enc28j60.c ****   }
 383:../../freeRtos/Lib/enc28j60.c **** 
 384:../../freeRtos/Lib/enc28j60.c ****   // Set the read pointer to the start of the received packet
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 387:../../freeRtos/Lib/enc28j60.c ****   // read the next packet pointer
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 390:../../freeRtos/Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 393:../../freeRtos/Lib/enc28j60.c ****   len-=4; //remove the CRC count
 394:../../freeRtos/Lib/enc28j60.c ****   // read the receive status (see datasheet page 43)
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 397:../../freeRtos/Lib/enc28j60.c ****   // limit retrieve length
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 399:../../freeRtos/Lib/enc28j60.c ****   {
 400:../../freeRtos/Lib/enc28j60.c ****     len= nicState.bufferSize-1;
 401:../../freeRtos/Lib/enc28j60.c ****   }
 402:../../freeRtos/Lib/enc28j60.c ****   // check CRC and symbol errors (see datasheet page 44, table 7-3):
 403:../../freeRtos/Lib/enc28j60.c ****   // The ERXFCON.CRCEN is set by default. Normally we should not
 404:../../freeRtos/Lib/enc28j60.c ****   // need to check this.
 405:../../freeRtos/Lib/enc28j60.c **** 
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 407:../../freeRtos/Lib/enc28j60.c ****   {
 408:../../freeRtos/Lib/enc28j60.c ****     // invalid
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 410:../../freeRtos/Lib/enc28j60.c ****   }
 411:../../freeRtos/Lib/enc28j60.c ****   else
 412:../../freeRtos/Lib/enc28j60.c ****   {
 413:../../freeRtos/Lib/enc28j60.c ****     // copy the packet from the receive buffer
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 415:../../freeRtos/Lib/enc28j60.c ****   }
 416:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 417:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 420:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 421:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out.
 422:../../freeRtos/Lib/enc28j60.c ****   // However, compensate for the errata point 13, rev B4: enver write an even address!
 423:../../freeRtos/Lib/enc28j60.c ****   //FIXME remove this warning
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 425:../../freeRtos/Lib/enc28j60.c ****   {
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 428:../../freeRtos/Lib/enc28j60.c ****   }
 429:../../freeRtos/Lib/enc28j60.c ****   else
 430:../../freeRtos/Lib/enc28j60.c ****   {
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 433:../../freeRtos/Lib/enc28j60.c ****   }
 434:../../freeRtos/Lib/enc28j60.c ****   // decrement the packet counter indicate we are done with this packet
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 437:../../freeRtos/Lib/enc28j60.c **** }
 438:../../freeRtos/Lib/enc28j60.c **** 
 439:../../freeRtos/Lib/enc28j60.c **** void spiEnableEnc28j60(void)  {};
 274               	.LM0:
 275               	.LFBB1:
 276               	/* prologue: function */
 277               	/* frame size = 0 */
 278               	/* stack size = 0 */
 279               	.L__stack_usage = 0
 280 0000 0895      		ret
 282               	.Lscope1:
 284               		.stabd	78,0,0
 286               		.weak	spiDisableEnc28j60
 288               	spiDisableEnc28j60:
 289               		.stabd	46,0,0
 440:../../freeRtos/Lib/enc28j60.c **** void spiDisableEnc28j60(void) {};
 291               	.LM1:
 292               	.LFBB2:
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 0 */
 296               	.L__stack_usage = 0
 297 0002 0895      		ret
 299               	.Lscope2:
 301               		.stabd	78,0,0
 307               	enc28j60WriteOp:
 308               		.stabd	46,0,0
 110:../../freeRtos/Lib/enc28j60.c **** {
 310               	.LM2:
 311               	.LFBB3:
 110:../../freeRtos/Lib/enc28j60.c **** {
 313               	.LM3:
 314 0004 1F93      		push r17
 315 0006 CF93      		push r28
 316 0008 DF93      		push r29
 317 000a 00D0      		rcall .
 318 000c CDB7      		in r28,__SP_L__
 319 000e DEB7      		in r29,__SP_H__
 320               	/* prologue: function */
 321               	/* frame size = 2 */
 322               	/* stack size = 5 */
 323               	.L__stack_usage = 5
 324 0010 182F      		mov r17,r24
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 326               	.LM4:
 327 0012 4A83      		std Y+2,r20
 328 0014 6983      		std Y+1,r22
 329 0016 0E94 0000 		call spiEnableEnc28j60
 115:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 331               	.LM5:
 332 001a 6981      		ldd r22,Y+1
 333 001c 862F      		mov r24,r22
 334 001e 8F71      		andi r24,lo8(31)
 335 0020 812B      		or r24,r17
 336 0022 0E94 0000 		call spiSend
 116:../../freeRtos/Lib/enc28j60.c ****   spiSend(data);
 338               	.LM6:
 339 0026 4A81      		ldd r20,Y+2
 340 0028 842F      		mov r24,r20
 341 002a 0E94 0000 		call spiSend
 342               	/* epilogue start */
 119:../../freeRtos/Lib/enc28j60.c **** }
 344               	.LM7:
 345 002e 0F90      		pop __tmp_reg__
 346 0030 0F90      		pop __tmp_reg__
 347 0032 DF91      		pop r29
 348 0034 CF91      		pop r28
 349 0036 1F91      		pop r17
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 351               	.LM8:
 352 0038 0C94 0000 		jmp spiDisableEnc28j60
 354               	.Lscope3:
 356               		.stabd	78,0,0
 360               	enc28j60SetBank:
 361               		.stabd	46,0,0
 176:../../freeRtos/Lib/enc28j60.c **** {
 363               	.LM9:
 364               	.LFBB4:
 365 003c 1F93      		push r17
 366 003e CF93      		push r28
 367 0040 DF93      		push r29
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 3 */
 371               	.L__stack_usage = 3
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 373               	.LM10:
 374 0042 182F      		mov r17,r24
 375 0044 1076      		andi r17,lo8(96)
 376 0046 C12F      		mov r28,r17
 377 0048 D0E0      		ldi r29,0
 378 004a 2091 0000 		lds r18,Enc28j60Bank
 379 004e 30E0      		ldi r19,0
 380 0050 C217      		cp r28,r18
 381 0052 D307      		cpc r29,r19
 382 0054 01F0      		breq .L4
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 384               	.LM11:
 385 0056 43E0      		ldi r20,lo8(3)
 386 0058 6FE1      		ldi r22,lo8(31)
 387 005a 80EA      		ldi r24,lo8(-96)
 388 005c 0E94 0000 		call enc28j60WriteOp
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 390               	.LM12:
 391 0060 AE01      		movw r20,r28
 392 0062 85E0      		ldi r24,5
 393               		1:
 394 0064 5595      		asr r21
 395 0066 4795      		ror r20
 396 0068 8A95      		dec r24
 397 006a 01F4      		brne 1b
 398 006c 6FE1      		ldi r22,lo8(31)
 399 006e 80E8      		ldi r24,lo8(-128)
 400 0070 0E94 0000 		call enc28j60WriteOp
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 402               	.LM13:
 403 0074 1093 0000 		sts Enc28j60Bank,r17
 404               	.L4:
 405               	/* epilogue start */
 185:../../freeRtos/Lib/enc28j60.c **** }
 407               	.LM14:
 408 0078 DF91      		pop r29
 409 007a CF91      		pop r28
 410 007c 1F91      		pop r17
 411 007e 0895      		ret
 413               	.Lscope4:
 415               		.stabd	78,0,0
 420               	enc28j60Write:
 421               		.stabd	46,0,0
 216:../../freeRtos/Lib/enc28j60.c **** {
 423               	.LM15:
 424               	.LFBB5:
 425 0080 1F93      		push r17
 426 0082 CF93      		push r28
 427 0084 DF93      		push r29
 428 0086 1F92      		push __zero_reg__
 429 0088 CDB7      		in r28,__SP_L__
 430 008a DEB7      		in r29,__SP_H__
 431               	/* prologue: function */
 432               	/* frame size = 1 */
 433               	/* stack size = 4 */
 434               	.L__stack_usage = 4
 435 008c 182F      		mov r17,r24
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 437               	.LM16:
 438 008e 6983      		std Y+1,r22
 439 0090 0E94 0000 		call enc28j60SetBank
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 441               	.LM17:
 442 0094 4981      		ldd r20,Y+1
 443 0096 612F      		mov r22,r17
 444 0098 80E4      		ldi r24,lo8(64)
 445               	/* epilogue start */
 221:../../freeRtos/Lib/enc28j60.c **** }
 447               	.LM18:
 448 009a 0F90      		pop __tmp_reg__
 449 009c DF91      		pop r29
 450 009e CF91      		pop r28
 451 00a0 1F91      		pop r17
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 453               	.LM19:
 454 00a2 0C94 0000 		jmp enc28j60WriteOp
 456               	.Lscope5:
 458               		.stabd	78,0,0
 463               	enc28j60ReadOp:
 464               		.stabd	46,0,0
  87:../../freeRtos/Lib/enc28j60.c **** {
 466               	.LM20:
 467               	.LFBB6:
 468 00a6 1F93      		push r17
 469 00a8 CF93      		push r28
 470 00aa DF93      		push r29
 471 00ac 1F92      		push __zero_reg__
 472 00ae CDB7      		in r28,__SP_L__
 473 00b0 DEB7      		in r29,__SP_H__
 474               	/* prologue: function */
 475               	/* frame size = 1 */
 476               	/* stack size = 4 */
 477               	.L__stack_usage = 4
 478 00b2 162F      		mov r17,r22
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 480               	.LM21:
 481 00b4 8983      		std Y+1,r24
 482 00b6 0E94 0000 		call spiEnableEnc28j60
  93:../../freeRtos/Lib/enc28j60.c ****   spiSend(op | (address & ADDR_MASK));
 484               	.LM22:
 485 00ba 912F      		mov r25,r17
 486 00bc 9F71      		andi r25,lo8(31)
 487 00be 8981      		ldd r24,Y+1
 488 00c0 892B      		or r24,r25
 489 00c2 0E94 0000 		call spiSend
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSend(0x00);
 491               	.LM23:
 492 00c6 80E0      		ldi r24,0
 493 00c8 0E94 0000 		call spiSend
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 495               	.LM24:
 496 00cc 17FF      		sbrs r17,7
 497 00ce 00C0      		rjmp .L9
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSend(0x00);
 499               	.LM25:
 500 00d0 80E0      		ldi r24,0
 501 00d2 0E94 0000 		call spiSend
 502               	.L9:
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 504               	.LM26:
 505 00d6 8983      		std Y+1,r24
 506 00d8 0E94 0000 		call spiDisableEnc28j60
 107:../../freeRtos/Lib/enc28j60.c **** }
 508               	.LM27:
 509 00dc 8981      		ldd r24,Y+1
 510               	/* epilogue start */
 511 00de 0F90      		pop __tmp_reg__
 512 00e0 DF91      		pop r29
 513 00e2 CF91      		pop r28
 514 00e4 1F91      		pop r17
 515 00e6 0895      		ret
 520               	.Lscope6:
 522               		.stabd	78,0,0
 526               	enc28j60Read:
 527               		.stabd	46,0,0
 188:../../freeRtos/Lib/enc28j60.c **** {
 529               	.LM28:
 530               	.LFBB7:
 531 00e8 CF93      		push r28
 532 00ea DF93      		push r29
 533 00ec 1F92      		push __zero_reg__
 534 00ee CDB7      		in r28,__SP_L__
 535 00f0 DEB7      		in r29,__SP_H__
 536               	/* prologue: function */
 537               	/* frame size = 1 */
 538               	/* stack size = 3 */
 539               	.L__stack_usage = 3
 540 00f2 682F      		mov r22,r24
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 542               	.LM29:
 543 00f4 6983      		std Y+1,r22
 544 00f6 0E94 0000 		call enc28j60SetBank
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 546               	.LM30:
 547 00fa 6981      		ldd r22,Y+1
 548 00fc 80E0      		ldi r24,0
 549               	/* epilogue start */
 194:../../freeRtos/Lib/enc28j60.c **** }
 551               	.LM31:
 552 00fe 0F90      		pop __tmp_reg__
 553 0100 DF91      		pop r29
 554 0102 CF91      		pop r28
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 556               	.LM32:
 557 0104 0C94 0000 		jmp enc28j60ReadOp
 559               	.Lscope7:
 561               		.stabd	78,0,0
 565               	enc28j60PhyWrite:
 566               		.stabd	46,0,0
 224:../../freeRtos/Lib/enc28j60.c **** {
 568               	.LM33:
 569               	.LFBB8:
 570 0108 1F93      		push r17
 571 010a CF93      		push r28
 572 010c DF93      		push r29
 573 010e 1F92      		push __zero_reg__
 574 0110 CDB7      		in r28,__SP_L__
 575 0112 DEB7      		in r29,__SP_H__
 576               	/* prologue: function */
 577               	/* frame size = 1 */
 578               	/* stack size = 4 */
 579               	.L__stack_usage = 4
 580 0114 162F      		mov r17,r22
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 582               	.LM34:
 583 0116 682F      		mov r22,r24
 584 0118 84ED      		ldi r24,lo8(-44)
 585 011a 7983      		std Y+1,r23
 586 011c 0E94 0000 		call enc28j60Write
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 588               	.LM35:
 589 0120 612F      		mov r22,r17
 590 0122 86ED      		ldi r24,lo8(-42)
 591 0124 0E94 0000 		call enc28j60Write
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 593               	.LM36:
 594 0128 7981      		ldd r23,Y+1
 595 012a 672F      		mov r22,r23
 596 012c 87ED      		ldi r24,lo8(-41)
 597 012e 0E94 0000 		call enc28j60Write
 598               	.L12:
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 600               	.LM37:
 601 0132 8AEE      		ldi r24,lo8(-22)
 602 0134 0E94 0000 		call enc28j60Read
 603 0138 80FF      		sbrs r24,0
 604 013a 00C0      		rjmp .L14
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 606               	.LM38:
 607 013c 80E0      		ldi r24,0
 608 013e 90E0      		ldi r25,0
 609 0140 0E94 0000 		call vTaskDelay
 610 0144 00C0      		rjmp .L12
 611               	.L14:
 612               	/* epilogue start */
 236:../../freeRtos/Lib/enc28j60.c **** }
 614               	.LM39:
 615 0146 0F90      		pop __tmp_reg__
 616 0148 DF91      		pop r29
 617 014a CF91      		pop r28
 618 014c 1F91      		pop r17
 619 014e 0895      		ret
 621               	.Lscope8:
 623               		.stabd	78,0,0
 625               	.global	enc28j60getrev
 627               	enc28j60getrev:
 628               		.stabd	46,0,0
 324:../../freeRtos/Lib/enc28j60.c **** {
 630               	.LM40:
 631               	.LFBB9:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 637               	.LM41:
 638 0150 82E7      		ldi r24,lo8(114)
 639 0152 0C94 0000 		jmp enc28j60Read
 641               	.Lscope9:
 643               		.stabd	78,0,0
 645               	.global	enc28j60hasRxPkt
 647               	enc28j60hasRxPkt:
 648               		.stabd	46,0,0
 364:../../freeRtos/Lib/enc28j60.c **** {
 650               	.LM42:
 651               	.LFBB10:
 652               	/* prologue: function */
 653               	/* frame size = 0 */
 654               	/* stack size = 0 */
 655               	.L__stack_usage = 0
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 657               	.LM43:
 658 0156 89E3      		ldi r24,lo8(57)
 659 0158 0E94 0000 		call enc28j60Read
 660 015c 91E0      		ldi r25,lo8(1)
 661 015e 8111      		cpse r24,__zero_reg__
 662 0160 00C0      		rjmp .L17
 663 0162 90E0      		ldi r25,0
 664               	.L17:
 370:../../freeRtos/Lib/enc28j60.c **** }
 666               	.LM44:
 667 0164 892F      		mov r24,r25
 668 0166 0895      		ret
 670               	.Lscope10:
 672               		.stabd	78,0,0
 674               	.global	enc28j60linkup
 676               	enc28j60linkup:
 677               		.stabd	46,0,0
 330:../../freeRtos/Lib/enc28j60.c **** {
 679               	.LM45:
 680               	.LFBB11:
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 685               	.LBB4:
 686               	.LBB5:
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 688               	.LM46:
 689 0168 61E1      		ldi r22,lo8(17)
 690 016a 84ED      		ldi r24,lo8(-44)
 691 016c 0E94 0000 		call enc28j60Write
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 693               	.LM47:
 694 0170 61E0      		ldi r22,lo8(1)
 695 0172 82ED      		ldi r24,lo8(-46)
 696 0174 0E94 0000 		call enc28j60Write
 697               	.L20:
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 699               	.LM48:
 700 0178 80E0      		ldi r24,0
 701 017a 90E0      		ldi r25,0
 702 017c 0E94 0000 		call vTaskDelay
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 704               	.LM49:
 705 0180 8AEE      		ldi r24,lo8(-22)
 706 0182 0E94 0000 		call enc28j60Read
 707 0186 80FD      		sbrc r24,0
 708 0188 00C0      		rjmp .L20
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 710               	.LM50:
 711 018a 60E0      		ldi r22,0
 712 018c 82ED      		ldi r24,lo8(-46)
 713 018e 0E94 0000 		call enc28j60Write
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 715               	.LM51:
 716 0192 89ED      		ldi r24,lo8(-39)
 717 0194 0E94 0000 		call enc28j60Read
 718               	.LBE5:
 719               	.LBE4:
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 721               	.LM52:
 722 0198 91E0      		ldi r25,lo8(1)
 723 019a 8111      		cpse r24,__zero_reg__
 724 019c 00C0      		rjmp .L21
 725 019e 90E0      		ldi r25,0
 726               	.L21:
 333:../../freeRtos/Lib/enc28j60.c **** }
 728               	.LM53:
 729 01a0 892F      		mov r24,r25
 730 01a2 0895      		ret
 732               	.Lscope11:
 734               		.stabd	78,0,0
 737               		.weak	nicSend
 739               	nicSend:
 740               		.stabd	46,0,0
 336:../../freeRtos/Lib/enc28j60.c **** {
 742               	.LM54:
 743               	.LFBB12:
 744 01a4 0F93      		push r16
 745 01a6 1F93      		push r17
 746 01a8 CF93      		push r28
 747 01aa DF93      		push r29
 748               	/* prologue: function */
 749               	/* frame size = 0 */
 750               	/* stack size = 4 */
 751               	.L__stack_usage = 4
 752 01ac 8C01      		movw r16,r24
 753               	.L23:
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 755               	.LM55:
 756 01ae 6FE1      		ldi r22,lo8(31)
 757 01b0 80E0      		ldi r24,0
 758 01b2 0E94 0000 		call enc28j60ReadOp
 759 01b6 83FF      		sbrs r24,3
 760 01b8 00C0      		rjmp .L31
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 762               	.LM56:
 763 01ba 8CE1      		ldi r24,lo8(28)
 764 01bc 0E94 0000 		call enc28j60Read
 765 01c0 81FF      		sbrs r24,1
 766 01c2 00C0      		rjmp .L24
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 768               	.LM57:
 769 01c4 40E8      		ldi r20,lo8(-128)
 770 01c6 6FE1      		ldi r22,lo8(31)
 771 01c8 80E8      		ldi r24,lo8(-128)
 772 01ca 0E94 0000 		call enc28j60WriteOp
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 774               	.LM58:
 775 01ce 40E8      		ldi r20,lo8(-128)
 776 01d0 6FE1      		ldi r22,lo8(31)
 777 01d2 80EA      		ldi r24,lo8(-96)
 778 01d4 0E94 0000 		call enc28j60WriteOp
 779               	.L24:
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 781               	.LM59:
 782 01d8 80E0      		ldi r24,0
 783 01da 90E0      		ldi r25,0
 784 01dc 0E94 0000 		call vTaskDelay
 785 01e0 00C0      		rjmp .L23
 786               	.L31:
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 788               	.LM60:
 789 01e2 6FEF      		ldi r22,lo8(-1)
 790 01e4 82E0      		ldi r24,lo8(2)
 791 01e6 0E94 0000 		call enc28j60Write
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 793               	.LM61:
 794 01ea 69E1      		ldi r22,lo8(25)
 795 01ec 83E0      		ldi r24,lo8(3)
 796 01ee 0E94 0000 		call enc28j60Write
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 798               	.LM62:
 799 01f2 6FEF      		ldi r22,lo8(-1)
 800 01f4 600F      		add r22,r16
 801 01f6 86E0      		ldi r24,lo8(6)
 802 01f8 0E94 0000 		call enc28j60Write
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 804               	.LM63:
 805 01fc C801      		movw r24,r16
 806 01fe 8150      		subi r24,1
 807 0200 964E      		sbci r25,-26
 808 0202 692F      		mov r22,r25
 809 0204 87E0      		ldi r24,lo8(7)
 810 0206 0E94 0000 		call enc28j60Write
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 812               	.LM64:
 813 020a 40E0      		ldi r20,0
 814 020c 60E0      		ldi r22,0
 815 020e 8AE7      		ldi r24,lo8(122)
 816 0210 0E94 0000 		call enc28j60WriteOp
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 818               	.LM65:
 819 0214 C091 0000 		lds r28,nicState+8
 820 0218 D091 0000 		lds r29,nicState+8+1
 821               	.LBB8:
 822               	.LBB9:
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 824               	.LM66:
 825 021c 0E94 0000 		call spiEnableEnc28j60
 143:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_WRITE_BUF_MEM);
 827               	.LM67:
 828 0220 8AE7      		ldi r24,lo8(122)
 829 0222 0E94 0000 		call spiSend
 830 0226 0C0F      		add r16,r28
 831 0228 1D1F      		adc r17,r29
 832               	.L26:
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 834               	.LM68:
 835 022a C017      		cp r28,r16
 836 022c D107      		cpc r29,r17
 837 022e 01F0      		breq .L32
 147:../../freeRtos/Lib/enc28j60.c ****     spiSend(*data);       // write data
 839               	.LM69:
 840 0230 8991      		ld r24,Y+
 841 0232 0E94 0000 		call spiSend
 842 0236 00C0      		rjmp .L26
 843               	.L32:
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 845               	.LM70:
 846 0238 0E94 0000 		call spiDisableEnc28j60
 847               	.LBE9:
 848               	.LBE8:
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 850               	.LM71:
 851 023c 48E0      		ldi r20,lo8(8)
 852 023e 6FE1      		ldi r22,lo8(31)
 853 0240 80E8      		ldi r24,lo8(-128)
 854               	/* epilogue start */
 360:../../freeRtos/Lib/enc28j60.c **** }
 856               	.LM72:
 857 0242 DF91      		pop r29
 858 0244 CF91      		pop r28
 859 0246 1F91      		pop r17
 860 0248 0F91      		pop r16
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 862               	.LM73:
 863 024a 0C94 0000 		jmp enc28j60WriteOp
 868               	.Lscope12:
 870               		.stabd	78,0,0
 872               		.weak	nicPoll
 874               	nicPoll:
 875               		.stabd	46,0,0
 373:../../freeRtos/Lib/enc28j60.c **** {
 877               	.LM74:
 878               	.LFBB13:
 879 024e EF92      		push r14
 880 0250 FF92      		push r15
 881 0252 0F93      		push r16
 882 0254 1F93      		push r17
 883 0256 CF93      		push r28
 884 0258 DF93      		push r29
 885               	/* prologue: function */
 886               	/* frame size = 0 */
 887               	/* stack size = 6 */
 888               	.L__stack_usage = 6
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 890               	.LM75:
 891 025a 89E3      		ldi r24,lo8(57)
 892 025c 0E94 0000 		call enc28j60Read
 893 0260 8823      		tst r24
 894 0262 01F4      		brne .+2
 895 0264 00C0      		rjmp .L41
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 897               	.LM76:
 898 0266 6091 0000 		lds r22,gNextPacketPtr
 899 026a 80E0      		ldi r24,0
 900 026c 0E94 0000 		call enc28j60Write
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 902               	.LM77:
 903 0270 6091 0000 		lds r22,gNextPacketPtr+1
 904 0274 81E0      		ldi r24,lo8(1)
 905 0276 0E94 0000 		call enc28j60Write
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 907               	.LM78:
 908 027a 60E0      		ldi r22,0
 909 027c 8AE3      		ldi r24,lo8(58)
 910 027e 0E94 0000 		call enc28j60ReadOp
 911 0282 C82F      		mov r28,r24
 912 0284 D0E0      		ldi r29,0
 913 0286 D093 0000 		sts gNextPacketPtr+1,r29
 914 028a C093 0000 		sts gNextPacketPtr,r28
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 916               	.LM79:
 917 028e 60E0      		ldi r22,0
 918 0290 8AE3      		ldi r24,lo8(58)
 919 0292 0E94 0000 		call enc28j60ReadOp
 920 0296 D82B      		or r29,r24
 921 0298 D093 0000 		sts gNextPacketPtr+1,r29
 922 029c C093 0000 		sts gNextPacketPtr,r28
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 924               	.LM80:
 925 02a0 60E0      		ldi r22,0
 926 02a2 8AE3      		ldi r24,lo8(58)
 927 02a4 0E94 0000 		call enc28j60ReadOp
 928 02a8 C82F      		mov r28,r24
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 930               	.LM81:
 931 02aa 60E0      		ldi r22,0
 932 02ac 8AE3      		ldi r24,lo8(58)
 933 02ae 0E94 0000 		call enc28j60ReadOp
 934 02b2 F82E      		mov r15,r24
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 936               	.LM82:
 937 02b4 60E0      		ldi r22,0
 938 02b6 8AE3      		ldi r24,lo8(58)
 939 02b8 0E94 0000 		call enc28j60ReadOp
 940 02bc 082F      		mov r16,r24
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 942               	.LM83:
 943 02be 60E0      		ldi r22,0
 944 02c0 8AE3      		ldi r24,lo8(58)
 945 02c2 0E94 0000 		call enc28j60ReadOp
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 947               	.LM84:
 948 02c6 2091 0000 		lds r18,nicState
 949 02ca 3091 0000 		lds r19,nicState+1
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 951               	.LM85:
 952 02ce 07FF      		sbrs r16,7
 953 02d0 00C0      		rjmp .L42
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 955               	.LM86:
 956 02d2 2150      		subi r18,1
 957 02d4 3109      		sbc r19,__zero_reg__
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 959               	.LM87:
 960 02d6 D0E0      		ldi r29,0
 961 02d8 DF29      		or r29,r15
 962 02da 2497      		sbiw r28,4
 963 02dc 2C17      		cp r18,r28
 964 02de 3D07      		cpc r19,r29
 965 02e0 00F4      		brsh .L36
 966 02e2 E901      		movw r28,r18
 967               	.L36:
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 969               	.LM88:
 970 02e4 0091 0000 		lds r16,nicState+8
 971 02e8 1091 0000 		lds r17,nicState+8+1
 972               	.LBB12:
 973               	.LBB13:
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 975               	.LM89:
 976 02ec 0E94 0000 		call spiEnableEnc28j60
 125:../../freeRtos/Lib/enc28j60.c ****   spiSend(ENC28J60_READ_BUF_MEM);
 978               	.LM90:
 979 02f0 8AE3      		ldi r24,lo8(58)
 980 02f2 0E94 0000 		call spiSend
 981 02f6 7801      		movw r14,r16
 982 02f8 EC0E      		add r14,r28
 983 02fa FD1E      		adc r15,r29
 984               	.L37:
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 986               	.LM91:
 987 02fc 0E15      		cp r16,r14
 988 02fe 1F05      		cpc r17,r15
 989 0300 01F0      		breq .L44
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSend(0x00);
 991               	.LM92:
 992 0302 80E0      		ldi r24,0
 993 0304 0E94 0000 		call spiSend
 994 0308 F801      		movw r30,r16
 995 030a 8193      		st Z+,r24
 996 030c 8F01      		movw r16,r30
 997 030e 00C0      		rjmp .L37
 998               	.L44:
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 1000               	.LM93:
 1001 0310 F801      		movw r30,r16
 1002 0312 1082      		st Z,__zero_reg__
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 1004               	.LM94:
 1005 0314 0E94 0000 		call spiDisableEnc28j60
 1006 0318 00C0      		rjmp .L35
 1007               	.L42:
 1008               	.LBE13:
 1009               	.LBE12:
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 1011               	.LM95:
 1012 031a C0E0      		ldi r28,0
 1013 031c D0E0      		ldi r29,0
 1014               	.L35:
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 1016               	.LM96:
 1017 031e 6091 0000 		lds r22,gNextPacketPtr
 1018 0322 8CE0      		ldi r24,lo8(12)
 1019 0324 0E94 0000 		call enc28j60Write
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 1021               	.LM97:
 1022 0328 6091 0000 		lds r22,gNextPacketPtr+1
 1023 032c 8DE0      		ldi r24,lo8(13)
 1024 032e 0E94 0000 		call enc28j60Write
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 1026               	.LM98:
 1027 0332 6091 0000 		lds r22,gNextPacketPtr
 1028 0336 7091 0000 		lds r23,gNextPacketPtr+1
 1029 033a CB01      		movw r24,r22
 1030 033c 0197      		sbiw r24,1
 1031 033e 8F3F      		cpi r24,-1
 1032 0340 9941      		sbci r25,25
 1033 0342 00F0      		brlo .L39
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 1035               	.LM99:
 1036 0344 6EEF      		ldi r22,lo8(-2)
 1037 0346 8CE0      		ldi r24,lo8(12)
 1038 0348 0E94 0000 		call enc28j60Write
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 1040               	.LM100:
 1041 034c 69E1      		ldi r22,lo8(25)
 1042 034e 00C0      		rjmp .L43
 1043               	.L39:
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 1045               	.LM101:
 1046 0350 6150      		subi r22,lo8(-(-1))
 1047 0352 8CE0      		ldi r24,lo8(12)
 1048 0354 0E94 0000 		call enc28j60Write
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 1050               	.LM102:
 1051 0358 8091 0000 		lds r24,gNextPacketPtr
 1052 035c 9091 0000 		lds r25,gNextPacketPtr+1
 1053 0360 0197      		sbiw r24,1
 1054 0362 692F      		mov r22,r25
 1055               	.L43:
 1056 0364 8DE0      		ldi r24,lo8(13)
 1057 0366 0E94 0000 		call enc28j60Write
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 1059               	.LM103:
 1060 036a 40E4      		ldi r20,lo8(64)
 1061 036c 6EE1      		ldi r22,lo8(30)
 1062 036e 80E8      		ldi r24,lo8(-128)
 1063 0370 0E94 0000 		call enc28j60WriteOp
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 1065               	.LM104:
 1066 0374 CE01      		movw r24,r28
 1067 0376 00C0      		rjmp .L34
 1068               	.L41:
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 1070               	.LM105:
 1071 0378 80E0      		ldi r24,0
 1072 037a 90E0      		ldi r25,0
 1073               	.L34:
 1074               	/* epilogue start */
 437:../../freeRtos/Lib/enc28j60.c **** }
 1076               	.LM106:
 1077 037c DF91      		pop r29
 1078 037e CF91      		pop r28
 1079 0380 1F91      		pop r17
 1080 0382 0F91      		pop r16
 1081 0384 FF90      		pop r15
 1082 0386 EF90      		pop r14
 1083 0388 0895      		ret
 1088               	.Lscope13:
 1090               		.stabd	78,0,0
 1093               		.weak	nicSetMacAddress
 1095               	nicSetMacAddress:
 1096               		.stabd	46,0,0
 441:../../freeRtos/Lib/enc28j60.c **** 
 442:../../freeRtos/Lib/enc28j60.c **** void     nicSetMacAddress(uint8_t* macaddr)
 443:../../freeRtos/Lib/enc28j60.c **** {
 1098               	.LM107:
 1099               	.LFBB14:
 1100 038a CF93      		push r28
 1101 038c DF93      		push r29
 1102               	/* prologue: function */
 1103               	/* frame size = 0 */
 1104               	/* stack size = 2 */
 1105               	.L__stack_usage = 2
 1106 038e EC01      		movw r28,r24
 444:../../freeRtos/Lib/enc28j60.c **** //NOTE: MAC address in ENC28J60 is byte-backward
 445:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR5, macaddr[0]); 
 1108               	.LM108:
 1109 0390 6881      		ld r22,Y
 1110 0392 84EE      		ldi r24,lo8(-28)
 1111 0394 0E94 0000 		call enc28j60Write
 446:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR4, macaddr[1]);
 1113               	.LM109:
 1114 0398 6981      		ldd r22,Y+1
 1115 039a 85EE      		ldi r24,lo8(-27)
 1116 039c 0E94 0000 		call enc28j60Write
 447:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR3, macaddr[2]);
 1118               	.LM110:
 1119 03a0 6A81      		ldd r22,Y+2
 1120 03a2 82EE      		ldi r24,lo8(-30)
 1121 03a4 0E94 0000 		call enc28j60Write
 448:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR2, macaddr[3]);
 1123               	.LM111:
 1124 03a8 6B81      		ldd r22,Y+3
 1125 03aa 83EE      		ldi r24,lo8(-29)
 1126 03ac 0E94 0000 		call enc28j60Write
 449:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR1, macaddr[4]);
 1128               	.LM112:
 1129 03b0 6C81      		ldd r22,Y+4
 1130 03b2 80EE      		ldi r24,lo8(-32)
 1131 03b4 0E94 0000 		call enc28j60Write
 450:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1133               	.LM113:
 1134 03b8 6D81      		ldd r22,Y+5
 1135 03ba 81EE      		ldi r24,lo8(-31)
 1136               	/* epilogue start */
 451:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 452:../../freeRtos/Lib/enc28j60.c **** }
 1138               	.LM114:
 1139 03bc DF91      		pop r29
 1140 03be CF91      		pop r28
 450:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1142               	.LM115:
 1143 03c0 0C94 0000 		jmp enc28j60Write
 1145               	.Lscope14:
 1147               		.stabd	78,0,0
 1149               		.weak	nicMacInit
 1151               	nicMacInit:
 1152               		.stabd	46,0,0
  77:../../freeRtos/Lib/enc28j60.c **** { 
 1154               	.LM116:
 1155               	.LFBB15:
 1156               	/* prologue: function */
 1157               	/* frame size = 0 */
 1158               	/* stack size = 0 */
 1159               	.L__stack_usage = 0
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1161               	.LM117:
 1162 03c4 85E0      		ldi r24,lo8(5)
 1163 03c6 90E0      		ldi r25,0
 1164 03c8 0E94 0000 		call vTaskDelay
 1165               	.LBB16:
 1166               	.LBB17:
 243:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_ON;   // PORTE &= ~0x04;
 1168               	.LM118:
 1169 03cc 1A98      		cbi 0x3,2
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1171               	.LM119:
 1172 03ce 85E0      		ldi r24,lo8(5)
 1173 03d0 90E0      		ldi r25,0
 1174 03d2 0E94 0000 		call vTaskDelay
 245:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04; 
 1176               	.LM120:
 1177 03d6 1A9A      		sbi 0x3,2
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1179               	.LM121:
 1180 03d8 85E0      		ldi r24,lo8(5)
 1181 03da 90E0      		ldi r25,0
 1182 03dc 0E94 0000 		call vTaskDelay
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 1184               	.LM122:
 1185 03e0 1092 0000 		sts gNextPacketPtr+1,__zero_reg__
 1186 03e4 1092 0000 		sts gNextPacketPtr,__zero_reg__
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 1188               	.LM123:
 1189 03e8 60E0      		ldi r22,0
 1190 03ea 88E0      		ldi r24,lo8(8)
 1191 03ec 0E94 0000 		call enc28j60Write
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 1193               	.LM124:
 1194 03f0 60E0      		ldi r22,0
 1195 03f2 89E0      		ldi r24,lo8(9)
 1196 03f4 0E94 0000 		call enc28j60Write
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 1198               	.LM125:
 1199 03f8 60E0      		ldi r22,0
 1200 03fa 8CE0      		ldi r24,lo8(12)
 1201 03fc 0E94 0000 		call enc28j60Write
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 1203               	.LM126:
 1204 0400 60E0      		ldi r22,0
 1205 0402 8DE0      		ldi r24,lo8(13)
 1206 0404 0E94 0000 		call enc28j60Write
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 1208               	.LM127:
 1209 0408 6EEF      		ldi r22,lo8(-2)
 1210 040a 8AE0      		ldi r24,lo8(10)
 1211 040c 0E94 0000 		call enc28j60Write
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 1213               	.LM128:
 1214 0410 69E1      		ldi r22,lo8(25)
 1215 0412 8BE0      		ldi r24,lo8(11)
 1216 0414 0E94 0000 		call enc28j60Write
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 1218               	.LM129:
 1219 0418 6FEF      		ldi r22,lo8(-1)
 1220 041a 84E0      		ldi r24,lo8(4)
 1221 041c 0E94 0000 		call enc28j60Write
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 1223               	.LM130:
 1224 0420 69E1      		ldi r22,lo8(25)
 1225 0422 85E0      		ldi r24,lo8(5)
 1226 0424 0E94 0000 		call enc28j60Write
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 1228               	.LM131:
 1229 0428 6FEF      		ldi r22,lo8(-1)
 1230 042a 86E0      		ldi r24,lo8(6)
 1231 042c 0E94 0000 		call enc28j60Write
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 1233               	.LM132:
 1234 0430 6FE1      		ldi r22,lo8(31)
 1235 0432 87E0      		ldi r24,lo8(7)
 1236 0434 0E94 0000 		call enc28j60Write
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 1238               	.LM133:
 1239 0438 62EB      		ldi r22,lo8(-78)
 1240 043a 88E3      		ldi r24,lo8(56)
 1241 043c 0E94 0000 		call enc28j60Write
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 1243               	.LM134:
 1244 0440 6FE3      		ldi r22,lo8(63)
 1245 0442 88E2      		ldi r24,lo8(40)
 1246 0444 0E94 0000 		call enc28j60Write
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 1248               	.LM135:
 1249 0448 60E3      		ldi r22,lo8(48)
 1250 044a 89E2      		ldi r24,lo8(41)
 1251 044c 0E94 0000 		call enc28j60Write
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 1253               	.LM136:
 1254 0450 69EF      		ldi r22,lo8(-7)
 1255 0452 80E3      		ldi r24,lo8(48)
 1256 0454 0E94 0000 		call enc28j60Write
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 1258               	.LM137:
 1259 0458 67EF      		ldi r22,lo8(-9)
 1260 045a 81E3      		ldi r24,lo8(49)
 1261 045c 0E94 0000 		call enc28j60Write
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 1263               	.LM138:
 1264 0460 6DE0      		ldi r22,lo8(13)
 1265 0462 80EC      		ldi r24,lo8(-64)
 1266 0464 0E94 0000 		call enc28j60Write
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 1268               	.LM139:
 1269 0468 60E0      		ldi r22,0
 1270 046a 81EC      		ldi r24,lo8(-63)
 1271 046c 0E94 0000 		call enc28j60Write
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 1273               	.LM140:
 1274 0470 42E3      		ldi r20,lo8(50)
 1275 0472 62EC      		ldi r22,lo8(-62)
 1276 0474 80E8      		ldi r24,lo8(-128)
 1277 0476 0E94 0000 		call enc28j60WriteOp
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 1279               	.LM141:
 1280 047a 62E1      		ldi r22,lo8(18)
 1281 047c 86EC      		ldi r24,lo8(-58)
 1282 047e 0E94 0000 		call enc28j60Write
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 1284               	.LM142:
 1285 0482 6CE0      		ldi r22,lo8(12)
 1286 0484 87EC      		ldi r24,lo8(-57)
 1287 0486 0E94 0000 		call enc28j60Write
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 1289               	.LM143:
 1290 048a 62E1      		ldi r22,lo8(18)
 1291 048c 84EC      		ldi r24,lo8(-60)
 1292 048e 0E94 0000 		call enc28j60Write
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 1294               	.LM144:
 1295 0492 6CED      		ldi r22,lo8(-36)
 1296 0494 8AEC      		ldi r24,lo8(-54)
 1297 0496 0E94 0000 		call enc28j60Write
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 1299               	.LM145:
 1300 049a 65E0      		ldi r22,lo8(5)
 1301 049c 8BEC      		ldi r24,lo8(-53)
 1302 049e 0E94 0000 		call enc28j60Write
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 1304               	.LM146:
 1305 04a2 80E0      		ldi r24,lo8(nicState+2)
 1306 04a4 90E0      		ldi r25,hi8(nicState+2)
 1307 04a6 0E94 0000 		call nicSetMacAddress
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 1309               	.LM147:
 1310 04aa 60E0      		ldi r22,0
 1311 04ac 71E0      		ldi r23,lo8(1)
 1312 04ae 80E1      		ldi r24,lo8(16)
 1313 04b0 0E94 0000 		call enc28j60PhyWrite
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 1315               	.LM148:
 1316 04b4 8FE1      		ldi r24,lo8(31)
 1317 04b6 0E94 0000 		call enc28j60SetBank
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 1319               	.LM149:
 1320 04ba 40EC      		ldi r20,lo8(-64)
 1321 04bc 6BE1      		ldi r22,lo8(27)
 1322 04be 80E8      		ldi r24,lo8(-128)
 1323 04c0 0E94 0000 		call enc28j60WriteOp
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 1325               	.LM150:
 1326 04c4 44E0      		ldi r20,lo8(4)
 1327 04c6 6FE1      		ldi r22,lo8(31)
 1328 04c8 80E8      		ldi r24,lo8(-128)
 1329 04ca 0E94 0000 		call enc28j60WriteOp
 1330               	.LBE17:
 1331               	.LBE16:
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1333               	.LM151:
 1334 04ce 85E0      		ldi r24,lo8(5)
 1335 04d0 90E0      		ldi r25,0
 1336 04d2 0E94 0000 		call vTaskDelay
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
 1338               	.LM152:
 1339 04d6 66E7      		ldi r22,lo8(118)
 1340 04d8 74E0      		ldi r23,lo8(4)
 1341 04da 84E1      		ldi r24,lo8(20)
 1342 04dc 0E94 0000 		call enc28j60PhyWrite
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
 1344               	.LM153:
 1345 04e0 82E0      		ldi r24,lo8(2)
 1346 04e2 90E0      		ldi r25,0
 1347 04e4 0C94 0000 		jmp vTaskDelay
 1349               	.Lscope15:
 1351               		.stabd	78,0,0
 1354               		.weak	nicGetMacAddress
 1356               	nicGetMacAddress:
 1357               		.stabd	46,0,0
 453:../../freeRtos/Lib/enc28j60.c **** 
 454:../../freeRtos/Lib/enc28j60.c **** void     nicGetMacAddress(uint8_t* macaddr)
 455:../../freeRtos/Lib/enc28j60.c **** {
 1359               	.LM154:
 1360               	.LFBB16:
 1361 04e8 CF93      		push r28
 1362 04ea DF93      		push r29
 1363               	/* prologue: function */
 1364               	/* frame size = 0 */
 1365               	/* stack size = 2 */
 1366               	.L__stack_usage = 2
 1367 04ec EC01      		movw r28,r24
 456:../../freeRtos/Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0); 
 1369               	.LM155:
 1370 04ee 81EE      		ldi r24,lo8(-31)
 1371 04f0 0E94 0000 		call enc28j60Read
 1372 04f4 8D83      		std Y+5,r24
 457:../../freeRtos/Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1); 
 1374               	.LM156:
 1375 04f6 80EE      		ldi r24,lo8(-32)
 1376 04f8 0E94 0000 		call enc28j60Read
 1377 04fc 8C83      		std Y+4,r24
 458:../../freeRtos/Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2); 
 1379               	.LM157:
 1380 04fe 83EE      		ldi r24,lo8(-29)
 1381 0500 0E94 0000 		call enc28j60Read
 1382 0504 8B83      		std Y+3,r24
 459:../../freeRtos/Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3); 
 1384               	.LM158:
 1385 0506 82EE      		ldi r24,lo8(-30)
 1386 0508 0E94 0000 		call enc28j60Read
 1387 050c 8A83      		std Y+2,r24
 460:../../freeRtos/Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4); 
 1389               	.LM159:
 1390 050e 85EE      		ldi r24,lo8(-27)
 1391 0510 0E94 0000 		call enc28j60Read
 1392 0514 8983      		std Y+1,r24
 461:../../freeRtos/Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5); 
 1394               	.LM160:
 1395 0516 84EE      		ldi r24,lo8(-28)
 1396 0518 0E94 0000 		call enc28j60Read
 1397 051c 8883      		st Y,r24
 1398               	/* epilogue start */
 462:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 463:../../freeRtos/Lib/enc28j60.c **** }
 1400               	.LM161:
 1401 051e DF91      		pop r29
 1402 0520 CF91      		pop r28
 1403 0522 0895      		ret
 1405               	.Lscope16:
 1407               		.stabd	78,0,0
 1409               		.weak	nicRegDump
 1411               	nicRegDump:
 1412               		.stabd	46,0,0
 464:../../freeRtos/Lib/enc28j60.c **** 
 465:../../freeRtos/Lib/enc28j60.c **** void     nicRegDump(FILE *stream)
 466:../../freeRtos/Lib/enc28j60.c **** {
 1414               	.LM162:
 1415               	.LFBB17:
 1416 0524 CF93      		push r28
 1417 0526 DF93      		push r29
 1418               	/* prologue: function */
 1419               	/* frame size = 0 */
 1420               	/* stack size = 2 */
 1421               	.L__stack_usage = 2
 1422 0528 EC01      		movw r28,r24
 467:../../freeRtos/Lib/enc28j60.c ****   uint8_t temp;
 468:../../freeRtos/Lib/enc28j60.c ****   fprintf_P(stream, PSTR("ENC28j60 stan rejestrow:\r\n"));
 1424               	.LM163:
 1425 052a 20E0      		ldi r18,lo8(__c.3455)
 1426 052c 30E0      		ldi r19,hi8(__c.3455)
 1427 052e 3F93      		push r19
 1428 0530 2F93      		push r18
 1429 0532 DF93      		push r29
 1430 0534 8F93      		push r24
 1431 0536 0E94 0000 		call fprintf_P
 469:../../freeRtos/Lib/enc28j60.c **** 
 470:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR0); fprintf_P(stream, PSTR("\tMAADR0 0x%x\r\n"), temp);
 1433               	.LM164:
 1434 053a 81EE      		ldi r24,lo8(-31)
 1435 053c 0E94 0000 		call enc28j60Read
 1436 0540 1F92      		push __zero_reg__
 1437 0542 8F93      		push r24
 1438 0544 20E0      		ldi r18,lo8(__c.3457)
 1439 0546 30E0      		ldi r19,hi8(__c.3457)
 1440 0548 3F93      		push r19
 1441 054a 2F93      		push r18
 1442 054c DF93      		push r29
 1443 054e CF93      		push r28
 1444 0550 0E94 0000 		call fprintf_P
 471:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR1); fprintf_P(stream, PSTR("\tMAADR1 0x%x\r\n"), temp);
 1446               	.LM165:
 1447 0554 80EE      		ldi r24,lo8(-32)
 1448 0556 0E94 0000 		call enc28j60Read
 1449 055a 1F92      		push __zero_reg__
 1450 055c 8F93      		push r24
 1451 055e 20E0      		ldi r18,lo8(__c.3459)
 1452 0560 30E0      		ldi r19,hi8(__c.3459)
 1453 0562 3F93      		push r19
 1454 0564 2F93      		push r18
 1455 0566 DF93      		push r29
 1456 0568 CF93      		push r28
 1457 056a 0E94 0000 		call fprintf_P
 472:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR2); fprintf_P(stream, PSTR("\tMAADR2 0x%x\r\n"), temp);
 1459               	.LM166:
 1460 056e 83EE      		ldi r24,lo8(-29)
 1461 0570 0E94 0000 		call enc28j60Read
 1462 0574 1F92      		push __zero_reg__
 1463 0576 8F93      		push r24
 1464 0578 20E0      		ldi r18,lo8(__c.3461)
 1465 057a 30E0      		ldi r19,hi8(__c.3461)
 1466 057c 3F93      		push r19
 1467 057e 2F93      		push r18
 1468 0580 DF93      		push r29
 1469 0582 CF93      		push r28
 1470 0584 0E94 0000 		call fprintf_P
 473:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR3); fprintf_P(stream, PSTR("\tMAADR3 0x%x\r\n"), temp);
 1472               	.LM167:
 1473 0588 82EE      		ldi r24,lo8(-30)
 1474 058a 0E94 0000 		call enc28j60Read
 1475 058e 1F92      		push __zero_reg__
 1476 0590 8F93      		push r24
 1477 0592 20E0      		ldi r18,lo8(__c.3463)
 1478 0594 30E0      		ldi r19,hi8(__c.3463)
 1479 0596 3F93      		push r19
 1480 0598 2F93      		push r18
 1481 059a DF93      		push r29
 1482 059c CF93      		push r28
 1483 059e 0E94 0000 		call fprintf_P
 474:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR4); fprintf_P(stream, PSTR("\tMAADR4 0x%x\r\n"), temp);
 1485               	.LM168:
 1486 05a2 85EE      		ldi r24,lo8(-27)
 1487 05a4 0E94 0000 		call enc28j60Read
 1488 05a8 1F92      		push __zero_reg__
 1489 05aa 8F93      		push r24
 1490 05ac 20E0      		ldi r18,lo8(__c.3465)
 1491 05ae 30E0      		ldi r19,hi8(__c.3465)
 1492 05b0 3F93      		push r19
 1493 05b2 2F93      		push r18
 1494 05b4 DF93      		push r29
 1495 05b6 CF93      		push r28
 1496 05b8 0E94 0000 		call fprintf_P
 475:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR5); fprintf_P(stream, PSTR("\tMAADR5 0x%x\r\n"), temp);
 1498               	.LM169:
 1499 05bc 8DB7      		in r24,__SP_L__
 1500 05be 9EB7      		in r25,__SP_H__
 1501 05c0 8296      		adiw r24,34
 1502 05c2 0FB6      		in __tmp_reg__,__SREG__
 1503 05c4 F894      		cli
 1504 05c6 9EBF      		out __SP_H__,r25
 1505 05c8 0FBE      		out __SREG__,__tmp_reg__
 1506 05ca 8DBF      		out __SP_L__,r24
 1507 05cc 84EE      		ldi r24,lo8(-28)
 1508 05ce 0E94 0000 		call enc28j60Read
 1509 05d2 1F92      		push __zero_reg__
 1510 05d4 8F93      		push r24
 1511 05d6 20E0      		ldi r18,lo8(__c.3467)
 1512 05d8 30E0      		ldi r19,hi8(__c.3467)
 1513 05da 3F93      		push r19
 1514 05dc 2F93      		push r18
 1515 05de DF93      		push r29
 1516 05e0 CF93      		push r28
 1517 05e2 0E94 0000 		call fprintf_P
 1518 05e6 0F90      		pop __tmp_reg__
 1519 05e8 0F90      		pop __tmp_reg__
 1520 05ea 0F90      		pop __tmp_reg__
 1521 05ec 0F90      		pop __tmp_reg__
 1522 05ee 0F90      		pop __tmp_reg__
 1523 05f0 0F90      		pop __tmp_reg__
 1524               	/* epilogue start */
 476:../../freeRtos/Lib/enc28j60.c **** }
 1526               	.LM170:
 1527 05f2 DF91      		pop r29
 1528 05f4 CF91      		pop r28
 1529 05f6 0895      		ret
 1531               	.Lscope17:
 1533               		.stabd	78,0,0
 1534               		.section	.progmem.data,"a",@progbits
 1537               	__c.3467:
 1538 0000 094D 4141 		.string	"\tMAADR5 0x%x\r\n"
 1538      4452 3520 
 1538      3078 2578 
 1538      0D0A 00
 1541               	__c.3465:
 1542 000f 094D 4141 		.string	"\tMAADR4 0x%x\r\n"
 1542      4452 3420 
 1542      3078 2578 
 1542      0D0A 00
 1545               	__c.3463:
 1546 001e 094D 4141 		.string	"\tMAADR3 0x%x\r\n"
 1546      4452 3320 
 1546      3078 2578 
 1546      0D0A 00
 1549               	__c.3461:
 1550 002d 094D 4141 		.string	"\tMAADR2 0x%x\r\n"
 1550      4452 3220 
 1550      3078 2578 
 1550      0D0A 00
 1553               	__c.3459:
 1554 003c 094D 4141 		.string	"\tMAADR1 0x%x\r\n"
 1554      4452 3120 
 1554      3078 2578 
 1554      0D0A 00
 1557               	__c.3457:
 1558 004b 094D 4141 		.string	"\tMAADR0 0x%x\r\n"
 1558      4452 3020 
 1558      3078 2578 
 1558      0D0A 00
 1561               	__c.3455:
 1562 005a 454E 4332 		.string	"ENC28j60 stan rejestrow:\r\n"
 1562      386A 3630 
 1562      2073 7461 
 1562      6E20 7265 
 1562      6A65 7374 
 1563               		.local	gNextPacketPtr
 1564               		.comm	gNextPacketPtr,2,1
 1565               		.local	Enc28j60Bank
 1566               		.comm	Enc28j60Bank,1,1
 1567               		.comm	czasRtc,7,1
 1568               		.comm	IpMyConfig,15,1
 1569               		.comm	sockets,2,1
 1570               		.comm	tcpDebugLevel,1,1
 1571               		.comm	tcpDebugStream,2,1
 1572               		.comm	udpDbgLevel,1,1
 1573               		.comm	udpDbgStream,2,1
 1574               		.comm	udpSocket,2,1
 1575               		.comm	icmpDebugLevel,1,1
 1576               		.comm	icmpDebug,2,1
 1577               		.comm	arpDebugLevel,1,1
 1578               		.comm	arpDebug,2,1
 1579               		.comm	plen,2,1
 1580               		.comm	nicState,14,1
 1581               		.comm	xSemaphoreRs485,2,1
 1582               		.comm	lockSensors,2,1
 1583               		.comm	portB,1,1
 1584               		.comm	portA,1,1
 1585               		.comm	xSemaphoreSpiSS,2,1
 1586               		.comm	rollers,2,1
 1587               		.comm	wwwport,1,1
 1588               		.comm	klastry,128,1
 1613               		.weak	spiSend
 1614               		.text
 1616               	.Letext0:
 1617               		.ident	"GCC: (GNU) 4.8.2"
 1618               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 enc28j60.c
     /tmp/cczQU5vd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczQU5vd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczQU5vd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczQU5vd.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cczQU5vd.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczQU5vd.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczQU5vd.s:271    .text:0000000000000000 spiEnableEnc28j60
     /tmp/cczQU5vd.s:288    .text:0000000000000002 spiDisableEnc28j60
     /tmp/cczQU5vd.s:307    .text:0000000000000004 enc28j60WriteOp
     /tmp/cczQU5vd.s:360    .text:000000000000003c enc28j60SetBank
     /tmp/cczQU5vd.s:1564   .bss:0000000000000002 Enc28j60Bank
     /tmp/cczQU5vd.s:420    .text:0000000000000080 enc28j60Write
     /tmp/cczQU5vd.s:463    .text:00000000000000a6 enc28j60ReadOp
     /tmp/cczQU5vd.s:526    .text:00000000000000e8 enc28j60Read
     /tmp/cczQU5vd.s:565    .text:0000000000000108 enc28j60PhyWrite
     /tmp/cczQU5vd.s:627    .text:0000000000000150 enc28j60getrev
     /tmp/cczQU5vd.s:647    .text:0000000000000156 enc28j60hasRxPkt
     /tmp/cczQU5vd.s:676    .text:0000000000000168 enc28j60linkup
     /tmp/cczQU5vd.s:739    .text:00000000000001a4 nicSend
                            *COM*:000000000000000e nicState
     /tmp/cczQU5vd.s:874    .text:000000000000024e nicPoll
                             .bss:0000000000000000 gNextPacketPtr
     /tmp/cczQU5vd.s:1095   .text:000000000000038a nicSetMacAddress
     /tmp/cczQU5vd.s:1151   .text:00000000000003c4 nicMacInit
     /tmp/cczQU5vd.s:1356   .text:00000000000004e8 nicGetMacAddress
     /tmp/cczQU5vd.s:1411   .text:0000000000000524 nicRegDump
     /tmp/cczQU5vd.s:1561   .progmem.data:000000000000005a __c.3455
     /tmp/cczQU5vd.s:1557   .progmem.data:000000000000004b __c.3457
     /tmp/cczQU5vd.s:1553   .progmem.data:000000000000003c __c.3459
     /tmp/cczQU5vd.s:1549   .progmem.data:000000000000002d __c.3461
     /tmp/cczQU5vd.s:1545   .progmem.data:000000000000001e __c.3463
     /tmp/cczQU5vd.s:1541   .progmem.data:000000000000000f __c.3465
     /tmp/cczQU5vd.s:1537   .progmem.data:0000000000000000 __c.3467
                            *COM*:0000000000000007 czasRtc
                            *COM*:000000000000000f IpMyConfig
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000001 arpDebugLevel
                            *COM*:0000000000000002 arpDebug
                            *COM*:0000000000000002 plen
                            *COM*:0000000000000002 xSemaphoreRs485
                            *COM*:0000000000000002 lockSensors
                            *COM*:0000000000000001 portB
                            *COM*:0000000000000001 portA
                            *COM*:0000000000000002 xSemaphoreSpiSS
                            *COM*:0000000000000002 rollers
                            *COM*:0000000000000001 wwwport
                            *COM*:0000000000000080 klastry

UNDEFINED SYMBOLS
spiSend
vTaskDelay
fprintf_P
__do_clear_bss
