   1               		.file	"vt100.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__RAMPY__ = 0x3a
   7               	__RAMPX__ = 0x39
   8               	__RAMPD__ = 0x38
   9               	__CCP__ = 0x34
  10               	__tmp_reg__ = 0
  11               	__zero_reg__ = 1
  14               		.text
  15               	.Ltext0:
 596               		.section	.rodata.str1.1,"aMS",@progbits,1
 597               	.LC0:
 598 0000 1B63 00   		.string	"\033c"
 599               		.text
 602               	.global	vt100Init
 604               	vt100Init:
 605               		.stabd	46,0,0
   1:../../Lib/vt100.c **** /*! \file vt100.c \brief VT100 terminal function library. */
   2:../../Lib/vt100.c **** //*****************************************************************************
   3:../../Lib/vt100.c **** //
   4:../../Lib/vt100.c **** // File Name	: 'vt100.c'
   5:../../Lib/vt100.c **** // Title		: VT100 terminal function library
   6:../../Lib/vt100.c **** // Author		: Pascal Stang - Copyright (C) 2002
   7:../../Lib/vt100.c **** // Created		: 2002.08.27
   8:../../Lib/vt100.c **** // Revised		: 2002.08.27
   9:../../Lib/vt100.c **** // Version		: 0.1
  10:../../Lib/vt100.c **** // Target MCU	: Atmel AVR Series
  11:../../Lib/vt100.c **** // Editor Tabs	: 4
  12:../../Lib/vt100.c **** //
  13:../../Lib/vt100.c **** // NOTE: This code is currently below version 1.0, and therefore is considered
  14:../../Lib/vt100.c **** // to be lacking in some functionality or documentation, or may not be fully
  15:../../Lib/vt100.c **** // tested.  Nonetheless, you can expect most functions to work.
  16:../../Lib/vt100.c **** //
  17:../../Lib/vt100.c **** // This code is distributed under the GNU Public License
  18:../../Lib/vt100.c **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
  19:../../Lib/vt100.c **** //
  20:../../Lib/vt100.c **** //*****************************************************************************
  21:../../Lib/vt100.c **** 
  22:../../Lib/vt100.c **** #ifndef WIN32
  23:../../Lib/vt100.c **** 	#include <avr/io.h>
  24:../../Lib/vt100.c **** 	#include <avr/interrupt.h>
  25:../../Lib/vt100.c **** 	#include <avr/pgmspace.h>
  26:../../Lib/vt100.c **** #endif
  27:../../Lib/vt100.c **** 
  28:../../Lib/vt100.c **** #include "main.h"
  29:../../Lib/vt100.c **** #include "vt100.h"
  30:../../Lib/vt100.c **** #include <stdio.h>
  31:../../Lib/vt100.c **** 
  32:../../Lib/vt100.c **** // Program ROM constants
  33:../../Lib/vt100.c **** 
  34:../../Lib/vt100.c **** // Global variables
  35:../../Lib/vt100.c **** 
  36:../../Lib/vt100.c **** // Functions
  37:../../Lib/vt100.c **** void vt100Init(cmdState_t *state)
  38:../../Lib/vt100.c **** {
 607               	.LM0:
 608               	.LFBB1:
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
  39:../../Lib/vt100.c ****   // initializes terminal to "power-on" settings
  40:../../Lib/vt100.c ****   // ESC c
  41:../../Lib/vt100.c **** 
  42:../../Lib/vt100.c ****  fprintf_P(state->myStdInOut, "\x1B\x63");
 614               	.LM1:
 615 0000 20E0      		ldi r18,lo8(.LC0)
 616 0002 30E0      		ldi r19,hi8(.LC0)
 617 0004 3F93      		push r19
 618 0006 2F93      		push r18
 619 0008 FC01      		movw r30,r24
 620 000a 238D      		ldd r18,Z+27
 621 000c 2F93      		push r18
 622 000e 828D      		ldd r24,Z+26
 623 0010 8F93      		push r24
 624 0012 0E94 0000 		call fprintf_P
 625 0016 0F90      		pop __tmp_reg__
 626 0018 0F90      		pop __tmp_reg__
 627 001a 0F90      		pop __tmp_reg__
 628 001c 0F90      		pop __tmp_reg__
 629 001e 0895      		ret
 631               	.Lscope1:
 633               		.stabd	78,0,0
 634               		.section	.rodata.str1.1
 635               	.LC1:
 636 0003 1B5B 324A 		.string	"\033[2J"
 636      00
 637               		.text
 640               	.global	vt100ClearScreen
 642               	vt100ClearScreen:
 643               		.stabd	46,0,0
  43:../../Lib/vt100.c **** }
  44:../../Lib/vt100.c **** 
  45:../../Lib/vt100.c **** void vt100ClearScreen(cmdState_t *state)
  46:../../Lib/vt100.c **** {
 645               	.LM2:
 646               	.LFBB2:
 647               	/* prologue: function */
 648               	/* frame size = 0 */
 649               	/* stack size = 0 */
 650               	.L__stack_usage = 0
  47:../../Lib/vt100.c ****   // ESC [ 2 J
  48:../../Lib/vt100.c ****   fprintf_P(state->myStdInOut, "\x1B[2J");
 652               	.LM3:
 653 0020 20E0      		ldi r18,lo8(.LC1)
 654 0022 30E0      		ldi r19,hi8(.LC1)
 655 0024 3F93      		push r19
 656 0026 2F93      		push r18
 657 0028 FC01      		movw r30,r24
 658 002a 238D      		ldd r18,Z+27
 659 002c 2F93      		push r18
 660 002e 828D      		ldd r24,Z+26
 661 0030 8F93      		push r24
 662 0032 0E94 0000 		call fprintf_P
 663 0036 0F90      		pop __tmp_reg__
 664 0038 0F90      		pop __tmp_reg__
 665 003a 0F90      		pop __tmp_reg__
 666 003c 0F90      		pop __tmp_reg__
 667 003e 0895      		ret
 669               	.Lscope2:
 671               		.stabd	78,0,0
 672               		.section	.rodata.str1.1
 673               	.LC2:
 674 0008 1B5B 2564 		.string	"\033[%dm"
 674      6D00 
 675               		.text
 679               	.global	vt100SetAttr
 681               	vt100SetAttr:
 682               		.stabd	46,0,0
  49:../../Lib/vt100.c **** }
  50:../../Lib/vt100.c **** 
  51:../../Lib/vt100.c **** void vt100SetAttr(uint8_t attr, cmdState_t *state)
  52:../../Lib/vt100.c **** {
 684               	.LM4:
 685               	.LFBB3:
 686               	/* prologue: function */
 687               	/* frame size = 0 */
 688               	/* stack size = 0 */
 689               	.L__stack_usage = 0
  53:../../Lib/vt100.c ****   // ESC [ Ps m
  54:../../Lib/vt100.c ****   fprintf_P(state->myStdInOut, "\x1B[%dm",attr);
 691               	.LM5:
 692 0040 1F92      		push __zero_reg__
 693 0042 8F93      		push r24
 694 0044 80E0      		ldi r24,lo8(.LC2)
 695 0046 90E0      		ldi r25,hi8(.LC2)
 696 0048 9F93      		push r25
 697 004a 8F93      		push r24
 698 004c FB01      		movw r30,r22
 699 004e 838D      		ldd r24,Z+27
 700 0050 8F93      		push r24
 701 0052 828D      		ldd r24,Z+26
 702 0054 8F93      		push r24
 703 0056 0E94 0000 		call fprintf_P
 704 005a 0F90      		pop __tmp_reg__
 705 005c 0F90      		pop __tmp_reg__
 706 005e 0F90      		pop __tmp_reg__
 707 0060 0F90      		pop __tmp_reg__
 708 0062 0F90      		pop __tmp_reg__
 709 0064 0F90      		pop __tmp_reg__
 710 0066 0895      		ret
 712               	.Lscope3:
 714               		.stabd	78,0,0
 715               		.section	.rodata.str1.1
 716               	.LC3:
 717 000e 1B5B 3F32 		.string	"\033[?25h"
 717      3568 00
 718               	.LC4:
 719 0015 1B5B 3F32 		.string	"\033[?25l"
 719      356C 00
 720               		.text
 724               	.global	vt100SetCursorMode
 726               	vt100SetCursorMode:
 727               		.stabd	46,0,0
  55:../../Lib/vt100.c **** }
  56:../../Lib/vt100.c **** 
  57:../../Lib/vt100.c **** void vt100SetCursorMode(uint8_t visible, cmdState_t *state)
  58:../../Lib/vt100.c **** {
 729               	.LM6:
 730               	.LFBB4:
 731               	/* prologue: function */
 732               	/* frame size = 0 */
 733               	/* stack size = 0 */
 734               	.L__stack_usage = 0
 735 0068 FB01      		movw r30,r22
 736 006a 338D      		ldd r19,Z+27
 737 006c 228D      		ldd r18,Z+26
  59:../../Lib/vt100.c ****   if(visible)
 739               	.LM7:
 740 006e 8823      		tst r24
 741 0070 01F0      		breq .L5
  60:../../Lib/vt100.c ****   // ESC [ ? 25 h
  61:../../Lib/vt100.c ****     fprintf_P(state->myStdInOut, "\x1B[?25h");
 743               	.LM8:
 744 0072 80E0      		ldi r24,lo8(.LC3)
 745 0074 90E0      		ldi r25,hi8(.LC3)
 746 0076 00C0      		rjmp .L7
 747               	.L5:
  62:../../Lib/vt100.c ****   else
  63:../../Lib/vt100.c ****   // ESC [ ? 25 l
  64:../../Lib/vt100.c ****     fprintf_P(state->myStdInOut, "\x1B[?25l");
 749               	.LM9:
 750 0078 80E0      		ldi r24,lo8(.LC4)
 751 007a 90E0      		ldi r25,hi8(.LC4)
 752               	.L7:
 753 007c 9F93      		push r25
 754 007e 8F93      		push r24
 755 0080 3F93      		push r19
 756 0082 2F93      		push r18
 757 0084 0E94 0000 		call fprintf_P
 758 0088 0F90      		pop __tmp_reg__
 759 008a 0F90      		pop __tmp_reg__
 760 008c 0F90      		pop __tmp_reg__
 761 008e 0F90      		pop __tmp_reg__
 762 0090 0895      		ret
 764               	.Lscope4:
 766               		.stabd	78,0,0
 767               		.section	.rodata.str1.1
 768               	.LC5:
 769 001c 1B5B 2564 		.string	"\033[%d;%dH"
 769      3B25 6448 
 769      00
 770               		.text
 775               	.global	vt100SetCursorPos
 777               	vt100SetCursorPos:
 778               		.stabd	46,0,0
  65:../../Lib/vt100.c **** }
  66:../../Lib/vt100.c **** 
  67:../../Lib/vt100.c **** void vt100SetCursorPos(uint8_t line, uint8_t col, cmdState_t *state)
  68:../../Lib/vt100.c **** {
 780               	.LM10:
 781               	.LFBB5:
 782               	/* prologue: function */
 783               	/* frame size = 0 */
 784               	/* stack size = 0 */
 785               	.L__stack_usage = 0
  69:../../Lib/vt100.c ****   // ESC [ Pl ; Pc H
  70:../../Lib/vt100.c ****   fprintf_P(state->myStdInOut, "\x1B[%d;%dH",line,col);
 787               	.LM11:
 788 0092 1F92      		push __zero_reg__
 789 0094 6F93      		push r22
 790 0096 1F92      		push __zero_reg__
 791 0098 8F93      		push r24
 792 009a 80E0      		ldi r24,lo8(.LC5)
 793 009c 90E0      		ldi r25,hi8(.LC5)
 794 009e 9F93      		push r25
 795 00a0 8F93      		push r24
 796 00a2 FA01      		movw r30,r20
 797 00a4 838D      		ldd r24,Z+27
 798 00a6 8F93      		push r24
 799 00a8 828D      		ldd r24,Z+26
 800 00aa 8F93      		push r24
 801 00ac 0E94 0000 		call fprintf_P
 802 00b0 8DB7      		in r24,__SP_L__
 803 00b2 9EB7      		in r25,__SP_H__
 804 00b4 0896      		adiw r24,8
 805 00b6 8DBF      		out __SP_L__,r24
 806 00b8 9EBF      		out __SP_H__,r25
 807 00ba 0895      		ret
 809               	.Lscope5:
 811               		.stabd	78,0,0
 812               		.comm	czasRtc,7,1
 813               		.comm	rollers,2,1
 814               		.comm	sockets,2,1
 815               		.comm	tcpDebugLevel,1,1
 816               		.comm	tcpDebugStream,2,1
 817               		.comm	IpMyConfig,15,1
 818               		.comm	udpDbgLevel,1,1
 819               		.comm	udpDbgStream,2,1
 820               		.comm	udpSocket,2,1
 821               		.comm	icmpDebugLevel,1,1
 822               		.comm	icmpDebug,2,1
 823               		.comm	arpDebugLevel,1,1
 824               		.comm	arpDebug,2,1
 825               		.comm	plen,2,1
 826               		.comm	nicState,14,1
 827               		.comm	klastry,128,1
 828               		.comm	xSemaphoreRs485,2,1
 829               		.comm	lockSensors,2,1
 830               		.comm	portB,1,1
 831               		.comm	portA,1,1
 832               		.comm	xSemaphoreSpiSS,2,1
 833               		.comm	wwwport,1,1
 857               	.Letext0:
 858               		.ident	"GCC: (GNU) 4.8.2"
 859               	.global __do_copy_data
 860               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 vt100.c
     /tmp/ccmP04Dx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmP04Dx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmP04Dx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmP04Dx.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccmP04Dx.s:6      *ABS*:000000000000003a __RAMPY__
     /tmp/ccmP04Dx.s:7      *ABS*:0000000000000039 __RAMPX__
     /tmp/ccmP04Dx.s:8      *ABS*:0000000000000038 __RAMPD__
     /tmp/ccmP04Dx.s:9      *ABS*:0000000000000034 __CCP__
     /tmp/ccmP04Dx.s:10     *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmP04Dx.s:11     *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmP04Dx.s:604    .text:0000000000000000 vt100Init
     /tmp/ccmP04Dx.s:642    .text:0000000000000020 vt100ClearScreen
     /tmp/ccmP04Dx.s:681    .text:0000000000000040 vt100SetAttr
     /tmp/ccmP04Dx.s:726    .text:0000000000000068 vt100SetCursorMode
     /tmp/ccmP04Dx.s:777    .text:0000000000000092 vt100SetCursorPos
                            *COM*:0000000000000007 czasRtc
                            *COM*:0000000000000002 rollers
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:000000000000000f IpMyConfig
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000001 arpDebugLevel
                            *COM*:0000000000000002 arpDebug
                            *COM*:0000000000000002 plen
                            *COM*:000000000000000e nicState
                            *COM*:0000000000000080 klastry
                            *COM*:0000000000000002 xSemaphoreRs485
                            *COM*:0000000000000002 lockSensors
                            *COM*:0000000000000001 portB
                            *COM*:0000000000000001 portA
                            *COM*:0000000000000002 xSemaphoreSpiSS
                            *COM*:0000000000000001 wwwport

UNDEFINED SYMBOLS
fprintf_P
__do_copy_data
__do_clear_bss
