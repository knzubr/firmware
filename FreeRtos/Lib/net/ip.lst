   1               		.file	"ip.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 182               	.global	ipInit
 184               	ipInit:
 185               		.stabd	46,0,0
   1:../../freeRtos/Lib/net/ip.c **** /**
   2:../../freeRtos/Lib/net/ip.c ****  * @file ip.c 
   3:../../freeRtos/Lib/net/ip.c ****  * @brief IP (Internet Protocol) Library. 
   4:../../freeRtos/Lib/net/ip.c ****  */
   5:../../freeRtos/Lib/net/ip.c **** //*****************************************************************************
   6:../../freeRtos/Lib/net/ip.c **** //
   7:../../freeRtos/Lib/net/ip.c **** // File Name	: 'ip.c'
   8:../../freeRtos/Lib/net/ip.c **** // Title		: IP (Internet Protocol) Library
   9:../../freeRtos/Lib/net/ip.c **** // Author		: Pascal Stang
  10:../../freeRtos/Lib/net/ip.c **** // Created		: 8/30/2004
  11:../../freeRtos/Lib/net/ip.c **** // Revised		: 7/3/2005
  12:../../freeRtos/Lib/net/ip.c **** // Version		: 0.1
  13:../../freeRtos/Lib/net/ip.c **** // Target MCU	: Atmel AVR series
  14:../../freeRtos/Lib/net/ip.c **** // Editor Tabs	: 2
  15:../../freeRtos/Lib/net/ip.c **** //
  16:../../freeRtos/Lib/net/ip.c **** //*****************************************************************************
  17:../../freeRtos/Lib/net/ip.c **** 
  18:../../freeRtos/Lib/net/ip.c **** #include "ip.h"
  19:../../freeRtos/Lib/net/ip.c **** 
  20:../../freeRtos/Lib/net/ip.c **** static uint32_t myip_eep    __attribute__((section (".eeprom"))) = ((uint32_t)MY_IP4   << 24) + ((u
  21:../../freeRtos/Lib/net/ip.c **** static uint32_t mask_eep    __attribute__((section (".eeprom"))) = ((uint32_t)MY_MASK4 << 24) + ((u
  22:../../freeRtos/Lib/net/ip.c **** static uint32_t defGw_eep   __attribute__((section (".eeprom"))) = ((uint32_t)MY_GW4   << 24) + ((u
  23:../../freeRtos/Lib/net/ip.c **** 
  24:../../freeRtos/Lib/net/ip.c **** void ipInit(void)
  25:../../freeRtos/Lib/net/ip.c **** {
 187               	.LM0:
 188               	.LFBB1:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
  26:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.ip      = eeprom_read_dword(&myip_eep);
 194               	.LM1:
 195 0000 80E0      		ldi r24,lo8(myip_eep)
 196 0002 90E0      		ldi r25,hi8(myip_eep)
 197 0004 0E94 0000 		call __eerd_dword_m128
 198 0008 6093 0000 		sts IpMyConfig,r22
 199 000c 7093 0000 		sts IpMyConfig+1,r23
 200 0010 8093 0000 		sts IpMyConfig+2,r24
 201 0014 9093 0000 		sts IpMyConfig+3,r25
  27:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.netmask = eeprom_read_dword(&mask_eep);
 203               	.LM2:
 204 0018 80E0      		ldi r24,lo8(mask_eep)
 205 001a 90E0      		ldi r25,hi8(mask_eep)
 206 001c 0E94 0000 		call __eerd_dword_m128
 207 0020 6093 0000 		sts IpMyConfig+4,r22
 208 0024 7093 0000 		sts IpMyConfig+4+1,r23
 209 0028 8093 0000 		sts IpMyConfig+4+2,r24
 210 002c 9093 0000 		sts IpMyConfig+4+3,r25
  28:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.gateway = eeprom_read_dword(&defGw_eep);
 212               	.LM3:
 213 0030 80E0      		ldi r24,lo8(defGw_eep)
 214 0032 90E0      		ldi r25,hi8(defGw_eep)
 215 0034 0E94 0000 		call __eerd_dword_m128
 216 0038 6093 0000 		sts IpMyConfig+8,r22
 217 003c 7093 0000 		sts IpMyConfig+8+1,r23
 218 0040 8093 0000 		sts IpMyConfig+8+2,r24
 219 0044 9093 0000 		sts IpMyConfig+8+3,r25
  29:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  30:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.dbgLevel = 0;
 221               	.LM4:
 222 0048 1092 0000 		sts IpMyConfig+14,__zero_reg__
  31:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.dbgStream = NULL;
 224               	.LM5:
 225 004c 1092 0000 		sts IpMyConfig+12+1,__zero_reg__
 226 0050 1092 0000 		sts IpMyConfig+12,__zero_reg__
 227 0054 0895      		ret
 229               	.Lscope1:
 231               		.stabd	78,0,0
 233               	.global	ipSaveConfig
 235               	ipSaveConfig:
 236               		.stabd	46,0,0
  32:../../freeRtos/Lib/net/ip.c **** #endif
  33:../../freeRtos/Lib/net/ip.c **** }
  34:../../freeRtos/Lib/net/ip.c **** 
  35:../../freeRtos/Lib/net/ip.c **** void ipSaveConfig(void)
  36:../../freeRtos/Lib/net/ip.c **** {
 238               	.LM6:
 239               	.LFBB2:
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
  37:../../freeRtos/Lib/net/ip.c ****   eeprom_update_dword(&myip_eep,  IpMyConfig.ip);
 245               	.LM7:
 246 0056 4091 0000 		lds r20,IpMyConfig
 247 005a 5091 0000 		lds r21,IpMyConfig+1
 248 005e 6091 0000 		lds r22,IpMyConfig+2
 249 0062 7091 0000 		lds r23,IpMyConfig+3
 250 0066 80E0      		ldi r24,lo8(myip_eep)
 251 0068 90E0      		ldi r25,hi8(myip_eep)
 252 006a 0E94 0000 		call __eeupd_dword_m128
  38:../../freeRtos/Lib/net/ip.c ****   eeprom_update_dword(&mask_eep,  IpMyConfig.netmask);
 254               	.LM8:
 255 006e 4091 0000 		lds r20,IpMyConfig+4
 256 0072 5091 0000 		lds r21,IpMyConfig+4+1
 257 0076 6091 0000 		lds r22,IpMyConfig+4+2
 258 007a 7091 0000 		lds r23,IpMyConfig+4+3
 259 007e 80E0      		ldi r24,lo8(mask_eep)
 260 0080 90E0      		ldi r25,hi8(mask_eep)
 261 0082 0E94 0000 		call __eeupd_dword_m128
  39:../../freeRtos/Lib/net/ip.c ****   eeprom_update_dword(&defGw_eep, IpMyConfig.gateway);
 263               	.LM9:
 264 0086 4091 0000 		lds r20,IpMyConfig+8
 265 008a 5091 0000 		lds r21,IpMyConfig+8+1
 266 008e 6091 0000 		lds r22,IpMyConfig+8+2
 267 0092 7091 0000 		lds r23,IpMyConfig+8+3
 268 0096 80E0      		ldi r24,lo8(defGw_eep)
 269 0098 90E0      		ldi r25,hi8(defGw_eep)
 270 009a 0C94 0000 		jmp __eeupd_dword_m128
 272               	.Lscope2:
 274               		.stabd	78,0,0
 276               	.global	netstackIPv4Process
 278               	netstackIPv4Process:
 279               		.stabd	46,0,0
  40:../../freeRtos/Lib/net/ip.c **** }
  41:../../freeRtos/Lib/net/ip.c **** 
  42:../../freeRtos/Lib/net/ip.c **** inline void netstackIPv4Process(void)
  43:../../freeRtos/Lib/net/ip.c **** {
 281               	.LM10:
 282               	.LFBB3:
 283 009e 0F93      		push r16
 284 00a0 1F93      		push r17
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 2 */
 288               	.L__stack_usage = 2
  44:../../freeRtos/Lib/net/ip.c **** // check IP addressing, stop processing if not for me and not a broadcast
  45:../../freeRtos/Lib/net/ip.c ****   if( (nicState.layer3.ip->destipaddr != ipGetConfig()->ip) &&
 290               	.LM11:
 291 00a2 E091 0000 		lds r30,nicState+10
 292 00a6 F091 0000 		lds r31,nicState+10+1
 293 00aa 8089      		ldd r24,Z+16
 294 00ac 9189      		ldd r25,Z+17
 295 00ae A289      		ldd r26,Z+18
 296 00b0 B389      		ldd r27,Z+19
 297 00b2 0091 0000 		lds r16,IpMyConfig
 298 00b6 1091 0000 		lds r17,IpMyConfig+1
 299 00ba 2091 0000 		lds r18,IpMyConfig+2
 300 00be 3091 0000 		lds r19,IpMyConfig+3
 301 00c2 8017      		cp r24,r16
 302 00c4 9107      		cpc r25,r17
 303 00c6 A207      		cpc r26,r18
 304 00c8 B307      		cpc r27,r19
 305 00ca 01F0      		breq .L4
  46:../../freeRtos/Lib/net/ip.c ****       (nicState.layer3.ip->destipaddr != (ipGetConfig()->ip|ipGetConfig()->netmask)) &&
 307               	.LM12:
 308 00cc 4091 0000 		lds r20,IpMyConfig+4
 309 00d0 5091 0000 		lds r21,IpMyConfig+4+1
 310 00d4 6091 0000 		lds r22,IpMyConfig+4+2
 311 00d8 7091 0000 		lds r23,IpMyConfig+4+3
 312 00dc 402B      		or r20,r16
 313 00de 512B      		or r21,r17
 314 00e0 622B      		or r22,r18
 315 00e2 732B      		or r23,r19
  45:../../freeRtos/Lib/net/ip.c ****   if( (nicState.layer3.ip->destipaddr != ipGetConfig()->ip) &&
 317               	.LM13:
 318 00e4 8417      		cp r24,r20
 319 00e6 9507      		cpc r25,r21
 320 00e8 A607      		cpc r26,r22
 321 00ea B707      		cpc r27,r23
 322 00ec 01F0      		breq .L4
 324               	.LM14:
 325 00ee 8F3F      		cpi r24,-1
 326 00f0 9F4F      		sbci r25,-1
 327 00f2 AF4F      		sbci r26,-1
 328 00f4 BF4F      		sbci r27,-1
 329 00f6 01F0      		breq .+2
 330 00f8 00C0      		rjmp .L3
 331               	.L4:
  47:../../freeRtos/Lib/net/ip.c ****       (nicState.layer3.ip->destipaddr != 0xFFFFFFFF)) 
  48:../../freeRtos/Lib/net/ip.c ****     return;
  49:../../freeRtos/Lib/net/ip.c **** 
  50:../../freeRtos/Lib/net/ip.c **** // handle ICMP packet
  51:../../freeRtos/Lib/net/ip.c ****   if(nicState.layer3.ip->proto == IP_PROTO_ICMP)
 333               	.LM15:
 334 00fa 2185      		ldd r18,Z+9
 335 00fc 8091 0000 		lds r24,IpMyConfig+12
 336 0100 9091 0000 		lds r25,IpMyConfig+12+1
 337 0104 2130      		cpi r18,lo8(1)
 338 0106 01F4      		brne .L6
  52:../../freeRtos/Lib/net/ip.c ****   {
  53:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  54:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
 340               	.LM16:
 341 0108 0097      		sbiw r24,0
 342 010a 01F0      		breq .L8
  55:../../freeRtos/Lib/net/ip.c ****     {
  56:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 0)
 344               	.LM17:
 345 010c 2091 0000 		lds r18,IpMyConfig+14
 346 0110 2223      		tst r18
 347 0112 01F0      		breq .L9
  57:../../freeRtos/Lib/net/ip.c ****         fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: ICMP/IP packet\r\n"));
 349               	.LM18:
 350 0114 20E0      		ldi r18,lo8(__c.2599)
 351 0116 30E0      		ldi r19,hi8(__c.2599)
 352 0118 3F93      		push r19
 353 011a 2F93      		push r18
 354 011c 9F93      		push r25
 355 011e 8F93      		push r24
 356 0120 0E94 0000 		call fprintf_P
 357 0124 0F90      		pop __tmp_reg__
 358 0126 0F90      		pop __tmp_reg__
 359 0128 0F90      		pop __tmp_reg__
 360 012a 0F90      		pop __tmp_reg__
 361               	.L9:
  58:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 2)
 363               	.LM19:
 364 012c 8091 0000 		lds r24,IpMyConfig+14
 365 0130 8330      		cpi r24,lo8(3)
 366 0132 00F0      		brlo .L8
  59:../../freeRtos/Lib/net/ip.c ****         icmpPrintHeader(IpMyConfig.dbgStream, nicState.layer3.ip, nicState.layer4.icmp);
 368               	.LM20:
 369 0134 4091 0000 		lds r20,nicState+12
 370 0138 5091 0000 		lds r21,nicState+12+1
 371 013c 6091 0000 		lds r22,nicState+10
 372 0140 7091 0000 		lds r23,nicState+10+1
 373 0144 8091 0000 		lds r24,IpMyConfig+12
 374 0148 9091 0000 		lds r25,IpMyConfig+12+1
 375 014c 0E94 0000 		call icmpPrintHeader
 376               	.L8:
 377               	/* epilogue start */
  60:../../freeRtos/Lib/net/ip.c ****     }
  61:../../freeRtos/Lib/net/ip.c **** #endif /*IP_DEBUG*/
  62:../../freeRtos/Lib/net/ip.c ****     icmpIpIn();
  63:../../freeRtos/Lib/net/ip.c ****     return;
  64:../../freeRtos/Lib/net/ip.c ****   }
  65:../../freeRtos/Lib/net/ip.c ****   if( nicState.layer3.ip->proto == IP_PROTO_UDP )
  66:../../freeRtos/Lib/net/ip.c ****   {
  67:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  68:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
  69:../../freeRtos/Lib/net/ip.c ****     {
  70:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 0)
  71:../../freeRtos/Lib/net/ip.c ****         fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: UDP/IP packet\r\n"));
  72:../../freeRtos/Lib/net/ip.c ****     }
  73:../../freeRtos/Lib/net/ip.c **** #endif /*IP_DEBUG*/
  74:../../freeRtos/Lib/net/ip.c ****     netstackUDPIPProcess();
  75:../../freeRtos/Lib/net/ip.c ****     return;
  76:../../freeRtos/Lib/net/ip.c ****   }
  77:../../freeRtos/Lib/net/ip.c ****   if( nicState.layer3.ip->proto == IP_PROTO_TCP )
  78:../../freeRtos/Lib/net/ip.c ****   {
  79:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  80:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
  81:../../freeRtos/Lib/net/ip.c ****     {
  82:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 0)
  83:../../freeRtos/Lib/net/ip.c ****         fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: TCP/IP packet\r\n"));
  84:../../freeRtos/Lib/net/ip.c ****     }
  85:../../freeRtos/Lib/net/ip.c **** #endif /*IP_DEBUG*/
  86:../../freeRtos/Lib/net/ip.c ****     netstackTCPIPProcess();
  87:../../freeRtos/Lib/net/ip.c ****     return;
  88:../../freeRtos/Lib/net/ip.c ****   }
  89:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  90:../../freeRtos/Lib/net/ip.c ****   if (IpMyConfig.dbgStream != NULL)
  91:../../freeRtos/Lib/net/ip.c ****   {
  92:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgLevel > 0)
  93:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: Unknown IP packet\r\n"));
  94:../../freeRtos/Lib/net/ip.c ****   }
  95:../../freeRtos/Lib/net/ip.c **** #endif /*IP_DEBUG*/
  96:../../freeRtos/Lib/net/ip.c **** }
 379               	.LM21:
 380 0150 1F91      		pop r17
 381 0152 0F91      		pop r16
  62:../../freeRtos/Lib/net/ip.c ****     icmpIpIn();
 383               	.LM22:
 384 0154 0C94 0000 		jmp icmpIpIn
 385               	.L6:
  65:../../freeRtos/Lib/net/ip.c ****   if( nicState.layer3.ip->proto == IP_PROTO_UDP )
 387               	.LM23:
 388 0158 2131      		cpi r18,lo8(17)
 389 015a 01F4      		brne .L11
  68:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
 391               	.LM24:
 392 015c 0097      		sbiw r24,0
 393 015e 01F0      		breq .L12
  70:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 0)
 395               	.LM25:
 396 0160 2091 0000 		lds r18,IpMyConfig+14
 397 0164 2223      		tst r18
 398 0166 01F0      		breq .L12
  71:../../freeRtos/Lib/net/ip.c ****         fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: UDP/IP packet\r\n"));
 400               	.LM26:
 401 0168 20E0      		ldi r18,lo8(__c.2601)
 402 016a 30E0      		ldi r19,hi8(__c.2601)
 403 016c 3F93      		push r19
 404 016e 2F93      		push r18
 405 0170 9F93      		push r25
 406 0172 8F93      		push r24
 407 0174 0E94 0000 		call fprintf_P
 408 0178 0F90      		pop __tmp_reg__
 409 017a 0F90      		pop __tmp_reg__
 410 017c 0F90      		pop __tmp_reg__
 411 017e 0F90      		pop __tmp_reg__
 412               	.L12:
 413               	/* epilogue start */
 415               	.LM27:
 416 0180 1F91      		pop r17
 417 0182 0F91      		pop r16
  74:../../freeRtos/Lib/net/ip.c ****     netstackUDPIPProcess();
 419               	.LM28:
 420 0184 0C94 0000 		jmp netstackUDPIPProcess
 421               	.L11:
  77:../../freeRtos/Lib/net/ip.c ****   if( nicState.layer3.ip->proto == IP_PROTO_TCP )
 423               	.LM29:
 424 0188 2630      		cpi r18,lo8(6)
 425 018a 01F4      		brne .L13
  80:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
 427               	.LM30:
 428 018c 0097      		sbiw r24,0
 429 018e 01F0      		breq .L14
  82:../../freeRtos/Lib/net/ip.c ****       if (IpMyConfig.dbgLevel > 0)
 431               	.LM31:
 432 0190 2091 0000 		lds r18,IpMyConfig+14
 433 0194 2223      		tst r18
 434 0196 01F0      		breq .L14
  83:../../freeRtos/Lib/net/ip.c ****         fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: TCP/IP packet\r\n"));
 436               	.LM32:
 437 0198 20E0      		ldi r18,lo8(__c.2603)
 438 019a 30E0      		ldi r19,hi8(__c.2603)
 439 019c 3F93      		push r19
 440 019e 2F93      		push r18
 441 01a0 9F93      		push r25
 442 01a2 8F93      		push r24
 443 01a4 0E94 0000 		call fprintf_P
 444 01a8 0F90      		pop __tmp_reg__
 445 01aa 0F90      		pop __tmp_reg__
 446 01ac 0F90      		pop __tmp_reg__
 447 01ae 0F90      		pop __tmp_reg__
 448               	.L14:
 449               	/* epilogue start */
 451               	.LM33:
 452 01b0 1F91      		pop r17
 453 01b2 0F91      		pop r16
  86:../../freeRtos/Lib/net/ip.c ****     netstackTCPIPProcess();
 455               	.LM34:
 456 01b4 0C94 0000 		jmp netstackTCPIPProcess
 457               	.L13:
  90:../../freeRtos/Lib/net/ip.c ****   if (IpMyConfig.dbgStream != NULL)
 459               	.LM35:
 460 01b8 0097      		sbiw r24,0
 461 01ba 01F0      		breq .L3
  92:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgLevel > 0)
 463               	.LM36:
 464 01bc 2091 0000 		lds r18,IpMyConfig+14
 465 01c0 2223      		tst r18
 466 01c2 01F0      		breq .L3
  93:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("NET Rx: Unknown IP packet\r\n"));
 468               	.LM37:
 469 01c4 20E0      		ldi r18,lo8(__c.2605)
 470 01c6 30E0      		ldi r19,hi8(__c.2605)
 471 01c8 3F93      		push r19
 472 01ca 2F93      		push r18
 473 01cc 9F93      		push r25
 474 01ce 8F93      		push r24
 475 01d0 0E94 0000 		call fprintf_P
 476 01d4 0F90      		pop __tmp_reg__
 477 01d6 0F90      		pop __tmp_reg__
 478 01d8 0F90      		pop __tmp_reg__
 479 01da 0F90      		pop __tmp_reg__
 480               	.L3:
 481               	/* epilogue start */
 483               	.LM38:
 484 01dc 1F91      		pop r17
 485 01de 0F91      		pop r16
 486 01e0 0895      		ret
 488               	.Lscope3:
 490               		.stabd	78,0,0
 494               	.global	setIpDebug
 496               	setIpDebug:
 497               		.stabd	46,0,0
  97:../../freeRtos/Lib/net/ip.c **** 
  98:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
  99:../../freeRtos/Lib/net/ip.c **** void setIpDebug(FILE *stream, uint8_t level)
 100:../../freeRtos/Lib/net/ip.c **** {
 499               	.LM39:
 500               	.LFBB4:
 501               	/* prologue: function */
 502               	/* frame size = 0 */
 503               	/* stack size = 0 */
 504               	.L__stack_usage = 0
 101:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.dbgStream = stream;
 506               	.LM40:
 507 01e2 9093 0000 		sts IpMyConfig+12+1,r25
 508 01e6 8093 0000 		sts IpMyConfig+12,r24
 102:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.dbgLevel = level;
 510               	.LM41:
 511 01ea 6093 0000 		sts IpMyConfig+14,r22
 103:../../freeRtos/Lib/net/ip.c ****   if (level == 0)
 513               	.LM42:
 514 01ee 6111      		cpse r22,__zero_reg__
 515 01f0 00C0      		rjmp .L37
 104:../../freeRtos/Lib/net/ip.c ****     IpMyConfig.dbgStream = NULL;
 517               	.LM43:
 518 01f2 1092 0000 		sts IpMyConfig+12+1,__zero_reg__
 519 01f6 1092 0000 		sts IpMyConfig+12,__zero_reg__
 520               	.L37:
 521 01fa 0895      		ret
 523               	.Lscope4:
 525               		.stabd	78,0,0
 530               	.global	ipSetConfig
 532               	ipSetConfig:
 533               		.stabd	46,0,0
 105:../../freeRtos/Lib/net/ip.c **** }
 106:../../freeRtos/Lib/net/ip.c **** #endif
 107:../../freeRtos/Lib/net/ip.c **** 
 108:../../freeRtos/Lib/net/ip.c **** void ipSetConfig(uint32_t myIp, uint32_t netmask, uint32_t gatewayIp)
 109:../../freeRtos/Lib/net/ip.c **** {
 535               	.LM44:
 536               	.LFBB5:
 537 01fc EF92      		push r14
 538 01fe FF92      		push r15
 539 0200 0F93      		push r16
 540 0202 1F93      		push r17
 541               	/* prologue: function */
 542               	/* frame size = 0 */
 543               	/* stack size = 4 */
 544               	.L__stack_usage = 4
 110:../../freeRtos/Lib/net/ip.c ****   // set local addressing
 111:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.ip = myIp;
 546               	.LM45:
 547 0204 6093 0000 		sts IpMyConfig,r22
 548 0208 7093 0000 		sts IpMyConfig+1,r23
 549 020c 8093 0000 		sts IpMyConfig+2,r24
 550 0210 9093 0000 		sts IpMyConfig+3,r25
 112:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.netmask = netmask;
 552               	.LM46:
 553 0214 2093 0000 		sts IpMyConfig+4,r18
 554 0218 3093 0000 		sts IpMyConfig+4+1,r19
 555 021c 4093 0000 		sts IpMyConfig+4+2,r20
 556 0220 5093 0000 		sts IpMyConfig+4+3,r21
 113:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.gateway = gatewayIp;
 558               	.LM47:
 559 0224 E092 0000 		sts IpMyConfig+8,r14
 560 0228 F092 0000 		sts IpMyConfig+8+1,r15
 561 022c 0093 0000 		sts IpMyConfig+8+2,r16
 562 0230 1093 0000 		sts IpMyConfig+8+3,r17
 563               	/* epilogue start */
 114:../../freeRtos/Lib/net/ip.c **** }
 565               	.LM48:
 566 0234 1F91      		pop r17
 567 0236 0F91      		pop r16
 568 0238 FF90      		pop r15
 569 023a EF90      		pop r14
 570 023c 0895      		ret
 572               	.Lscope5:
 574               		.stabd	78,0,0
 577               	.global	ipSetConfigIp
 579               	ipSetConfigIp:
 580               		.stabd	46,0,0
 115:../../freeRtos/Lib/net/ip.c **** 
 116:../../freeRtos/Lib/net/ip.c **** void ipSetConfigIp(uint32_t myIp)
 117:../../freeRtos/Lib/net/ip.c **** {
 582               	.LM49:
 583               	.LFBB6:
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 0 */
 587               	.L__stack_usage = 0
 118:../../freeRtos/Lib/net/ip.c ****   // set local addressing
 119:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.ip = myIp; 
 589               	.LM50:
 590 023e 6093 0000 		sts IpMyConfig,r22
 591 0242 7093 0000 		sts IpMyConfig+1,r23
 592 0246 8093 0000 		sts IpMyConfig+2,r24
 593 024a 9093 0000 		sts IpMyConfig+3,r25
 594 024e 0895      		ret
 596               	.Lscope6:
 598               		.stabd	78,0,0
 601               	.global	ipSetConfigMask
 603               	ipSetConfigMask:
 604               		.stabd	46,0,0
 120:../../freeRtos/Lib/net/ip.c **** }
 121:../../freeRtos/Lib/net/ip.c **** 
 122:../../freeRtos/Lib/net/ip.c **** void ipSetConfigMask(uint32_t netmask)
 123:../../freeRtos/Lib/net/ip.c **** {
 606               	.LM51:
 607               	.LFBB7:
 608               	/* prologue: function */
 609               	/* frame size = 0 */
 610               	/* stack size = 0 */
 611               	.L__stack_usage = 0
 124:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.netmask = netmask;
 613               	.LM52:
 614 0250 6093 0000 		sts IpMyConfig+4,r22
 615 0254 7093 0000 		sts IpMyConfig+4+1,r23
 616 0258 8093 0000 		sts IpMyConfig+4+2,r24
 617 025c 9093 0000 		sts IpMyConfig+4+3,r25
 618 0260 0895      		ret
 620               	.Lscope7:
 622               		.stabd	78,0,0
 625               	.global	ipSetConfigGw
 627               	ipSetConfigGw:
 628               		.stabd	46,0,0
 125:../../freeRtos/Lib/net/ip.c **** }
 126:../../freeRtos/Lib/net/ip.c **** 
 127:../../freeRtos/Lib/net/ip.c **** void ipSetConfigGw(uint32_t gatewayIp)
 128:../../freeRtos/Lib/net/ip.c **** {
 630               	.LM53:
 631               	.LFBB8:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 129:../../freeRtos/Lib/net/ip.c ****   IpMyConfig.gateway = gatewayIp;
 637               	.LM54:
 638 0262 6093 0000 		sts IpMyConfig+8,r22
 639 0266 7093 0000 		sts IpMyConfig+8+1,r23
 640 026a 8093 0000 		sts IpMyConfig+8+2,r24
 641 026e 9093 0000 		sts IpMyConfig+8+3,r25
 642 0272 0895      		ret
 644               	.Lscope8:
 646               		.stabd	78,0,0
 648               	.global	ipGetConfig
 650               	ipGetConfig:
 651               		.stabd	46,0,0
 130:../../freeRtos/Lib/net/ip.c **** }
 131:../../freeRtos/Lib/net/ip.c **** 
 132:../../freeRtos/Lib/net/ip.c **** 
 133:../../freeRtos/Lib/net/ip.c **** struct ipConfig* ipGetConfig(void)
 134:../../freeRtos/Lib/net/ip.c **** {
 653               	.LM55:
 654               	.LFBB9:
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 135:../../freeRtos/Lib/net/ip.c ****   return &IpMyConfig;
 136:../../freeRtos/Lib/net/ip.c **** }
 660               	.LM56:
 661 0274 80E0      		ldi r24,lo8(IpMyConfig)
 662 0276 90E0      		ldi r25,hi8(IpMyConfig)
 663 0278 0895      		ret
 665               	.Lscope9:
 667               		.stabd	78,0,0
 668               		.section	.rodata.str1.1,"aMS",@progbits,1
 669               	.LC0:
 670 0000 5365 6E64 		.string	"Sending Ip packet\r\n"
 670      696E 6720 
 670      4970 2070 
 670      6163 6B65 
 670      740D 0A00 
 671               		.text
 676               	.global	ipSend
 678               	ipSend:
 679               		.stabd	46,0,0
 137:../../freeRtos/Lib/net/ip.c **** 
 138:../../freeRtos/Lib/net/ip.c **** void ipSend(uint32_t dstIp, uint8_t protocol, uint16_t len)
 139:../../freeRtos/Lib/net/ip.c **** {
 681               	.LM57:
 682               	.LFBB10:
 683 027a AF92      		push r10
 684 027c BF92      		push r11
 685 027e CF92      		push r12
 686 0280 DF92      		push r13
 687 0282 EF92      		push r14
 688 0284 FF92      		push r15
 689 0286 0F93      		push r16
 690 0288 1F93      		push r17
 691 028a CF93      		push r28
 692 028c DF93      		push r29
 693 028e 1F92      		push __zero_reg__
 694 0290 CDB7      		in r28,__SP_L__
 695 0292 DEB7      		in r29,__SP_H__
 696               	/* prologue: function */
 697               	/* frame size = 1 */
 698               	/* stack size = 11 */
 699               	.L__stack_usage = 11
 700 0294 6B01      		movw r12,r22
 701 0296 7C01      		movw r14,r24
 702 0298 8901      		movw r16,r18
 140:../../freeRtos/Lib/net/ip.c **** // make pointer to ethernet/IP header
 141:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
 142:../../freeRtos/Lib/net/ip.c ****   if (IpMyConfig.dbgStream != NULL)
 704               	.LM58:
 705 029a 8091 0000 		lds r24,IpMyConfig+12
 706 029e 9091 0000 		lds r25,IpMyConfig+12+1
 707 02a2 0097      		sbiw r24,0
 708 02a4 01F0      		breq .L45
 143:../../freeRtos/Lib/net/ip.c ****   {  
 144:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgLevel > 2)
 710               	.LM59:
 711 02a6 2091 0000 		lds r18,IpMyConfig+14
 712 02aa 2330      		cpi r18,lo8(3)
 713 02ac 00F0      		brlo .L45
 145:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, "Sending Ip packet\r\n");
 715               	.LM60:
 716 02ae 20E0      		ldi r18,lo8(.LC0)
 717 02b0 30E0      		ldi r19,hi8(.LC0)
 718 02b2 3F93      		push r19
 719 02b4 2F93      		push r18
 720 02b6 9F93      		push r25
 721 02b8 8F93      		push r24
 722 02ba 4983      		std Y+1,r20
 723 02bc 0E94 0000 		call fprintf_P
 724 02c0 0F90      		pop __tmp_reg__
 725 02c2 0F90      		pop __tmp_reg__
 726 02c4 0F90      		pop __tmp_reg__
 727 02c6 0F90      		pop __tmp_reg__
 728 02c8 4981      		ldd r20,Y+1
 729               	.L45:
 146:../../freeRtos/Lib/net/ip.c ****   }
 147:../../freeRtos/Lib/net/ip.c **** #endif
 148:../../freeRtos/Lib/net/ip.c **** 
 149:../../freeRtos/Lib/net/ip.c **** // adjust length to add IP header
 150:../../freeRtos/Lib/net/ip.c ****   len += IP_HEADER_LEN;
 151:../../freeRtos/Lib/net/ip.c **** 
 152:../../freeRtos/Lib/net/ip.c **** // fill IP header
 153:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->destipaddr = dstIp;
 731               	.LM61:
 732 02ca A090 0000 		lds r10,nicState+10
 733 02ce B090 0000 		lds r11,nicState+10+1
 734 02d2 F501      		movw r30,r10
 735 02d4 C08A      		std Z+16,r12
 736 02d6 D18A      		std Z+17,r13
 737 02d8 E28A      		std Z+18,r14
 738 02da F38A      		std Z+19,r15
 154:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->srcipaddr  = IpMyConfig.ip;
 740               	.LM62:
 741 02dc 8091 0000 		lds r24,IpMyConfig
 742 02e0 9091 0000 		lds r25,IpMyConfig+1
 743 02e4 A091 0000 		lds r26,IpMyConfig+2
 744 02e8 B091 0000 		lds r27,IpMyConfig+3
 745 02ec 8487      		std Z+12,r24
 746 02ee 9587      		std Z+13,r25
 747 02f0 A687      		std Z+14,r26
 748 02f2 B787      		std Z+15,r27
 155:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->proto      = protocol;
 750               	.LM63:
 751 02f4 4187      		std Z+9,r20
 156:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->len        = htons(len);
 753               	.LM64:
 754 02f6 C801      		movw r24,r16
 755 02f8 4496      		adiw r24,20
 756 02fa 0E94 0000 		call htons
 757 02fe F501      		movw r30,r10
 758 0300 9383      		std Z+3,r25
 759 0302 8283      		std Z+2,r24
 157:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->vhl        = 0x45;
 761               	.LM65:
 762 0304 A090 0000 		lds r10,nicState+10
 763 0308 B090 0000 		lds r11,nicState+10+1
 764 030c 85E4      		ldi r24,lo8(69)
 765 030e F501      		movw r30,r10
 766 0310 8083      		st Z,r24
 158:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->tos        = 0;
 768               	.LM66:
 769 0312 1182      		std Z+1,__zero_reg__
 159:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->ipid       = 0;
 771               	.LM67:
 772 0314 1582      		std Z+5,__zero_reg__
 773 0316 1482      		std Z+4,__zero_reg__
 160:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->ipoffset   = 0;
 775               	.LM68:
 776 0318 1782      		std Z+7,__zero_reg__
 777 031a 1682      		std Z+6,__zero_reg__
 161:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->ttl        = IP_TIME_TO_LIVE;
 779               	.LM69:
 780 031c 80E8      		ldi r24,lo8(-128)
 781 031e 8087      		std Z+8,r24
 162:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->ipchksum   = 0;
 783               	.LM70:
 784 0320 1386      		std Z+11,__zero_reg__
 785 0322 1286      		std Z+10,__zero_reg__
 163:../../freeRtos/Lib/net/ip.c **** 
 164:../../freeRtos/Lib/net/ip.c **** // calculate and apply IP checksum
 165:../../freeRtos/Lib/net/ip.c **** // DO THIS ONLY AFTER ALL CHANGES HAVE BEEN MADE TO IP HEADER
 166:../../freeRtos/Lib/net/ip.c ****   nicState.layer3.ip->ipchksum   = netChecksum((uint8_t *)(nicState.layer3.ip), IP_HEADER_LEN);
 787               	.LM71:
 788 0324 64E1      		ldi r22,lo8(20)
 789 0326 70E0      		ldi r23,0
 790 0328 C501      		movw r24,r10
 791 032a 0E94 0000 		call netChecksum
 792 032e F501      		movw r30,r10
 793 0330 9387      		std Z+11,r25
 794 0332 8287      		std Z+10,r24
 167:../../freeRtos/Lib/net/ip.c **** 
 168:../../freeRtos/Lib/net/ip.c **** // add ethernet routing
 169:../../freeRtos/Lib/net/ip.c **** // check if we need to send to gateway
 170:../../freeRtos/Lib/net/ip.c ****   if( (dstIp & IpMyConfig.netmask) == (IpMyConfig.ip & IpMyConfig.netmask) )
 796               	.LM72:
 797 0334 4091 0000 		lds r20,IpMyConfig
 798 0338 5091 0000 		lds r21,IpMyConfig+1
 799 033c 6091 0000 		lds r22,IpMyConfig+2
 800 0340 7091 0000 		lds r23,IpMyConfig+3
 801 0344 4C25      		eor r20,r12
 802 0346 5D25      		eor r21,r13
 803 0348 6E25      		eor r22,r14
 804 034a 7F25      		eor r23,r15
 805 034c 8091 0000 		lds r24,IpMyConfig+4
 806 0350 9091 0000 		lds r25,IpMyConfig+4+1
 807 0354 A091 0000 		lds r26,IpMyConfig+4+2
 808 0358 B091 0000 		lds r27,IpMyConfig+4+3
 809 035c 4823      		and r20,r24
 810 035e 5923      		and r21,r25
 811 0360 6A23      		and r22,r26
 812 0362 7B23      		and r23,r27
 813 0364 452B      		or r20,r21
 814 0366 462B      		or r20,r22
 815 0368 472B      		or r20,r23
 816 036a 01F4      		brne .L46
 171:../../freeRtos/Lib/net/ip.c ****   {
 172:../../freeRtos/Lib/net/ip.c ****     arpIpOut(0);  // local send
 818               	.LM73:
 819 036c 60E0      		ldi r22,0
 820 036e 70E0      		ldi r23,0
 821 0370 CB01      		movw r24,r22
 822 0372 0E94 0000 		call arpIpOut
 173:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
 174:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
 824               	.LM74:
 825 0376 8091 0000 		lds r24,IpMyConfig+12
 826 037a 9091 0000 		lds r25,IpMyConfig+12+1
 827 037e 0097      		sbiw r24,0
 828 0380 01F0      		breq .L48
 175:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("Sending IP packet on local net\r\n"));
 830               	.LM75:
 831 0382 20E0      		ldi r18,lo8(__c.2633)
 832 0384 30E0      		ldi r19,hi8(__c.2633)
 833 0386 00C0      		rjmp .L60
 834               	.L46:
 176:../../freeRtos/Lib/net/ip.c **** #endif
 177:../../freeRtos/Lib/net/ip.c ****   }
 178:../../freeRtos/Lib/net/ip.c ****   else
 179:../../freeRtos/Lib/net/ip.c ****   {
 180:../../freeRtos/Lib/net/ip.c ****     arpIpOut(IpMyConfig.gateway);  // gateway send
 836               	.LM76:
 837 0388 6091 0000 		lds r22,IpMyConfig+8
 838 038c 7091 0000 		lds r23,IpMyConfig+8+1
 839 0390 8091 0000 		lds r24,IpMyConfig+8+2
 840 0394 9091 0000 		lds r25,IpMyConfig+8+3
 841 0398 0E94 0000 		call arpIpOut
 181:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
 182:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgStream != NULL)
 843               	.LM77:
 844 039c 8091 0000 		lds r24,IpMyConfig+12
 845 03a0 9091 0000 		lds r25,IpMyConfig+12+1
 846 03a4 0097      		sbiw r24,0
 847 03a6 01F0      		breq .L48
 183:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("Sending IP packet to gateway\r\n"));
 849               	.LM78:
 850 03a8 20E0      		ldi r18,lo8(__c.2635)
 851 03aa 30E0      		ldi r19,hi8(__c.2635)
 852               	.L60:
 853 03ac 3F93      		push r19
 854 03ae 2F93      		push r18
 855 03b0 9F93      		push r25
 856 03b2 8F93      		push r24
 857 03b4 0E94 0000 		call fprintf_P
 858 03b8 0F90      		pop __tmp_reg__
 859 03ba 0F90      		pop __tmp_reg__
 860 03bc 0F90      		pop __tmp_reg__
 861 03be 0F90      		pop __tmp_reg__
 862               	.L48:
 184:../../freeRtos/Lib/net/ip.c **** #endif
 185:../../freeRtos/Lib/net/ip.c ****   }
 186:../../freeRtos/Lib/net/ip.c **** 
 187:../../freeRtos/Lib/net/ip.c **** // adjust length to add ethernet header
 188:../../freeRtos/Lib/net/ip.c ****   len += ETH_HEADER_LEN;
 864               	.LM79:
 865 03c0 0E5D      		subi r16,-34
 866 03c2 1F4F      		sbci r17,-1
 189:../../freeRtos/Lib/net/ip.c **** 
 190:../../freeRtos/Lib/net/ip.c **** #if IP_DEBUG
 191:../../freeRtos/Lib/net/ip.c ****   if (IpMyConfig.dbgStream != NULL)
 868               	.LM80:
 869 03c4 2091 0000 		lds r18,IpMyConfig+12
 870 03c8 3091 0000 		lds r19,IpMyConfig+12+1
 871 03cc 2115      		cp r18,__zero_reg__
 872 03ce 3105      		cpc r19,__zero_reg__
 873 03d0 01F0      		breq .L50
 192:../../freeRtos/Lib/net/ip.c ****   {
 193:../../freeRtos/Lib/net/ip.c ****     if (IpMyConfig.dbgLevel > 3)
 875               	.LM81:
 876 03d2 8091 0000 		lds r24,IpMyConfig+14
 877 03d6 8430      		cpi r24,lo8(4)
 878 03d8 00F0      		brlo .L50
 194:../../freeRtos/Lib/net/ip.c ****     {
 195:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("debugPrintHexTable(ETH_HEADER_LEN, &data[0]);"));
 880               	.LM82:
 881 03da 40E0      		ldi r20,lo8(__c.2637)
 882 03dc 50E0      		ldi r21,hi8(__c.2637)
 883 03de 5F93      		push r21
 884 03e0 4F93      		push r20
 885 03e2 3F93      		push r19
 886 03e4 2F93      		push r18
 887 03e6 0E94 0000 		call fprintf_P
 196:../../freeRtos/Lib/net/ip.c ****       fprintf_P(IpMyConfig.dbgStream, PSTR("debugPrintHexTable(len-ETH_HEADER_LEN, &data[ETH_HEADER
 889               	.LM83:
 890 03ea 20E0      		ldi r18,lo8(__c.2639)
 891 03ec 30E0      		ldi r19,hi8(__c.2639)
 892 03ee 3F93      		push r19
 893 03f0 2F93      		push r18
 894 03f2 8091 0000 		lds r24,IpMyConfig+13
 895 03f6 8F93      		push r24
 896 03f8 8091 0000 		lds r24,IpMyConfig+12
 897 03fc 8F93      		push r24
 898 03fe 0E94 0000 		call fprintf_P
 899 0402 0FB6      		in __tmp_reg__,__SREG__
 900 0404 F894      		cli
 901 0406 DEBF      		out __SP_H__,r29
 902 0408 0FBE      		out __SREG__,__tmp_reg__
 903 040a CDBF      		out __SP_L__,r28
 904               	.L50:
 197:../../freeRtos/Lib/net/ip.c ****     }
 198:../../freeRtos/Lib/net/ip.c ****   }
 199:../../freeRtos/Lib/net/ip.c **** #endif
 200:../../freeRtos/Lib/net/ip.c **** // send it
 201:../../freeRtos/Lib/net/ip.c ****   nicSend(len);
 906               	.LM84:
 907 040c C801      		movw r24,r16
 908               	/* epilogue start */
 202:../../freeRtos/Lib/net/ip.c **** }
 910               	.LM85:
 911 040e 0F90      		pop __tmp_reg__
 912 0410 DF91      		pop r29
 913 0412 CF91      		pop r28
 914 0414 1F91      		pop r17
 915 0416 0F91      		pop r16
 916 0418 FF90      		pop r15
 917 041a EF90      		pop r14
 918 041c DF90      		pop r13
 919 041e CF90      		pop r12
 920 0420 BF90      		pop r11
 921 0422 AF90      		pop r10
 201:../../freeRtos/Lib/net/ip.c ****   nicSend(len);
 923               	.LM86:
 924 0424 0C94 0000 		jmp nicSend
 926               	.Lscope10:
 928               		.stabd	78,0,0
 931               	.global	ipPrintConfig
 933               	ipPrintConfig:
 934               		.stabd	46,0,0
 203:../../freeRtos/Lib/net/ip.c **** 
 204:../../freeRtos/Lib/net/ip.c **** void ipPrintConfig(FILE *stream, struct ipConfig* config)
 205:../../freeRtos/Lib/net/ip.c **** {
 936               	.LM87:
 937               	.LFBB11:
 938 0428 0F93      		push r16
 939 042a 1F93      		push r17
 940 042c CF93      		push r28
 941 042e DF93      		push r29
 942               	/* prologue: function */
 943               	/* frame size = 0 */
 944               	/* stack size = 4 */
 945               	.L__stack_usage = 4
 946 0430 182F      		mov r17,r24
 947 0432 092F      		mov r16,r25
 948 0434 EB01      		movw r28,r22
 206:../../freeRtos/Lib/net/ip.c ****   fprintf_P(stream, PSTR("IP Addr : ")); netPrintIPAddr(stream, config->ip);        fprintf_P(strea
 950               	.LM88:
 951 0436 80E0      		ldi r24,lo8(__c.2645)
 952 0438 90E0      		ldi r25,hi8(__c.2645)
 953 043a 9F93      		push r25
 954 043c 8F93      		push r24
 955 043e 0F93      		push r16
 956 0440 1F93      		push r17
 957 0442 0E94 0000 		call fprintf_P
 958 0446 4881      		ld r20,Y
 959 0448 5981      		ldd r21,Y+1
 960 044a 6A81      		ldd r22,Y+2
 961 044c 7B81      		ldd r23,Y+3
 962 044e 812F      		mov r24,r17
 963 0450 902F      		mov r25,r16
 964 0452 0E94 0000 		call netPrintIPAddr
 965 0456 80E0      		ldi r24,lo8(__c.2647)
 966 0458 90E0      		ldi r25,hi8(__c.2647)
 967 045a 9F93      		push r25
 968 045c 8F93      		push r24
 969 045e 0F93      		push r16
 970 0460 1F93      		push r17
 971 0462 0E94 0000 		call fprintf_P
 207:../../freeRtos/Lib/net/ip.c ****   fprintf_P(stream, PSTR("Netmask : ")); netPrintIPAddr(stream, config->netmask);   fprintf_P(strea
 973               	.LM89:
 974 0466 80E0      		ldi r24,lo8(__c.2649)
 975 0468 90E0      		ldi r25,hi8(__c.2649)
 976 046a 9F93      		push r25
 977 046c 8F93      		push r24
 978 046e 0F93      		push r16
 979 0470 1F93      		push r17
 980 0472 0E94 0000 		call fprintf_P
 981 0476 4C81      		ldd r20,Y+4
 982 0478 5D81      		ldd r21,Y+5
 983 047a 6E81      		ldd r22,Y+6
 984 047c 7F81      		ldd r23,Y+7
 985 047e 812F      		mov r24,r17
 986 0480 902F      		mov r25,r16
 987 0482 0E94 0000 		call netPrintIPAddr
 988 0486 80E0      		ldi r24,lo8(__c.2651)
 989 0488 90E0      		ldi r25,hi8(__c.2651)
 990 048a 9F93      		push r25
 991 048c 8F93      		push r24
 992 048e 0F93      		push r16
 993 0490 1F93      		push r17
 994 0492 0E94 0000 		call fprintf_P
 208:../../freeRtos/Lib/net/ip.c ****   fprintf_P(stream, PSTR("Gateway : ")); netPrintIPAddr(stream, config->gateway);   fprintf_P(strea
 996               	.LM90:
 997 0496 80E0      		ldi r24,lo8(__c.2653)
 998 0498 90E0      		ldi r25,hi8(__c.2653)
 999 049a 9F93      		push r25
 1000 049c 8F93      		push r24
 1001 049e 0F93      		push r16
 1002 04a0 1F93      		push r17
 1003 04a2 0E94 0000 		call fprintf_P
 1004 04a6 4885      		ldd r20,Y+8
 1005 04a8 5985      		ldd r21,Y+9
 1006 04aa 6A85      		ldd r22,Y+10
 1007 04ac 7B85      		ldd r23,Y+11
 1008 04ae 812F      		mov r24,r17
 1009 04b0 902F      		mov r25,r16
 1010 04b2 0E94 0000 		call netPrintIPAddr
 1011 04b6 20E0      		ldi r18,lo8(__c.2655)
 1012 04b8 30E0      		ldi r19,hi8(__c.2655)
 1013 04ba 3F93      		push r19
 1014 04bc 2F93      		push r18
 1015 04be 0F93      		push r16
 1016 04c0 1F93      		push r17
 1017 04c2 0E94 0000 		call fprintf_P
 1018 04c6 8DB7      		in r24,__SP_L__
 1019 04c8 9EB7      		in r25,__SP_H__
 1020 04ca 4896      		adiw r24,24
 1021 04cc 0FB6      		in __tmp_reg__,__SREG__
 1022 04ce F894      		cli
 1023 04d0 9EBF      		out __SP_H__,r25
 1024 04d2 0FBE      		out __SREG__,__tmp_reg__
 1025 04d4 8DBF      		out __SP_L__,r24
 1026               	/* epilogue start */
 209:../../freeRtos/Lib/net/ip.c **** }
 1028               	.LM91:
 1029 04d6 DF91      		pop r29
 1030 04d8 CF91      		pop r28
 1031 04da 1F91      		pop r17
 1032 04dc 0F91      		pop r16
 1033 04de 0895      		ret
 1035               	.Lscope11:
 1037               		.stabd	78,0,0
 1038               		.section	.progmem.data,"a",@progbits
 1041               	__c.2655:
 1042 0000 0D0A 00   		.string	"\r\n"
 1045               	__c.2653:
 1046 0003 4761 7465 		.string	"Gateway : "
 1046      7761 7920 
 1046      3A20 00
 1049               	__c.2651:
 1050 000e 0D0A 00   		.string	"\r\n"
 1053               	__c.2649:
 1054 0011 4E65 746D 		.string	"Netmask : "
 1054      6173 6B20 
 1054      3A20 00
 1057               	__c.2647:
 1058 001c 0D0A 00   		.string	"\r\n"
 1061               	__c.2645:
 1062 001f 4950 2041 		.string	"IP Addr : "
 1062      6464 7220 
 1062      3A20 00
 1065               	__c.2639:
 1066 002a 6465 6275 		.string	"debugPrintHexTable(len-ETH_HEADER_LEN, &data[ETH_HEADER_LEN]);"
 1066      6750 7269 
 1066      6E74 4865 
 1066      7854 6162 
 1066      6C65 286C 
 1069               	__c.2637:
 1070 0069 6465 6275 		.string	"debugPrintHexTable(ETH_HEADER_LEN, &data[0]);"
 1070      6750 7269 
 1070      6E74 4865 
 1070      7854 6162 
 1070      6C65 2845 
 1073               	__c.2635:
 1074 0097 5365 6E64 		.string	"Sending IP packet to gateway\r\n"
 1074      696E 6720 
 1074      4950 2070 
 1074      6163 6B65 
 1074      7420 746F 
 1077               	__c.2633:
 1078 00b6 5365 6E64 		.string	"Sending IP packet on local net\r\n"
 1078      696E 6720 
 1078      4950 2070 
 1078      6163 6B65 
 1078      7420 6F6E 
 1081               	__c.2605:
 1082 00d7 4E45 5420 		.string	"NET Rx: Unknown IP packet\r\n"
 1082      5278 3A20 
 1082      556E 6B6E 
 1082      6F77 6E20 
 1082      4950 2070 
 1085               	__c.2603:
 1086 00f3 4E45 5420 		.string	"NET Rx: TCP/IP packet\r\n"
 1086      5278 3A20 
 1086      5443 502F 
 1086      4950 2070 
 1086      6163 6B65 
 1089               	__c.2601:
 1090 010b 4E45 5420 		.string	"NET Rx: UDP/IP packet\r\n"
 1090      5278 3A20 
 1090      5544 502F 
 1090      4950 2070 
 1090      6163 6B65 
 1093               	__c.2599:
 1094 0123 4E45 5420 		.string	"NET Rx: ICMP/IP packet\r\n"
 1094      5278 3A20 
 1094      4943 4D50 
 1094      2F49 5020 
 1094      7061 636B 
 1095               		.section	.eeprom,"aw",@progbits
 1098               	defGw_eep:
 1099 0000 C0        		.byte	-64
 1100 0001 A8        		.byte	-88
 1101 0002 00        		.byte	0
 1102 0003 01        		.byte	1
 1105               	mask_eep:
 1106 0004 FF        		.byte	-1
 1107 0005 FF        		.byte	-1
 1108 0006 FF        		.byte	-1
 1109 0007 00        		.byte	0
 1112               	myip_eep:
 1113 0008 C0        		.byte	-64
 1114 0009 A8        		.byte	-88
 1115 000a 00        		.byte	0
 1116 000b 02        		.byte	2
 1117               		.comm	IpMyConfig,15,1
 1118               		.comm	sockets,2,1
 1119               		.comm	tcpDebugLevel,1,1
 1120               		.comm	tcpDebugStream,2,1
 1121               		.comm	udpDbgLevel,1,1
 1122               		.comm	udpDbgStream,2,1
 1123               		.comm	udpSocket,2,1
 1124               		.comm	icmpDebugLevel,1,1
 1125               		.comm	icmpDebug,2,1
 1126               		.comm	arpDebugLevel,1,1
 1127               		.comm	arpDebug,2,1
 1128               		.comm	plen,2,1
 1129               		.comm	nicState,14,1
 1130               		.comm	wwwport,1,1
 1148               		.weak	nicSend
 1149               		.text
 1151               	.Letext0:
 1152               		.ident	"GCC: (GNU) 4.8.2"
 1153               	.global __do_copy_data
 1154               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ip.c
     /tmp/cc8xhjjm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8xhjjm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8xhjjm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8xhjjm.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc8xhjjm.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8xhjjm.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8xhjjm.s:184    .text:0000000000000000 ipInit
     /tmp/cc8xhjjm.s:1112   .eeprom:0000000000000008 myip_eep
                            *COM*:000000000000000f IpMyConfig
     /tmp/cc8xhjjm.s:1105   .eeprom:0000000000000004 mask_eep
     /tmp/cc8xhjjm.s:1098   .eeprom:0000000000000000 defGw_eep
     /tmp/cc8xhjjm.s:235    .text:0000000000000056 ipSaveConfig
     /tmp/cc8xhjjm.s:278    .text:000000000000009e netstackIPv4Process
                            *COM*:000000000000000e nicState
     /tmp/cc8xhjjm.s:1093   .progmem.data:0000000000000123 __c.2599
     /tmp/cc8xhjjm.s:1089   .progmem.data:000000000000010b __c.2601
     /tmp/cc8xhjjm.s:1085   .progmem.data:00000000000000f3 __c.2603
     /tmp/cc8xhjjm.s:1081   .progmem.data:00000000000000d7 __c.2605
     /tmp/cc8xhjjm.s:496    .text:00000000000001e2 setIpDebug
     /tmp/cc8xhjjm.s:532    .text:00000000000001fc ipSetConfig
     /tmp/cc8xhjjm.s:579    .text:000000000000023e ipSetConfigIp
     /tmp/cc8xhjjm.s:603    .text:0000000000000250 ipSetConfigMask
     /tmp/cc8xhjjm.s:627    .text:0000000000000262 ipSetConfigGw
     /tmp/cc8xhjjm.s:650    .text:0000000000000274 ipGetConfig
     /tmp/cc8xhjjm.s:678    .text:000000000000027a ipSend
     /tmp/cc8xhjjm.s:1077   .progmem.data:00000000000000b6 __c.2633
     /tmp/cc8xhjjm.s:1073   .progmem.data:0000000000000097 __c.2635
     /tmp/cc8xhjjm.s:1069   .progmem.data:0000000000000069 __c.2637
     /tmp/cc8xhjjm.s:1065   .progmem.data:000000000000002a __c.2639
     /tmp/cc8xhjjm.s:933    .text:0000000000000428 ipPrintConfig
     /tmp/cc8xhjjm.s:1061   .progmem.data:000000000000001f __c.2645
     /tmp/cc8xhjjm.s:1057   .progmem.data:000000000000001c __c.2647
     /tmp/cc8xhjjm.s:1053   .progmem.data:0000000000000011 __c.2649
     /tmp/cc8xhjjm.s:1049   .progmem.data:000000000000000e __c.2651
     /tmp/cc8xhjjm.s:1045   .progmem.data:0000000000000003 __c.2653
     /tmp/cc8xhjjm.s:1041   .progmem.data:0000000000000000 __c.2655
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000001 arpDebugLevel
                            *COM*:0000000000000002 arpDebug
                            *COM*:0000000000000002 plen
                            *COM*:0000000000000001 wwwport

UNDEFINED SYMBOLS
__eerd_dword_m128
__eeupd_dword_m128
fprintf_P
icmpPrintHeader
icmpIpIn
netstackUDPIPProcess
netstackTCPIPProcess
htons
netChecksum
arpIpOut
nicSend
netPrintIPAddr
__do_copy_data
__do_clear_bss
