   1               		.file	"arp.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 187               	.global	setArpDebug
 189               	setArpDebug:
 190               		.stabd	46,0,0
   1:../../freeRtos/Lib/net/arp.c **** /**
   2:../../freeRtos/Lib/net/arp.c ****  * @file      arp.c
   3:../../freeRtos/Lib/net/arp.c ****  * @version   0.2
   4:../../freeRtos/Lib/net/arp.c ****  * @author    Pascal Stang, Adam Kaliszan
   5:../../freeRtos/Lib/net/arp.c ****  * \brief     ARP Protocol Library. 
   6:../../freeRtos/Lib/net/arp.c ****  *
   7:../../freeRtos/Lib/net/arp.c ****  * Created       :  7.09.2004
   8:../../freeRtos/Lib/net/arp.c ****  * Revised       : 29.11.2010
   9:../../freeRtos/Lib/net/arp.c ****  * Editor Tabs   : 4
  10:../../freeRtos/Lib/net/arp.c ****  *
  11:../../freeRtos/Lib/net/arp.c ****  */
  12:../../freeRtos/Lib/net/arp.c **** 
  13:../../freeRtos/Lib/net/arp.c **** 
  14:../../freeRtos/Lib/net/arp.c **** #include "arp.h"
  15:../../freeRtos/Lib/net/arp.c **** 
  16:../../freeRtos/Lib/net/arp.c **** 
  17:../../freeRtos/Lib/net/arp.c **** /// Single ARP table entry/record
  18:../../freeRtos/Lib/net/arp.c **** struct ArpEntry
  19:../../freeRtos/Lib/net/arp.c **** {
  20:../../freeRtos/Lib/net/arp.c ****   uint32_t ipaddr;                           ///< remote-note IP address
  21:../../freeRtos/Lib/net/arp.c ****   struct netEthAddr ethaddr;                 ///< remote-node ethernet (hardware/mac) address
  22:../../freeRtos/Lib/net/arp.c ****   uint8_t time;                              ///< time to live (in ARP table); this is decremented 
  23:../../freeRtos/Lib/net/arp.c **** };
  24:../../freeRtos/Lib/net/arp.c **** 
  25:../../freeRtos/Lib/net/arp.c **** // global variables
  26:../../freeRtos/Lib/net/arp.c **** struct ArpEntry ArpTable[ARP_TABLE_SIZE];    ///< ARP table of matched IP<->MAC associations
  27:../../freeRtos/Lib/net/arp.c **** 
  28:../../freeRtos/Lib/net/arp.c **** #ifdef ARP_DEBUG
  29:../../freeRtos/Lib/net/arp.c **** 
  30:../../freeRtos/Lib/net/arp.c **** void setArpDebug(FILE *stream, uint8_t level)
  31:../../freeRtos/Lib/net/arp.c **** {
 192               	.LM0:
 193               	.LFBB1:
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
  32:../../freeRtos/Lib/net/arp.c ****   arpDebug = stream;
 199               	.LM1:
 200 0000 9093 0000 		sts arpDebug+1,r25
 201 0004 8093 0000 		sts arpDebug,r24
  33:../../freeRtos/Lib/net/arp.c ****   arpDebugLevel = level;
 203               	.LM2:
 204 0008 6093 0000 		sts arpDebugLevel,r22
  34:../../freeRtos/Lib/net/arp.c ****   if (level == 0)
 206               	.LM3:
 207 000c 6111      		cpse r22,__zero_reg__
 208 000e 00C0      		rjmp .L1
  35:../../freeRtos/Lib/net/arp.c ****     arpDebug = NULL;
 210               	.LM4:
 211 0010 1092 0000 		sts arpDebug+1,__zero_reg__
 212 0014 1092 0000 		sts arpDebug,__zero_reg__
 213               	.L1:
 214 0018 0895      		ret
 216               	.Lscope1:
 218               		.stabd	78,0,0
 220               	.global	arpInit
 222               	arpInit:
 223               		.stabd	46,0,0
  36:../../freeRtos/Lib/net/arp.c **** }
  37:../../freeRtos/Lib/net/arp.c **** #endif /*ARP_DEBUG*/
  38:../../freeRtos/Lib/net/arp.c **** 
  39:../../freeRtos/Lib/net/arp.c **** void arpInit()
  40:../../freeRtos/Lib/net/arp.c **** {
 225               	.LM5:
 226               	.LFBB2:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
  41:../../freeRtos/Lib/net/arp.c **** 
  42:../../freeRtos/Lib/net/arp.c ****   memset(ArpTable, 0, sizeof(ArpTable));
 232               	.LM6:
 233 001a 8EE6      		ldi r24,lo8(110)
 234 001c E0E0      		ldi r30,lo8(ArpTable)
 235 001e F0E0      		ldi r31,hi8(ArpTable)
 236 0020 DF01      		movw r26,r30
 237               		0:
 238 0022 1D92      		st X+,__zero_reg__
 239 0024 8A95      		dec r24
 240 0026 01F4      		brne 0b
  43:../../freeRtos/Lib/net/arp.c ****   arpDebug = NULL;
 242               	.LM7:
 243 0028 1092 0000 		sts arpDebug+1,__zero_reg__
 244 002c 1092 0000 		sts arpDebug,__zero_reg__
 245 0030 0895      		ret
 247               	.Lscope2:
 249               		.stabd	78,0,0
 251               	.global	arpTimer
 253               	arpTimer:
 254               		.stabd	46,0,0
  44:../../freeRtos/Lib/net/arp.c **** }
  45:../../freeRtos/Lib/net/arp.c **** 
  46:../../freeRtos/Lib/net/arp.c **** void arpArpIn(void)
  47:../../freeRtos/Lib/net/arp.c **** {
  48:../../freeRtos/Lib/net/arp.c **** #ifdef ARP_DEBUG
  49:../../freeRtos/Lib/net/arp.c ****   if (arpDebug != NULL)
  50:../../freeRtos/Lib/net/arp.c ****   {
  51:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 1)
  52:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("Received ARP Request\r\n"));
  53:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 2)
  54:../../freeRtos/Lib/net/arp.c ****       arpPrintHeader(arpDebug, nicState.layer3.arp);   
  55:../../freeRtos/Lib/net/arp.c ****   }
  56:../../freeRtos/Lib/net/arp.c **** #endif
  57:../../freeRtos/Lib/net/arp.c **** 
  58:../../freeRtos/Lib/net/arp.c **** // for now, we just reply to requests
  59:../../freeRtos/Lib/net/arp.c **** // need to add ARP cache
  60:../../freeRtos/Lib/net/arp.c ****   if((nicState.layer3.arp->dipaddr == IpMyConfig.ip) && (nicState.layer3.arp->opcode == htons(ARP_O
  61:../../freeRtos/Lib/net/arp.c ****   {
  62:../../freeRtos/Lib/net/arp.c **** // in ARP header
  63:../../freeRtos/Lib/net/arp.c **** // copy sender's address info to dest. fields
  64:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->dhwaddr = nicState.layer3.arp->shwaddr;
  65:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->dipaddr = nicState.layer3.arp->sipaddr;
  66:../../freeRtos/Lib/net/arp.c **** // fill in our information
  67:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->shwaddr =  nicState.mac;
  68:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->sipaddr =  IpMyConfig.ip;
  69:../../freeRtos/Lib/net/arp.c **** // change op to reply
  70:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->opcode = htons(ARP_OPCODE_REPLY);
  71:../../freeRtos/Lib/net/arp.c **** 
  72:../../freeRtos/Lib/net/arp.c **** // in ethernet header
  73:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->dest = nicState.layer2.ethHeader->src;
  74:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src  = nicState.mac;
  75:../../freeRtos/Lib/net/arp.c **** 
  76:../../freeRtos/Lib/net/arp.c **** #ifdef ARP_DEBUG
  77:../../freeRtos/Lib/net/arp.c ****     if (arpDebug != NULL)
  78:../../freeRtos/Lib/net/arp.c ****     {
  79:../../freeRtos/Lib/net/arp.c ****       if (arpDebugLevel > 0)
  80:../../freeRtos/Lib/net/arp.c ****         fprintf_P(arpDebug, PSTR("Sending ARP Reply\r\n"));
  81:../../freeRtos/Lib/net/arp.c ****       if (arpDebugLevel > 2)
  82:../../freeRtos/Lib/net/arp.c ****         arpPrintHeader(arpDebug, nicState.layer3.arp);
  83:../../freeRtos/Lib/net/arp.c ****     }
  84:../../freeRtos/Lib/net/arp.c **** #endif
  85:../../freeRtos/Lib/net/arp.c **** // send reply!
  86:../../freeRtos/Lib/net/arp.c ****     nicSend(sizeof(struct netArpHeader) + ETH_HEADER_LEN);
  87:../../freeRtos/Lib/net/arp.c ****   }
  88:../../freeRtos/Lib/net/arp.c **** }
  89:../../freeRtos/Lib/net/arp.c **** 
  90:../../freeRtos/Lib/net/arp.c **** void arpIpIn(void)
  91:../../freeRtos/Lib/net/arp.c **** {
  92:../../freeRtos/Lib/net/arp.c **** #ifdef ARP_DEBUG
  93:../../freeRtos/Lib/net/arp.c ****   if (arpDebug != NULL)
  94:../../freeRtos/Lib/net/arp.c ****   {
  95:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 0)
  96:../../freeRtos/Lib/net/arp.c ****     {
  97:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("ARP IP in MAC: "));
  98:../../freeRtos/Lib/net/arp.c ****       netPrintEthAddr(arpDebug, &nicState.layer2.ethHeader->src);
  99:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR(" IP: "));
 100:../../freeRtos/Lib/net/arp.c ****       netPrintIPAddr(arpDebug, nicState.layer3.ip->srcipaddr);
 101:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("\r\n"));
 102:../../freeRtos/Lib/net/arp.c ****     }
 103:../../freeRtos/Lib/net/arp.c ****   }
 104:../../freeRtos/Lib/net/arp.c **** #endif
 105:../../freeRtos/Lib/net/arp.c ****   int8_t index;
 106:../../freeRtos/Lib/net/arp.c **** 
 107:../../freeRtos/Lib/net/arp.c **** // check if sender is already present in arp table
 108:../../freeRtos/Lib/net/arp.c ****   index = arpMatchIp(nicState.layer3.ip->srcipaddr);
 109:../../freeRtos/Lib/net/arp.c ****   if(index != -1)
 110:../../freeRtos/Lib/net/arp.c ****   {
 111:../../freeRtos/Lib/net/arp.c **** // sender's IP address found, update ARP entry
 112:../../freeRtos/Lib/net/arp.c ****     ArpTable[index].ethaddr = nicState.layer2.ethHeader->src;
 113:../../freeRtos/Lib/net/arp.c ****     ArpTable[index].time = ARP_CACHE_TIME_TO_LIVE;
 114:../../freeRtos/Lib/net/arp.c **** // and we're done
 115:../../freeRtos/Lib/net/arp.c ****     return;
 116:../../freeRtos/Lib/net/arp.c ****   }
 117:../../freeRtos/Lib/net/arp.c **** 
 118:../../freeRtos/Lib/net/arp.c **** // sender was not present in table,
 119:../../freeRtos/Lib/net/arp.c **** // must add in empty/expired slot
 120:../../freeRtos/Lib/net/arp.c ****   for(index=0; index<ARP_TABLE_SIZE; index++)
 121:../../freeRtos/Lib/net/arp.c ****   {
 122:../../freeRtos/Lib/net/arp.c ****     if(ArpTable[index].time == 0)
 123:../../freeRtos/Lib/net/arp.c ****     {
 124:../../freeRtos/Lib/net/arp.c **** // write entry
 125:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].ethaddr = nicState.layer2.ethHeader->src;
 126:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].ipaddr  = nicState.layer3.ip->srcipaddr;
 127:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].time    = ARP_CACHE_TIME_TO_LIVE;
 128:../../freeRtos/Lib/net/arp.c **** // and we're done
 129:../../freeRtos/Lib/net/arp.c ****       return;
 130:../../freeRtos/Lib/net/arp.c ****     }
 131:../../freeRtos/Lib/net/arp.c ****   }
 132:../../freeRtos/Lib/net/arp.c **** // no space in table, we give up
 133:../../freeRtos/Lib/net/arp.c **** }
 134:../../freeRtos/Lib/net/arp.c **** 
 135:../../freeRtos/Lib/net/arp.c **** void arpIpOut(uint32_t phyDstIp)
 136:../../freeRtos/Lib/net/arp.c **** {
 137:../../freeRtos/Lib/net/arp.c ****   int index;
 138:../../freeRtos/Lib/net/arp.c **** // check if destination is already present in arp table
 139:../../freeRtos/Lib/net/arp.c **** // use the physical dstIp if it's provided, otherwise the dstIp in packet
 140:../../freeRtos/Lib/net/arp.c ****   if(phyDstIp)
 141:../../freeRtos/Lib/net/arp.c ****     index = arpMatchIp(phyDstIp);
 142:../../freeRtos/Lib/net/arp.c ****   else
 143:../../freeRtos/Lib/net/arp.c ****     index = arpMatchIp(nicState.layer3.ip->destipaddr);
 144:../../freeRtos/Lib/net/arp.c **** // fill in ethernet info
 145:../../freeRtos/Lib/net/arp.c ****   if(index != -1)
 146:../../freeRtos/Lib/net/arp.c ****   {
 147:../../freeRtos/Lib/net/arp.c **** // ARP entry present, fill eth address(es)
 148:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src      = nicState.mac;
 149:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->dest     = ArpTable[index].ethaddr;
 150:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->type     = HTONS(ETHTYPE_IP);
 151:../../freeRtos/Lib/net/arp.c ****   }
 152:../../freeRtos/Lib/net/arp.c ****   else
 153:../../freeRtos/Lib/net/arp.c ****   {
 154:../../freeRtos/Lib/net/arp.c **** // not in table, must send ARP request
 155:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src      = nicState.mac;
 156:../../freeRtos/Lib/net/arp.c **** // TODO MUST CHANGE, but for now, send this one broadcast
 157:../../freeRtos/Lib/net/arp.c **** // before sending frame, must copy buffer
 158:../../freeRtos/Lib/net/arp.c ****     memset(nicState.layer2.ethHeader->dest.addr, 0xFF, 6);
 159:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->type = HTONS(ETHTYPE_IP);
 160:../../freeRtos/Lib/net/arp.c ****   }
 161:../../freeRtos/Lib/net/arp.c **** }
 162:../../freeRtos/Lib/net/arp.c **** 
 163:../../freeRtos/Lib/net/arp.c **** void arpTimer(void)
 164:../../freeRtos/Lib/net/arp.c **** {
 256               	.LM8:
 257               	.LFBB3:
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 262 0032 E0E0      		ldi r30,lo8(ArpTable+10)
 263 0034 F0E0      		ldi r31,hi8(ArpTable+10)
 264               	.L8:
 165:../../freeRtos/Lib/net/arp.c ****   int index;
 166:../../freeRtos/Lib/net/arp.c **** // this function meant to be called on a regular time interval
 167:../../freeRtos/Lib/net/arp.c **** 
 168:../../freeRtos/Lib/net/arp.c **** // decrement time-to-live for all entries
 169:../../freeRtos/Lib/net/arp.c ****   for(index=0; index<ARP_TABLE_SIZE; index++)
 170:../../freeRtos/Lib/net/arp.c ****   {
 171:../../freeRtos/Lib/net/arp.c ****     if(ArpTable[index].time)
 266               	.LM9:
 267 0036 8081      		ld r24,Z
 268 0038 8823      		tst r24
 269 003a 01F0      		breq .L6
 172:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].time--;
 271               	.LM10:
 272 003c 8150      		subi r24,lo8(-(-1))
 273 003e 8083      		st Z,r24
 274               	.L6:
 275 0040 3B96      		adiw r30,11
 169:../../freeRtos/Lib/net/arp.c ****   for(index=0; index<ARP_TABLE_SIZE; index++)
 277               	.LM11:
 278 0042 80E0      		ldi r24,hi8(ArpTable+120)
 279 0044 E030      		cpi r30,lo8(ArpTable+120)
 280 0046 F807      		cpc r31,r24
 281 0048 01F4      		brne .L8
 282               	/* epilogue start */
 173:../../freeRtos/Lib/net/arp.c ****   }
 174:../../freeRtos/Lib/net/arp.c **** }
 284               	.LM12:
 285 004a 0895      		ret
 287               	.Lscope3:
 289               		.stabd	78,0,0
 292               	.global	arpMatchIp
 294               	arpMatchIp:
 295               		.stabd	46,0,0
 175:../../freeRtos/Lib/net/arp.c **** 
 176:../../freeRtos/Lib/net/arp.c **** int arpMatchIp(uint32_t ipaddr)
 177:../../freeRtos/Lib/net/arp.c **** {
 297               	.LM13:
 298               	.LFBB4:
 299 004c 0F93      		push r16
 300 004e 1F93      		push r17
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 2 */
 304               	.L__stack_usage = 2
 305 0050 E0E0      		ldi r30,lo8(ArpTable)
 306 0052 F0E0      		ldi r31,hi8(ArpTable)
 308               	.LM14:
 309 0054 40E0      		ldi r20,0
 310 0056 50E0      		ldi r21,0
 311               	.L14:
 178:../../freeRtos/Lib/net/arp.c ****   uint8_t i;
 179:../../freeRtos/Lib/net/arp.c **** 
 180:../../freeRtos/Lib/net/arp.c ****   // check if IP address is present in arp table
 181:../../freeRtos/Lib/net/arp.c ****   for(i=0; i<ARP_TABLE_SIZE; i++)
 182:../../freeRtos/Lib/net/arp.c ****   {
 183:../../freeRtos/Lib/net/arp.c ****     if(ArpTable[i].ipaddr == ipaddr)
 313               	.LM15:
 314 0058 0081      		ld r16,Z
 315 005a 1181      		ldd r17,Z+1
 316 005c 2281      		ldd r18,Z+2
 317 005e 3381      		ldd r19,Z+3
 318 0060 0617      		cp r16,r22
 319 0062 1707      		cpc r17,r23
 320 0064 2807      		cpc r18,r24
 321 0066 3907      		cpc r19,r25
 322 0068 01F0      		breq .L13
 323 006a 4F5F      		subi r20,-1
 324 006c 5F4F      		sbci r21,-1
 325 006e 3B96      		adiw r30,11
 181:../../freeRtos/Lib/net/arp.c ****   for(i=0; i<ARP_TABLE_SIZE; i++)
 327               	.LM16:
 328 0070 4A30      		cpi r20,10
 329 0072 5105      		cpc r21,__zero_reg__
 330 0074 01F4      		brne .L14
 184:../../freeRtos/Lib/net/arp.c ****     {
 185:../../freeRtos/Lib/net/arp.c **** // IP address found
 186:../../freeRtos/Lib/net/arp.c ****       return i;
 187:../../freeRtos/Lib/net/arp.c ****     }
 188:../../freeRtos/Lib/net/arp.c ****   }
 189:../../freeRtos/Lib/net/arp.c **** 
 190:../../freeRtos/Lib/net/arp.c **** // no match
 191:../../freeRtos/Lib/net/arp.c ****   return -1;
 332               	.LM17:
 333 0076 4FEF      		ldi r20,lo8(-1)
 334 0078 5FEF      		ldi r21,lo8(-1)
 335               	.L13:
 192:../../freeRtos/Lib/net/arp.c **** }
 337               	.LM18:
 338 007a CA01      		movw r24,r20
 339               	/* epilogue start */
 340 007c 1F91      		pop r17
 341 007e 0F91      		pop r16
 342 0080 0895      		ret
 344               	.Lscope4:
 346               		.stabd	78,0,0
 348               	.global	arpIpIn
 350               	arpIpIn:
 351               		.stabd	46,0,0
  91:../../freeRtos/Lib/net/arp.c **** {
 353               	.LM19:
 354               	.LFBB5:
 355 0082 CF93      		push r28
 356 0084 DF93      		push r29
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 2 */
 360               	.L__stack_usage = 2
  93:../../freeRtos/Lib/net/arp.c ****   if (arpDebug != NULL)
 362               	.LM20:
 363 0086 8091 0000 		lds r24,arpDebug
 364 008a 9091 0000 		lds r25,arpDebug+1
 365 008e 0097      		sbiw r24,0
 366 0090 01F4      		brne .+2
 367 0092 00C0      		rjmp .L17
  95:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 0)
 369               	.LM21:
 370 0094 2091 0000 		lds r18,arpDebugLevel
 371 0098 2223      		tst r18
 372 009a 01F4      		brne .+2
 373 009c 00C0      		rjmp .L17
  97:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("ARP IP in MAC: "));
 375               	.LM22:
 376 009e 20E0      		ldi r18,lo8(__c.2608)
 377 00a0 30E0      		ldi r19,hi8(__c.2608)
 378 00a2 3F93      		push r19
 379 00a4 2F93      		push r18
 380 00a6 9F93      		push r25
 381 00a8 8F93      		push r24
 382 00aa 0E94 0000 		call fprintf_P
  98:../../freeRtos/Lib/net/arp.c ****       netPrintEthAddr(arpDebug, &nicState.layer2.ethHeader->src);
 384               	.LM23:
 385 00ae 6091 0000 		lds r22,nicState+8
 386 00b2 7091 0000 		lds r23,nicState+8+1
 387 00b6 6A5F      		subi r22,-6
 388 00b8 7F4F      		sbci r23,-1
 389 00ba 8091 0000 		lds r24,arpDebug
 390 00be 9091 0000 		lds r25,arpDebug+1
 391 00c2 0E94 0000 		call netPrintEthAddr
  99:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR(" IP: "));
 393               	.LM24:
 394 00c6 80E0      		ldi r24,lo8(__c.2610)
 395 00c8 90E0      		ldi r25,hi8(__c.2610)
 396 00ca 9F93      		push r25
 397 00cc 8F93      		push r24
 398 00ce 8091 0000 		lds r24,arpDebug+1
 399 00d2 8F93      		push r24
 400 00d4 8091 0000 		lds r24,arpDebug
 401 00d8 8F93      		push r24
 402 00da 0E94 0000 		call fprintf_P
 100:../../freeRtos/Lib/net/arp.c ****       netPrintIPAddr(arpDebug, nicState.layer3.ip->srcipaddr);
 404               	.LM25:
 405 00de E091 0000 		lds r30,nicState+10
 406 00e2 F091 0000 		lds r31,nicState+10+1
 407 00e6 4485      		ldd r20,Z+12
 408 00e8 5585      		ldd r21,Z+13
 409 00ea 6685      		ldd r22,Z+14
 410 00ec 7785      		ldd r23,Z+15
 411 00ee 8091 0000 		lds r24,arpDebug
 412 00f2 9091 0000 		lds r25,arpDebug+1
 413 00f6 0E94 0000 		call netPrintIPAddr
 101:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("\r\n"));
 415               	.LM26:
 416 00fa 80E0      		ldi r24,lo8(__c.2612)
 417 00fc 90E0      		ldi r25,hi8(__c.2612)
 418 00fe 9F93      		push r25
 419 0100 8F93      		push r24
 420 0102 8091 0000 		lds r24,arpDebug+1
 421 0106 8F93      		push r24
 422 0108 8091 0000 		lds r24,arpDebug
 423 010c 8F93      		push r24
 424 010e 0E94 0000 		call fprintf_P
 425 0112 8DB7      		in r24,__SP_L__
 426 0114 9EB7      		in r25,__SP_H__
 427 0116 0C96      		adiw r24,12
 428 0118 0FB6      		in __tmp_reg__,__SREG__
 429 011a F894      		cli
 430 011c 9EBF      		out __SP_H__,r25
 431 011e 0FBE      		out __SREG__,__tmp_reg__
 432 0120 8DBF      		out __SP_L__,r24
 433               	.L17:
 108:../../freeRtos/Lib/net/arp.c ****   index = arpMatchIp(nicState.layer3.ip->srcipaddr);
 435               	.LM27:
 436 0122 C091 0000 		lds r28,nicState+10
 437 0126 D091 0000 		lds r29,nicState+10+1
 438 012a 6C85      		ldd r22,Y+12
 439 012c 7D85      		ldd r23,Y+13
 440 012e 8E85      		ldd r24,Y+14
 441 0130 9F85      		ldd r25,Y+15
 442 0132 0E94 0000 		call arpMatchIp
 109:../../freeRtos/Lib/net/arp.c ****   if(index != -1)
 444               	.LM28:
 445 0136 8F3F      		cpi r24,lo8(-1)
 446 0138 01F0      		breq .L18
 112:../../freeRtos/Lib/net/arp.c ****     ArpTable[index].ethaddr = nicState.layer2.ethHeader->src;
 448               	.LM29:
 449 013a 2BE0      		ldi r18,lo8(11)
 450 013c 8202      		muls r24,r18
 451 013e C001      		movw r24,r0
 452 0140 1124      		clr __zero_reg__
 453 0142 DC01      		movw r26,r24
 454 0144 A050      		subi r26,lo8(-(ArpTable+4))
 455 0146 B040      		sbci r27,hi8(-(ArpTable+4))
 456 0148 E091 0000 		lds r30,nicState+8
 457 014c F091 0000 		lds r31,nicState+8+1
 458 0150 26E0      		ldi r18,lo8(6)
 459 0152 3696      		adiw r30,6
 460               		0:
 461 0154 0190      		ld r0,Z+
 462 0156 0D92      		st X+,r0
 463 0158 2A95      		dec r18
 464 015a 01F4      		brne 0b
 113:../../freeRtos/Lib/net/arp.c ****     ArpTable[index].time = ARP_CACHE_TIME_TO_LIVE;
 466               	.LM30:
 467 015c FC01      		movw r30,r24
 468 015e E050      		subi r30,lo8(-(ArpTable))
 469 0160 F040      		sbci r31,hi8(-(ArpTable))
 470 0162 20E8      		ldi r18,lo8(-128)
 471 0164 2287      		std Z+10,r18
 115:../../freeRtos/Lib/net/arp.c ****     return;
 473               	.LM31:
 474 0166 00C0      		rjmp .L16
 475               	.L18:
 476 0168 E0E0      		ldi r30,lo8(ArpTable+10)
 477 016a F0E0      		ldi r31,hi8(ArpTable+10)
 109:../../freeRtos/Lib/net/arp.c ****   if(index != -1)
 479               	.LM32:
 480 016c 80E0      		ldi r24,0
 481 016e 90E0      		ldi r25,0
 482               	.L21:
 122:../../freeRtos/Lib/net/arp.c ****     if(ArpTable[index].time == 0)
 484               	.LM33:
 485 0170 2081      		ld r18,Z
 486 0172 2111      		cpse r18,__zero_reg__
 487 0174 00C0      		rjmp .L20
 125:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].ethaddr = nicState.layer2.ethHeader->src;
 489               	.LM34:
 490 0176 4BE0      		ldi r20,lo8(11)
 491 0178 489F      		mul r20,r24
 492 017a 9001      		movw r18,r0
 493 017c 499F      		mul r20,r25
 494 017e 300D      		add r19,r0
 495 0180 1124      		clr __zero_reg__
 496 0182 D901      		movw r26,r18
 497 0184 A050      		subi r26,lo8(-(ArpTable+4))
 498 0186 B040      		sbci r27,hi8(-(ArpTable+4))
 499 0188 E091 0000 		lds r30,nicState+8
 500 018c F091 0000 		lds r31,nicState+8+1
 501 0190 86E0      		ldi r24,lo8(6)
 502 0192 3696      		adiw r30,6
 503               		0:
 504 0194 0190      		ld r0,Z+
 505 0196 0D92      		st X+,r0
 506 0198 8A95      		dec r24
 507 019a 01F4      		brne 0b
 126:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].ipaddr  = nicState.layer3.ip->srcipaddr;
 509               	.LM35:
 510 019c F901      		movw r30,r18
 511 019e E050      		subi r30,lo8(-(ArpTable))
 512 01a0 F040      		sbci r31,hi8(-(ArpTable))
 513 01a2 8C85      		ldd r24,Y+12
 514 01a4 9D85      		ldd r25,Y+13
 515 01a6 AE85      		ldd r26,Y+14
 516 01a8 BF85      		ldd r27,Y+15
 517 01aa 8083      		st Z,r24
 518 01ac 9183      		std Z+1,r25
 519 01ae A283      		std Z+2,r26
 520 01b0 B383      		std Z+3,r27
 127:../../freeRtos/Lib/net/arp.c ****       ArpTable[index].time    = ARP_CACHE_TIME_TO_LIVE;
 522               	.LM36:
 523 01b2 80E8      		ldi r24,lo8(-128)
 524 01b4 8287      		std Z+10,r24
 129:../../freeRtos/Lib/net/arp.c ****       return;
 526               	.LM37:
 527 01b6 00C0      		rjmp .L16
 528               	.L20:
 529 01b8 0196      		adiw r24,1
 530 01ba 3B96      		adiw r30,11
 120:../../freeRtos/Lib/net/arp.c ****   for(index=0; index<ARP_TABLE_SIZE; index++)
 532               	.LM38:
 533 01bc 8A30      		cpi r24,10
 534 01be 9105      		cpc r25,__zero_reg__
 535 01c0 01F4      		brne .L21
 536               	.L16:
 537               	/* epilogue start */
 133:../../freeRtos/Lib/net/arp.c **** }
 539               	.LM39:
 540 01c2 DF91      		pop r29
 541 01c4 CF91      		pop r28
 542 01c6 0895      		ret
 544               	.Lscope5:
 546               		.stabd	78,0,0
 549               	.global	arpIpOut
 551               	arpIpOut:
 552               		.stabd	46,0,0
 136:../../freeRtos/Lib/net/arp.c **** {
 554               	.LM40:
 555               	.LFBB6:
 556               	/* prologue: function */
 557               	/* frame size = 0 */
 558               	/* stack size = 0 */
 559               	.L__stack_usage = 0
 140:../../freeRtos/Lib/net/arp.c ****   if(phyDstIp)
 561               	.LM41:
 562 01c8 6115      		cp r22,__zero_reg__
 563 01ca 7105      		cpc r23,__zero_reg__
 564 01cc 8105      		cpc r24,__zero_reg__
 565 01ce 9105      		cpc r25,__zero_reg__
 566 01d0 01F4      		brne .L36
 143:../../freeRtos/Lib/net/arp.c ****     index = arpMatchIp(nicState.layer3.ip->destipaddr);
 568               	.LM42:
 569 01d2 E091 0000 		lds r30,nicState+10
 570 01d6 F091 0000 		lds r31,nicState+10+1
 571 01da 6089      		ldd r22,Z+16
 572 01dc 7189      		ldd r23,Z+17
 573 01de 8289      		ldd r24,Z+18
 574 01e0 9389      		ldd r25,Z+19
 575               	.L36:
 576 01e2 0E94 0000 		call arpMatchIp
 577 01e6 A091 0000 		lds r26,nicState+8
 578 01ea B091 0000 		lds r27,nicState+8+1
 145:../../freeRtos/Lib/net/arp.c ****   if(index != -1)
 580               	.LM43:
 581 01ee 8F3F      		cpi r24,-1
 582 01f0 2FEF      		ldi r18,-1
 583 01f2 9207      		cpc r25,r18
 584 01f4 01F0      		breq .L34
 148:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src      = nicState.mac;
 586               	.LM44:
 587 01f6 26E0      		ldi r18,lo8(6)
 588 01f8 E0E0      		ldi r30,lo8(nicState+2)
 589 01fa F0E0      		ldi r31,hi8(nicState+2)
 590 01fc 1696      		adiw r26,6
 591               		0:
 592 01fe 0190      		ld r0,Z+
 593 0200 0D92      		st X+,r0
 594 0202 2A95      		dec r18
 595 0204 01F4      		brne 0b
 149:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->dest     = ArpTable[index].ethaddr;
 597               	.LM45:
 598 0206 A091 0000 		lds r26,nicState+8
 599 020a B091 0000 		lds r27,nicState+8+1
 600 020e 2BE0      		ldi r18,lo8(11)
 601 0210 289F      		mul r18,r24
 602 0212 F001      		movw r30,r0
 603 0214 299F      		mul r18,r25
 604 0216 F00D      		add r31,r0
 605 0218 1124      		clr __zero_reg__
 606 021a E050      		subi r30,lo8(-(ArpTable+4))
 607 021c F040      		sbci r31,hi8(-(ArpTable+4))
 608 021e 86E0      		ldi r24,lo8(6)
 609               		0:
 610 0220 0190      		ld r0,Z+
 611 0222 0D92      		st X+,r0
 612 0224 8A95      		dec r24
 613 0226 01F4      		brne 0b
 614 0228 00C0      		rjmp .L37
 615               	.L34:
 155:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src      = nicState.mac;
 617               	.LM46:
 618 022a 86E0      		ldi r24,lo8(6)
 619 022c E0E0      		ldi r30,lo8(nicState+2)
 620 022e F0E0      		ldi r31,hi8(nicState+2)
 621 0230 1696      		adiw r26,6
 622               		0:
 623 0232 0190      		ld r0,Z+
 624 0234 0D92      		st X+,r0
 625 0236 8A95      		dec r24
 626 0238 01F4      		brne 0b
 158:../../freeRtos/Lib/net/arp.c ****     memset(nicState.layer2.ethHeader->dest.addr, 0xFF, 6);
 628               	.LM47:
 629 023a 46E0      		ldi r20,lo8(6)
 630 023c 50E0      		ldi r21,0
 631 023e 6FEF      		ldi r22,lo8(-1)
 632 0240 70E0      		ldi r23,0
 633 0242 8091 0000 		lds r24,nicState+8
 634 0246 9091 0000 		lds r25,nicState+8+1
 635 024a 0E94 0000 		call memset
 636               	.L37:
 159:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->type = HTONS(ETHTYPE_IP);
 638               	.LM48:
 639 024e E091 0000 		lds r30,nicState+8
 640 0252 F091 0000 		lds r31,nicState+8+1
 641 0256 88E0      		ldi r24,lo8(8)
 642 0258 90E0      		ldi r25,0
 643 025a 9587      		std Z+13,r25
 644 025c 8487      		std Z+12,r24
 645 025e 0895      		ret
 650               	.Lscope6:
 652               		.stabd	78,0,0
 655               	.global	arpPrintHeader
 657               	arpPrintHeader:
 658               		.stabd	46,0,0
 193:../../freeRtos/Lib/net/arp.c **** 
 194:../../freeRtos/Lib/net/arp.c **** #if ARP_DEBUG
 195:../../freeRtos/Lib/net/arp.c **** void arpPrintHeader(FILE *stream, struct netArpHeader* packet)
 196:../../freeRtos/Lib/net/arp.c **** {
 660               	.LM49:
 661               	.LFBB7:
 662 0260 EF92      		push r14
 663 0262 FF92      		push r15
 664 0264 0F93      		push r16
 665 0266 1F93      		push r17
 666 0268 CF93      		push r28
 667 026a DF93      		push r29
 668               	/* prologue: function */
 669               	/* frame size = 0 */
 670               	/* stack size = 6 */
 671               	.L__stack_usage = 6
 672 026c 182F      		mov r17,r24
 673 026e 092F      		mov r16,r25
 674 0270 EB01      		movw r28,r22
 197:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("ARP Packet:\r\n"));
 676               	.LM50:
 677 0272 80E0      		ldi r24,lo8(__c.2640)
 678 0274 90E0      		ldi r25,hi8(__c.2640)
 679 0276 9F93      		push r25
 680 0278 8F93      		push r24
 681 027a 0F93      		push r16
 682 027c 1F93      		push r17
 683 027e 0E94 0000 		call fprintf_P
 198:../../freeRtos/Lib/net/arp.c ****   //debugPrintHexTable(60, (unsigned char*)&packet);
 199:../../freeRtos/Lib/net/arp.c ****   // print operation type
 200:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("Operation   : "));
 685               	.LM51:
 686 0282 80E0      		ldi r24,lo8(__c.2642)
 687 0284 90E0      		ldi r25,hi8(__c.2642)
 688 0286 9F93      		push r25
 689 0288 8F93      		push r24
 690 028a 0F93      		push r16
 691 028c 1F93      		push r17
 692 028e 0E94 0000 		call fprintf_P
 201:../../freeRtos/Lib/net/arp.c ****   if(packet->opcode == htons(ARP_OPCODE_REQUEST))
 694               	.LM52:
 695 0292 EE80      		ldd r14,Y+6
 696 0294 FF80      		ldd r15,Y+7
 697 0296 81E0      		ldi r24,lo8(1)
 698 0298 90E0      		ldi r25,0
 699 029a 0E94 0000 		call htons
 700 029e 2DB7      		in r18,__SP_L__
 701 02a0 3EB7      		in r19,__SP_H__
 702 02a2 285F      		subi r18,-8
 703 02a4 3F4F      		sbci r19,-1
 704 02a6 0FB6      		in __tmp_reg__,__SREG__
 705 02a8 F894      		cli
 706 02aa 3EBF      		out __SP_H__,r19
 707 02ac 0FBE      		out __SREG__,__tmp_reg__
 708 02ae 2DBF      		out __SP_L__,r18
 709 02b0 E816      		cp r14,r24
 710 02b2 F906      		cpc r15,r25
 711 02b4 01F4      		brne .L39
 202:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("REQUEST"));
 713               	.LM53:
 714 02b6 80E0      		ldi r24,lo8(__c.2644)
 715 02b8 90E0      		ldi r25,hi8(__c.2644)
 716 02ba 00C0      		rjmp .L42
 717               	.L39:
 203:../../freeRtos/Lib/net/arp.c ****   else if(packet->opcode == htons(ARP_OPCODE_REPLY))
 719               	.LM54:
 720 02bc EE80      		ldd r14,Y+6
 721 02be FF80      		ldd r15,Y+7
 722 02c0 82E0      		ldi r24,lo8(2)
 723 02c2 90E0      		ldi r25,0
 724 02c4 0E94 0000 		call htons
 725 02c8 E816      		cp r14,r24
 726 02ca F906      		cpc r15,r25
 727 02cc 01F4      		brne .L41
 204:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("REPLY"));
 729               	.LM55:
 730 02ce 80E0      		ldi r24,lo8(__c.2646)
 731 02d0 90E0      		ldi r25,hi8(__c.2646)
 732 02d2 00C0      		rjmp .L42
 733               	.L41:
 205:../../freeRtos/Lib/net/arp.c ****   else
 206:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("UNKNOWN"));
 735               	.LM56:
 736 02d4 80E0      		ldi r24,lo8(__c.2648)
 737 02d6 90E0      		ldi r25,hi8(__c.2648)
 738               	.L42:
 739 02d8 9F93      		push r25
 740 02da 8F93      		push r24
 741 02dc 0F93      		push r16
 742 02de 1F93      		push r17
 743 02e0 0E94 0000 		call fprintf_P
 744 02e4 0F90      		pop __tmp_reg__
 745 02e6 0F90      		pop __tmp_reg__
 746 02e8 0F90      		pop __tmp_reg__
 747 02ea 0F90      		pop __tmp_reg__
 207:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("\r\n"));
 749               	.LM57:
 750 02ec 80E0      		ldi r24,lo8(__c.2650)
 751 02ee 90E0      		ldi r25,hi8(__c.2650)
 752 02f0 9F93      		push r25
 753 02f2 8F93      		push r24
 754 02f4 0F93      		push r16
 755 02f6 1F93      		push r17
 756 02f8 0E94 0000 		call fprintf_P
 208:../../freeRtos/Lib/net/arp.c **** // print source hardware address
 209:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("SrcHwAddr   : "));  netPrintEthAddr(stream, &packet->shwaddr);   fprintf_
 758               	.LM58:
 759 02fc 80E0      		ldi r24,lo8(__c.2652)
 760 02fe 90E0      		ldi r25,hi8(__c.2652)
 761 0300 9F93      		push r25
 762 0302 8F93      		push r24
 763 0304 0F93      		push r16
 764 0306 1F93      		push r17
 765 0308 0E94 0000 		call fprintf_P
 766 030c BE01      		movw r22,r28
 767 030e 685F      		subi r22,-8
 768 0310 7F4F      		sbci r23,-1
 769 0312 812F      		mov r24,r17
 770 0314 902F      		mov r25,r16
 771 0316 0E94 0000 		call netPrintEthAddr
 772 031a 80E0      		ldi r24,lo8(__c.2654)
 773 031c 90E0      		ldi r25,hi8(__c.2654)
 774 031e 9F93      		push r25
 775 0320 8F93      		push r24
 776 0322 0F93      		push r16
 777 0324 1F93      		push r17
 778 0326 0E94 0000 		call fprintf_P
 210:../../freeRtos/Lib/net/arp.c **** // print source protocol address
 211:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("SrcProtoAddr: "));  netPrintIPAddr(stream, packet->sipaddr);     fprintf_
 780               	.LM59:
 781 032a 80E0      		ldi r24,lo8(__c.2656)
 782 032c 90E0      		ldi r25,hi8(__c.2656)
 783 032e 9F93      		push r25
 784 0330 8F93      		push r24
 785 0332 0F93      		push r16
 786 0334 1F93      		push r17
 787 0336 0E94 0000 		call fprintf_P
 788 033a 4E85      		ldd r20,Y+14
 789 033c 5F85      		ldd r21,Y+15
 790 033e 6889      		ldd r22,Y+16
 791 0340 7989      		ldd r23,Y+17
 792 0342 812F      		mov r24,r17
 793 0344 902F      		mov r25,r16
 794 0346 0E94 0000 		call netPrintIPAddr
 795 034a 80E0      		ldi r24,lo8(__c.2658)
 796 034c 90E0      		ldi r25,hi8(__c.2658)
 797 034e 9F93      		push r25
 798 0350 8F93      		push r24
 799 0352 0F93      		push r16
 800 0354 1F93      		push r17
 801 0356 0E94 0000 		call fprintf_P
 212:../../freeRtos/Lib/net/arp.c **** // print target hardware address
 213:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("DstHwAddr   : "));  netPrintEthAddr(stream, &packet->dhwaddr);   fprintf_
 803               	.LM60:
 804 035a 80E0      		ldi r24,lo8(__c.2660)
 805 035c 90E0      		ldi r25,hi8(__c.2660)
 806 035e 9F93      		push r25
 807 0360 8F93      		push r24
 808 0362 0F93      		push r16
 809 0364 1F93      		push r17
 810 0366 0E94 0000 		call fprintf_P
 811 036a BE01      		movw r22,r28
 812 036c 6E5E      		subi r22,-18
 813 036e 7F4F      		sbci r23,-1
 814 0370 812F      		mov r24,r17
 815 0372 902F      		mov r25,r16
 816 0374 0E94 0000 		call netPrintEthAddr
 817 0378 20E0      		ldi r18,lo8(__c.2662)
 818 037a 30E0      		ldi r19,hi8(__c.2662)
 819 037c 3F93      		push r19
 820 037e 2F93      		push r18
 821 0380 0F93      		push r16
 822 0382 1F93      		push r17
 823 0384 0E94 0000 		call fprintf_P
 214:../../freeRtos/Lib/net/arp.c **** // print target protocol address
 215:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("DstProtoAddr: "));  netPrintIPAddr(stream, packet->dipaddr);     fprintf_
 825               	.LM61:
 826 0388 20E0      		ldi r18,lo8(__c.2664)
 827 038a 30E0      		ldi r19,hi8(__c.2664)
 828 038c 3F93      		push r19
 829 038e 2F93      		push r18
 830 0390 0F93      		push r16
 831 0392 1F93      		push r17
 832 0394 0E94 0000 		call fprintf_P
 833 0398 8DB7      		in r24,__SP_L__
 834 039a 9EB7      		in r25,__SP_H__
 835 039c 8096      		adiw r24,32
 836 039e 0FB6      		in __tmp_reg__,__SREG__
 837 03a0 F894      		cli
 838 03a2 9EBF      		out __SP_H__,r25
 839 03a4 0FBE      		out __SREG__,__tmp_reg__
 840 03a6 8DBF      		out __SP_L__,r24
 841 03a8 488D      		ldd r20,Y+24
 842 03aa 598D      		ldd r21,Y+25
 843 03ac 6A8D      		ldd r22,Y+26
 844 03ae 7B8D      		ldd r23,Y+27
 845 03b0 812F      		mov r24,r17
 846 03b2 902F      		mov r25,r16
 847 03b4 0E94 0000 		call netPrintIPAddr
 848 03b8 20E0      		ldi r18,lo8(__c.2666)
 849 03ba 30E0      		ldi r19,hi8(__c.2666)
 850 03bc 3F93      		push r19
 851 03be 2F93      		push r18
 852 03c0 0F93      		push r16
 853 03c2 1F93      		push r17
 854 03c4 0E94 0000 		call fprintf_P
 855 03c8 0F90      		pop __tmp_reg__
 856 03ca 0F90      		pop __tmp_reg__
 857 03cc 0F90      		pop __tmp_reg__
 858 03ce 0F90      		pop __tmp_reg__
 859               	/* epilogue start */
 216:../../freeRtos/Lib/net/arp.c **** }
 861               	.LM62:
 862 03d0 DF91      		pop r29
 863 03d2 CF91      		pop r28
 864 03d4 1F91      		pop r17
 865 03d6 0F91      		pop r16
 866 03d8 FF90      		pop r15
 867 03da EF90      		pop r14
 868 03dc 0895      		ret
 870               	.Lscope7:
 872               		.stabd	78,0,0
 874               	.global	arpArpIn
 876               	arpArpIn:
 877               		.stabd	46,0,0
  47:../../freeRtos/Lib/net/arp.c **** {
 879               	.LM63:
 880               	.LFBB8:
 881 03de CF93      		push r28
 882 03e0 DF93      		push r29
 883               	/* prologue: function */
 884               	/* frame size = 0 */
 885               	/* stack size = 2 */
 886               	.L__stack_usage = 2
  49:../../freeRtos/Lib/net/arp.c ****   if (arpDebug != NULL)
 888               	.LM64:
 889 03e2 8091 0000 		lds r24,arpDebug
 890 03e6 9091 0000 		lds r25,arpDebug+1
 891 03ea 0097      		sbiw r24,0
 892 03ec 01F0      		breq .L45
  51:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 1)
 894               	.LM65:
 895 03ee 2091 0000 		lds r18,arpDebugLevel
 896 03f2 2230      		cpi r18,lo8(2)
 897 03f4 00F0      		brlo .L46
  52:../../freeRtos/Lib/net/arp.c ****       fprintf_P(arpDebug, PSTR("Received ARP Request\r\n"));
 899               	.LM66:
 900 03f6 20E0      		ldi r18,lo8(__c.2601)
 901 03f8 30E0      		ldi r19,hi8(__c.2601)
 902 03fa 3F93      		push r19
 903 03fc 2F93      		push r18
 904 03fe 9F93      		push r25
 905 0400 8F93      		push r24
 906 0402 0E94 0000 		call fprintf_P
 907 0406 0F90      		pop __tmp_reg__
 908 0408 0F90      		pop __tmp_reg__
 909 040a 0F90      		pop __tmp_reg__
 910 040c 0F90      		pop __tmp_reg__
 911               	.L46:
  53:../../freeRtos/Lib/net/arp.c ****     if (arpDebugLevel > 2)
 913               	.LM67:
 914 040e 8091 0000 		lds r24,arpDebugLevel
 915 0412 8330      		cpi r24,lo8(3)
 916 0414 00F0      		brlo .L45
  54:../../freeRtos/Lib/net/arp.c ****       arpPrintHeader(arpDebug, nicState.layer3.arp);   
 918               	.LM68:
 919 0416 6091 0000 		lds r22,nicState+10
 920 041a 7091 0000 		lds r23,nicState+10+1
 921 041e 8091 0000 		lds r24,arpDebug
 922 0422 9091 0000 		lds r25,arpDebug+1
 923 0426 0E94 0000 		call arpPrintHeader
 924               	.L45:
  60:../../freeRtos/Lib/net/arp.c ****   if((nicState.layer3.arp->dipaddr == IpMyConfig.ip) && (nicState.layer3.arp->opcode == htons(ARP_O
 926               	.LM69:
 927 042a E091 0000 		lds r30,nicState+10
 928 042e F091 0000 		lds r31,nicState+10+1
 929 0432 408D      		ldd r20,Z+24
 930 0434 518D      		ldd r21,Z+25
 931 0436 628D      		ldd r22,Z+26
 932 0438 738D      		ldd r23,Z+27
 933 043a 8091 0000 		lds r24,IpMyConfig
 934 043e 9091 0000 		lds r25,IpMyConfig+1
 935 0442 A091 0000 		lds r26,IpMyConfig+2
 936 0446 B091 0000 		lds r27,IpMyConfig+3
 937 044a 4817      		cp r20,r24
 938 044c 5907      		cpc r21,r25
 939 044e 6A07      		cpc r22,r26
 940 0450 7B07      		cpc r23,r27
 941 0452 01F0      		breq .+2
 942 0454 00C0      		rjmp .L43
  60:../../freeRtos/Lib/net/arp.c ****   if((nicState.layer3.arp->dipaddr == IpMyConfig.ip) && (nicState.layer3.arp->opcode == htons(ARP_O
 944               	.LM70:
 945 0456 C681      		ldd r28,Z+6
 946 0458 D781      		ldd r29,Z+7
 947 045a 81E0      		ldi r24,lo8(1)
 948 045c 90E0      		ldi r25,0
 949 045e 0E94 0000 		call htons
 950 0462 C817      		cp r28,r24
 951 0464 D907      		cpc r29,r25
 952 0466 01F0      		breq .+2
 953 0468 00C0      		rjmp .L43
  64:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->dhwaddr = nicState.layer3.arp->shwaddr;
 955               	.LM71:
 956 046a C091 0000 		lds r28,nicState+10
 957 046e D091 0000 		lds r29,nicState+10+1
 958 0472 86E0      		ldi r24,lo8(6)
 959 0474 FE01      		movw r30,r28
 960 0476 3896      		adiw r30,8
 961 0478 DE01      		movw r26,r28
 962 047a 5296      		adiw r26,18
 963               		0:
 964 047c 0190      		ld r0,Z+
 965 047e 0D92      		st X+,r0
 966 0480 8A95      		dec r24
 967 0482 01F4      		brne 0b
  65:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->dipaddr = nicState.layer3.arp->sipaddr;
 969               	.LM72:
 970 0484 8E85      		ldd r24,Y+14
 971 0486 9F85      		ldd r25,Y+15
 972 0488 A889      		ldd r26,Y+16
 973 048a B989      		ldd r27,Y+17
 974 048c 888F      		std Y+24,r24
 975 048e 998F      		std Y+25,r25
 976 0490 AA8F      		std Y+26,r26
 977 0492 BB8F      		std Y+27,r27
  67:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->shwaddr =  nicState.mac;
 979               	.LM73:
 980 0494 86E0      		ldi r24,lo8(6)
 981 0496 E0E0      		ldi r30,lo8(nicState+2)
 982 0498 F0E0      		ldi r31,hi8(nicState+2)
 983 049a DE01      		movw r26,r28
 984 049c 1896      		adiw r26,8
 985               		0:
 986 049e 0190      		ld r0,Z+
 987 04a0 0D92      		st X+,r0
 988 04a2 8A95      		dec r24
 989 04a4 01F4      		brne 0b
  68:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->sipaddr =  IpMyConfig.ip;
 991               	.LM74:
 992 04a6 8091 0000 		lds r24,IpMyConfig
 993 04aa 9091 0000 		lds r25,IpMyConfig+1
 994 04ae A091 0000 		lds r26,IpMyConfig+2
 995 04b2 B091 0000 		lds r27,IpMyConfig+3
 996 04b6 8E87      		std Y+14,r24
 997 04b8 9F87      		std Y+15,r25
 998 04ba A88B      		std Y+16,r26
 999 04bc B98B      		std Y+17,r27
  70:../../freeRtos/Lib/net/arp.c ****     nicState.layer3.arp->opcode = htons(ARP_OPCODE_REPLY);
 1001               	.LM75:
 1002 04be 82E0      		ldi r24,lo8(2)
 1003 04c0 90E0      		ldi r25,0
 1004 04c2 0E94 0000 		call htons
 1005 04c6 9F83      		std Y+7,r25
 1006 04c8 8E83      		std Y+6,r24
  73:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->dest = nicState.layer2.ethHeader->src;
 1008               	.LM76:
 1009 04ca A091 0000 		lds r26,nicState+8
 1010 04ce B091 0000 		lds r27,nicState+8+1
 1011 04d2 86E0      		ldi r24,lo8(6)
 1012 04d4 FD01      		movw r30,r26
 1013 04d6 3696      		adiw r30,6
 1014               		0:
 1015 04d8 0190      		ld r0,Z+
 1016 04da 0D92      		st X+,r0
 1017 04dc 8A95      		dec r24
 1018 04de 01F4      		brne 0b
  74:../../freeRtos/Lib/net/arp.c ****     nicState.layer2.ethHeader->src  = nicState.mac;
 1020               	.LM77:
 1021 04e0 A091 0000 		lds r26,nicState+8
 1022 04e4 B091 0000 		lds r27,nicState+8+1
 1023 04e8 86E0      		ldi r24,lo8(6)
 1024 04ea E0E0      		ldi r30,lo8(nicState+2)
 1025 04ec F0E0      		ldi r31,hi8(nicState+2)
 1026 04ee 1696      		adiw r26,6
 1027               		0:
 1028 04f0 0190      		ld r0,Z+
 1029 04f2 0D92      		st X+,r0
 1030 04f4 8A95      		dec r24
 1031 04f6 01F4      		brne 0b
  77:../../freeRtos/Lib/net/arp.c ****     if (arpDebug != NULL)
 1033               	.LM78:
 1034 04f8 8091 0000 		lds r24,arpDebug
 1035 04fc 9091 0000 		lds r25,arpDebug+1
 1036 0500 0097      		sbiw r24,0
 1037 0502 01F0      		breq .L52
  79:../../freeRtos/Lib/net/arp.c ****       if (arpDebugLevel > 0)
 1039               	.LM79:
 1040 0504 2091 0000 		lds r18,arpDebugLevel
 1041 0508 2223      		tst r18
 1042 050a 01F0      		breq .L53
  80:../../freeRtos/Lib/net/arp.c ****         fprintf_P(arpDebug, PSTR("Sending ARP Reply\r\n"));
 1044               	.LM80:
 1045 050c 20E0      		ldi r18,lo8(__c.2603)
 1046 050e 30E0      		ldi r19,hi8(__c.2603)
 1047 0510 3F93      		push r19
 1048 0512 2F93      		push r18
 1049 0514 9F93      		push r25
 1050 0516 8F93      		push r24
 1051 0518 0E94 0000 		call fprintf_P
 1052 051c 0F90      		pop __tmp_reg__
 1053 051e 0F90      		pop __tmp_reg__
 1054 0520 0F90      		pop __tmp_reg__
 1055 0522 0F90      		pop __tmp_reg__
 1056               	.L53:
  81:../../freeRtos/Lib/net/arp.c ****       if (arpDebugLevel > 2)
 1058               	.LM81:
 1059 0524 8091 0000 		lds r24,arpDebugLevel
 1060 0528 8330      		cpi r24,lo8(3)
 1061 052a 00F0      		brlo .L52
  82:../../freeRtos/Lib/net/arp.c ****         arpPrintHeader(arpDebug, nicState.layer3.arp);
 1063               	.LM82:
 1064 052c 6091 0000 		lds r22,nicState+10
 1065 0530 7091 0000 		lds r23,nicState+10+1
 1066 0534 8091 0000 		lds r24,arpDebug
 1067 0538 9091 0000 		lds r25,arpDebug+1
 1068 053c 0E94 0000 		call arpPrintHeader
 1069               	.L52:
  86:../../freeRtos/Lib/net/arp.c ****     nicSend(sizeof(struct netArpHeader) + ETH_HEADER_LEN);
 1071               	.LM83:
 1072 0540 8AE2      		ldi r24,lo8(42)
 1073 0542 90E0      		ldi r25,0
 1074               	/* epilogue start */
  88:../../freeRtos/Lib/net/arp.c **** }
 1076               	.LM84:
 1077 0544 DF91      		pop r29
 1078 0546 CF91      		pop r28
  86:../../freeRtos/Lib/net/arp.c ****     nicSend(sizeof(struct netArpHeader) + ETH_HEADER_LEN);
 1080               	.LM85:
 1081 0548 0C94 0000 		jmp nicSend
 1082               	.L43:
 1083               	/* epilogue start */
  88:../../freeRtos/Lib/net/arp.c **** }
 1085               	.LM86:
 1086 054c DF91      		pop r29
 1087 054e CF91      		pop r28
 1088 0550 0895      		ret
 1090               	.Lscope8:
 1092               		.stabd	78,0,0
 1094               	.global	arpPrintTable
 1096               	arpPrintTable:
 1097               		.stabd	46,0,0
 217:../../freeRtos/Lib/net/arp.c **** #endif /*ARP_DEBUG*/
 218:../../freeRtos/Lib/net/arp.c **** 
 219:../../freeRtos/Lib/net/arp.c **** void arpPrintTable(FILE *stream)
 220:../../freeRtos/Lib/net/arp.c **** {
 1099               	.LM87:
 1100               	.LFBB9:
 1101 0552 8F92      		push r8
 1102 0554 9F92      		push r9
 1103 0556 AF92      		push r10
 1104 0558 BF92      		push r11
 1105 055a CF92      		push r12
 1106 055c DF92      		push r13
 1107 055e EF92      		push r14
 1108 0560 FF92      		push r15
 1109 0562 0F93      		push r16
 1110 0564 1F93      		push r17
 1111 0566 CF93      		push r28
 1112 0568 DF93      		push r29
 1113               	/* prologue: function */
 1114               	/* frame size = 0 */
 1115               	/* stack size = 12 */
 1116               	.L__stack_usage = 12
 1117 056a 982E      		mov r9,r24
 1118 056c 892E      		mov r8,r25
 221:../../freeRtos/Lib/net/arp.c ****   uint8_t i;
 222:../../freeRtos/Lib/net/arp.c **** 
 223:../../freeRtos/Lib/net/arp.c ****   // print ARP table
 224:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("Time Eth Address        IP Address\r\n"));
 1120               	.LM88:
 1121 056e 80E0      		ldi r24,lo8(__c.2672)
 1122 0570 90E0      		ldi r25,hi8(__c.2672)
 1123 0572 9F93      		push r25
 1124 0574 8F93      		push r24
 1125 0576 8F92      		push r8
 1126 0578 9F92      		push r9
 1127 057a 0E94 0000 		call fprintf_P
 225:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("-----------------------------------\r\n"));
 1129               	.LM89:
 1130 057e 80E0      		ldi r24,lo8(__c.2674)
 1131 0580 90E0      		ldi r25,hi8(__c.2674)
 1132 0582 9F93      		push r25
 1133 0584 8F93      		push r24
 1134 0586 8F92      		push r8
 1135 0588 9F92      		push r9
 1136 058a 0E94 0000 		call fprintf_P
 226:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR(" MY  "));
 1138               	.LM90:
 1139 058e 80E0      		ldi r24,lo8(__c.2676)
 1140 0590 90E0      		ldi r25,hi8(__c.2676)
 1141 0592 9F93      		push r25
 1142 0594 8F93      		push r24
 1143 0596 8F92      		push r8
 1144 0598 9F92      		push r9
 1145 059a 0E94 0000 		call fprintf_P
 227:../../freeRtos/Lib/net/arp.c ****   netPrintEthAddr(stream, &nicState.mac);
 1147               	.LM91:
 1148 059e 60E0      		ldi r22,lo8(nicState+2)
 1149 05a0 70E0      		ldi r23,hi8(nicState+2)
 1150 05a2 892D      		mov r24,r9
 1151 05a4 982D      		mov r25,r8
 1152 05a6 0E94 0000 		call netPrintEthAddr
 228:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("  "));
 1154               	.LM92:
 1155 05aa 80E0      		ldi r24,lo8(__c.2678)
 1156 05ac 90E0      		ldi r25,hi8(__c.2678)
 1157 05ae 9F93      		push r25
 1158 05b0 8F93      		push r24
 1159 05b2 8F92      		push r8
 1160 05b4 9F92      		push r9
 1161 05b6 0E94 0000 		call fprintf_P
 229:../../freeRtos/Lib/net/arp.c ****   netPrintIPAddr(stream, IpMyConfig.ip);
 1163               	.LM93:
 1164 05ba 4091 0000 		lds r20,IpMyConfig
 1165 05be 5091 0000 		lds r21,IpMyConfig+1
 1166 05c2 6091 0000 		lds r22,IpMyConfig+2
 1167 05c6 7091 0000 		lds r23,IpMyConfig+3
 1168 05ca 892D      		mov r24,r9
 1169 05cc 982D      		mov r25,r8
 1170 05ce 0E94 0000 		call netPrintIPAddr
 230:../../freeRtos/Lib/net/arp.c ****   fprintf_P(stream, PSTR("\r\n"));
 1172               	.LM94:
 1173 05d2 80E0      		ldi r24,lo8(__c.2680)
 1174 05d4 90E0      		ldi r25,hi8(__c.2680)
 1175 05d6 9F93      		push r25
 1176 05d8 8F93      		push r24
 1177 05da 8F92      		push r8
 1178 05dc 9F92      		push r9
 1179 05de 0E94 0000 		call fprintf_P
 1180 05e2 C0E0      		ldi r28,lo8(ArpTable)
 1181 05e4 D0E0      		ldi r29,hi8(ArpTable)
 1182 05e6 00E0      		ldi r16,lo8(ArpTable+10)
 1183 05e8 10E0      		ldi r17,hi8(ArpTable+10)
 1184 05ea 8DB7      		in r24,__SP_L__
 1185 05ec 9EB7      		in r25,__SP_H__
 1186 05ee 4496      		adiw r24,20
 1187 05f0 0FB6      		in __tmp_reg__,__SREG__
 1188 05f2 F894      		cli
 1189 05f4 9EBF      		out __SP_H__,r25
 1190 05f6 0FBE      		out __SREG__,__tmp_reg__
 1191 05f8 8DBF      		out __SP_L__,r24
 231:../../freeRtos/Lib/net/arp.c **** 
 232:../../freeRtos/Lib/net/arp.c ****   for(i=0; i<ARP_TABLE_SIZE; i++)
 233:../../freeRtos/Lib/net/arp.c ****   {
 234:../../freeRtos/Lib/net/arp.c ****     if (ArpTable[i].ipaddr == 0)
 235:../../freeRtos/Lib/net/arp.c ****       continue;
 236:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("%3d  "), ArpTable[i].time);
 1193               	.LM95:
 1194 05fa 80E0      		ldi r24,lo8(__c.2683)
 1195 05fc A82E      		mov r10,r24
 1196 05fe 80E0      		ldi r24,hi8(__c.2683)
 1197 0600 B82E      		mov r11,r24
 237:../../freeRtos/Lib/net/arp.c ****     netPrintEthAddr(stream, &ArpTable[i].ethaddr);
 238:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("  "));
 1199               	.LM96:
 1200 0602 90E0      		ldi r25,lo8(__c.2685)
 1201 0604 E92E      		mov r14,r25
 1202 0606 90E0      		ldi r25,hi8(__c.2685)
 1203 0608 F92E      		mov r15,r25
 239:../../freeRtos/Lib/net/arp.c ****     netPrintIPAddr(stream, ArpTable[i].ipaddr);
 240:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("\r\n"));
 1205               	.LM97:
 1206 060a 20E0      		ldi r18,lo8(__c.2687)
 1207 060c C22E      		mov r12,r18
 1208 060e 20E0      		ldi r18,hi8(__c.2687)
 1209 0610 D22E      		mov r13,r18
 1210               	.L61:
 234:../../freeRtos/Lib/net/arp.c ****     if (ArpTable[i].ipaddr == 0)
 1212               	.LM98:
 1213 0612 8881      		ld r24,Y
 1214 0614 9981      		ldd r25,Y+1
 1215 0616 AA81      		ldd r26,Y+2
 1216 0618 BB81      		ldd r27,Y+3
 1217 061a 892B      		or r24,r25
 1218 061c 8A2B      		or r24,r26
 1219 061e 8B2B      		or r24,r27
 1220 0620 01F0      		breq .L59
 236:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("%3d  "), ArpTable[i].time);
 1222               	.LM99:
 1223 0622 F801      		movw r30,r16
 1224 0624 8081      		ld r24,Z
 1225 0626 1F92      		push __zero_reg__
 1226 0628 8F93      		push r24
 1227 062a BF92      		push r11
 1228 062c AF92      		push r10
 1229 062e 8F92      		push r8
 1230 0630 9F92      		push r9
 1231 0632 0E94 0000 		call fprintf_P
 1232 0636 BE01      		movw r22,r28
 1233 0638 6C5F      		subi r22,-4
 1234 063a 7F4F      		sbci r23,-1
 237:../../freeRtos/Lib/net/arp.c ****     netPrintEthAddr(stream, &ArpTable[i].ethaddr);
 1236               	.LM100:
 1237 063c 892D      		mov r24,r9
 1238 063e 982D      		mov r25,r8
 1239 0640 0E94 0000 		call netPrintEthAddr
 238:../../freeRtos/Lib/net/arp.c ****     fprintf_P(stream, PSTR("  "));
 1241               	.LM101:
 1242 0644 FF92      		push r15
 1243 0646 EF92      		push r14
 1244 0648 8F92      		push r8
 1245 064a 9F92      		push r9
 1246 064c 0E94 0000 		call fprintf_P
 239:../../freeRtos/Lib/net/arp.c ****     netPrintIPAddr(stream, ArpTable[i].ipaddr);
 1248               	.LM102:
 1249 0650 4881      		ld r20,Y
 1250 0652 5981      		ldd r21,Y+1
 1251 0654 6A81      		ldd r22,Y+2
 1252 0656 7B81      		ldd r23,Y+3
 1253 0658 892D      		mov r24,r9
 1254 065a 982D      		mov r25,r8
 1255 065c 0E94 0000 		call netPrintIPAddr
 1257               	.LM103:
 1258 0660 DF92      		push r13
 1259 0662 CF92      		push r12
 1260 0664 8F92      		push r8
 1261 0666 9F92      		push r9
 1262 0668 0E94 0000 		call fprintf_P
 1263 066c 8DB7      		in r24,__SP_L__
 1264 066e 9EB7      		in r25,__SP_H__
 1265 0670 0E96      		adiw r24,14
 1266 0672 0FB6      		in __tmp_reg__,__SREG__
 1267 0674 F894      		cli
 1268 0676 9EBF      		out __SP_H__,r25
 1269 0678 0FBE      		out __SREG__,__tmp_reg__
 1270 067a 8DBF      		out __SP_L__,r24
 1271               	.L59:
 1272 067c 2B96      		adiw r28,11
 1273 067e 055F      		subi r16,-11
 1274 0680 1F4F      		sbci r17,-1
 232:../../freeRtos/Lib/net/arp.c ****   for(i=0; i<ARP_TABLE_SIZE; i++)
 1276               	.LM104:
 1277 0682 90E0      		ldi r25,hi8(ArpTable+110)
 1278 0684 C030      		cpi r28,lo8(ArpTable+110)
 1279 0686 D907      		cpc r29,r25
 1280 0688 01F4      		brne .L61
 1281               	/* epilogue start */
 241:../../freeRtos/Lib/net/arp.c ****   }
 242:../../freeRtos/Lib/net/arp.c **** }
 1283               	.LM105:
 1284 068a DF91      		pop r29
 1285 068c CF91      		pop r28
 1286 068e 1F91      		pop r17
 1287 0690 0F91      		pop r16
 1288 0692 FF90      		pop r15
 1289 0694 EF90      		pop r14
 1290 0696 DF90      		pop r13
 1291 0698 CF90      		pop r12
 1292 069a BF90      		pop r11
 1293 069c AF90      		pop r10
 1294 069e 9F90      		pop r9
 1295 06a0 8F90      		pop r8
 1296 06a2 0895      		ret
 1298               	.Lscope9:
 1300               		.stabd	78,0,0
 1301               		.section	.progmem.data,"a",@progbits
 1304               	__c.2687:
 1305 0000 0D0A 00   		.string	"\r\n"
 1308               	__c.2685:
 1309 0003 2020 00   		.string	"  "
 1312               	__c.2683:
 1313 0006 2533 6420 		.string	"%3d  "
 1313      2000 
 1316               	__c.2680:
 1317 000c 0D0A 00   		.string	"\r\n"
 1320               	__c.2678:
 1321 000f 2020 00   		.string	"  "
 1324               	__c.2676:
 1325 0012 204D 5920 		.string	" MY  "
 1325      2000 
 1328               	__c.2674:
 1329 0018 2D2D 2D2D 		.string	"-----------------------------------\r\n"
 1329      2D2D 2D2D 
 1329      2D2D 2D2D 
 1329      2D2D 2D2D 
 1329      2D2D 2D2D 
 1332               	__c.2672:
 1333 003e 5469 6D65 		.string	"Time Eth Address        IP Address\r\n"
 1333      2045 7468 
 1333      2041 6464 
 1333      7265 7373 
 1333      2020 2020 
 1336               	__c.2666:
 1337 0063 0D0A 00   		.string	"\r\n"
 1340               	__c.2664:
 1341 0066 4473 7450 		.string	"DstProtoAddr: "
 1341      726F 746F 
 1341      4164 6472 
 1341      3A20 00
 1344               	__c.2662:
 1345 0075 0D0A 00   		.string	"\r\n"
 1348               	__c.2660:
 1349 0078 4473 7448 		.string	"DstHwAddr   : "
 1349      7741 6464 
 1349      7220 2020 
 1349      3A20 00
 1352               	__c.2658:
 1353 0087 0D0A 00   		.string	"\r\n"
 1356               	__c.2656:
 1357 008a 5372 6350 		.string	"SrcProtoAddr: "
 1357      726F 746F 
 1357      4164 6472 
 1357      3A20 00
 1360               	__c.2654:
 1361 0099 0D0A 00   		.string	"\r\n"
 1364               	__c.2652:
 1365 009c 5372 6348 		.string	"SrcHwAddr   : "
 1365      7741 6464 
 1365      7220 2020 
 1365      3A20 00
 1368               	__c.2650:
 1369 00ab 0D0A 00   		.string	"\r\n"
 1372               	__c.2648:
 1373 00ae 554E 4B4E 		.string	"UNKNOWN"
 1373      4F57 4E00 
 1376               	__c.2646:
 1377 00b6 5245 504C 		.string	"REPLY"
 1377      5900 
 1380               	__c.2644:
 1381 00bc 5245 5155 		.string	"REQUEST"
 1381      4553 5400 
 1384               	__c.2642:
 1385 00c4 4F70 6572 		.string	"Operation   : "
 1385      6174 696F 
 1385      6E20 2020 
 1385      3A20 00
 1388               	__c.2640:
 1389 00d3 4152 5020 		.string	"ARP Packet:\r\n"
 1389      5061 636B 
 1389      6574 3A0D 
 1389      0A00 
 1392               	__c.2612:
 1393 00e1 0D0A 00   		.string	"\r\n"
 1396               	__c.2610:
 1397 00e4 2049 503A 		.string	" IP: "
 1397      2000 
 1400               	__c.2608:
 1401 00ea 4152 5020 		.string	"ARP IP in MAC: "
 1401      4950 2069 
 1401      6E20 4D41 
 1401      433A 2000 
 1404               	__c.2603:
 1405 00fa 5365 6E64 		.string	"Sending ARP Reply\r\n"
 1405      696E 6720 
 1405      4152 5020 
 1405      5265 706C 
 1405      790D 0A00 
 1408               	__c.2601:
 1409 010e 5265 6365 		.string	"Received ARP Request\r\n"
 1409      6976 6564 
 1409      2041 5250 
 1409      2052 6571 
 1409      7565 7374 
 1410               		.comm	ArpTable,110,1
 1411               		.comm	arpDebugLevel,1,1
 1412               		.comm	arpDebug,2,1
 1413               		.comm	IpMyConfig,15,1
 1414               		.comm	sockets,2,1
 1415               		.comm	tcpDebugLevel,1,1
 1416               		.comm	tcpDebugStream,2,1
 1417               		.comm	udpDbgLevel,1,1
 1418               		.comm	udpDbgStream,2,1
 1419               		.comm	udpSocket,2,1
 1420               		.comm	icmpDebugLevel,1,1
 1421               		.comm	icmpDebug,2,1
 1422               		.comm	plen,2,1
 1423               		.comm	nicState,14,1
 1424               		.comm	wwwport,1,1
 1440               		.weak	nicSend
 1441               		.text
 1443               	.Letext0:
 1444               		.ident	"GCC: (GNU) 4.8.2"
 1445               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arp.c
     /tmp/ccfsdRSx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfsdRSx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfsdRSx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfsdRSx.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccfsdRSx.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfsdRSx.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfsdRSx.s:189    .text:0000000000000000 setArpDebug
                            *COM*:0000000000000002 arpDebug
                            *COM*:0000000000000001 arpDebugLevel
     /tmp/ccfsdRSx.s:222    .text:000000000000001a arpInit
                            *COM*:000000000000006e ArpTable
     /tmp/ccfsdRSx.s:253    .text:0000000000000032 arpTimer
     /tmp/ccfsdRSx.s:294    .text:000000000000004c arpMatchIp
     /tmp/ccfsdRSx.s:350    .text:0000000000000082 arpIpIn
     /tmp/ccfsdRSx.s:1400   .progmem.data:00000000000000ea __c.2608
                            *COM*:000000000000000e nicState
     /tmp/ccfsdRSx.s:1396   .progmem.data:00000000000000e4 __c.2610
     /tmp/ccfsdRSx.s:1392   .progmem.data:00000000000000e1 __c.2612
     /tmp/ccfsdRSx.s:551    .text:00000000000001c8 arpIpOut
     /tmp/ccfsdRSx.s:657    .text:0000000000000260 arpPrintHeader
     /tmp/ccfsdRSx.s:1388   .progmem.data:00000000000000d3 __c.2640
     /tmp/ccfsdRSx.s:1384   .progmem.data:00000000000000c4 __c.2642
     /tmp/ccfsdRSx.s:1380   .progmem.data:00000000000000bc __c.2644
     /tmp/ccfsdRSx.s:1376   .progmem.data:00000000000000b6 __c.2646
     /tmp/ccfsdRSx.s:1372   .progmem.data:00000000000000ae __c.2648
     /tmp/ccfsdRSx.s:1368   .progmem.data:00000000000000ab __c.2650
     /tmp/ccfsdRSx.s:1364   .progmem.data:000000000000009c __c.2652
     /tmp/ccfsdRSx.s:1360   .progmem.data:0000000000000099 __c.2654
     /tmp/ccfsdRSx.s:1356   .progmem.data:000000000000008a __c.2656
     /tmp/ccfsdRSx.s:1352   .progmem.data:0000000000000087 __c.2658
     /tmp/ccfsdRSx.s:1348   .progmem.data:0000000000000078 __c.2660
     /tmp/ccfsdRSx.s:1344   .progmem.data:0000000000000075 __c.2662
     /tmp/ccfsdRSx.s:1340   .progmem.data:0000000000000066 __c.2664
     /tmp/ccfsdRSx.s:1336   .progmem.data:0000000000000063 __c.2666
     /tmp/ccfsdRSx.s:876    .text:00000000000003de arpArpIn
     /tmp/ccfsdRSx.s:1408   .progmem.data:000000000000010e __c.2601
                            *COM*:000000000000000f IpMyConfig
     /tmp/ccfsdRSx.s:1404   .progmem.data:00000000000000fa __c.2603
     /tmp/ccfsdRSx.s:1096   .text:0000000000000552 arpPrintTable
     /tmp/ccfsdRSx.s:1332   .progmem.data:000000000000003e __c.2672
     /tmp/ccfsdRSx.s:1328   .progmem.data:0000000000000018 __c.2674
     /tmp/ccfsdRSx.s:1324   .progmem.data:0000000000000012 __c.2676
     /tmp/ccfsdRSx.s:1320   .progmem.data:000000000000000f __c.2678
     /tmp/ccfsdRSx.s:1316   .progmem.data:000000000000000c __c.2680
     /tmp/ccfsdRSx.s:1312   .progmem.data:0000000000000006 __c.2683
     /tmp/ccfsdRSx.s:1308   .progmem.data:0000000000000003 __c.2685
     /tmp/ccfsdRSx.s:1304   .progmem.data:0000000000000000 __c.2687
                            *COM*:0000000000000002 sockets
                            *COM*:0000000000000001 tcpDebugLevel
                            *COM*:0000000000000002 tcpDebugStream
                            *COM*:0000000000000001 udpDbgLevel
                            *COM*:0000000000000002 udpDbgStream
                            *COM*:0000000000000002 udpSocket
                            *COM*:0000000000000001 icmpDebugLevel
                            *COM*:0000000000000002 icmpDebug
                            *COM*:0000000000000002 plen
                            *COM*:0000000000000001 wwwport

UNDEFINED SYMBOLS
fprintf_P
netPrintEthAddr
netPrintIPAddr
memset
htons
nicSend
__do_clear_bss
