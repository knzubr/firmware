   1               		.file	"tcp.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 162               	.global	sendTcBuffer
 164               	sendTcBuffer:
 165               		.stabd	46,0,0
   1:Lib/net/tcp.c **** /**
   2:Lib/net/tcp.c ****  * @file        tcp.c
   3:Lib/net/tcp.c ****  * @author      Adam Kaliszan
   4:Lib/net/tcp.c ****  * @brief       TCP socket
   5:Lib/net/tcp.c ****  * @ingroup     network
   6:Lib/net/tcp.c ****  * @defgroup    netstack Network Stack
   7:Lib/net/tcp.c ****  * @version     0.2
   8:Lib/net/tcp.c ****  * Created:     13.10.2010
   9:Lib/net/tcp.c ****  * Revised:     05.10.2010
  10:Lib/net/tcp.c ****  * Editor Tabs: 2
  11:Lib/net/tcp.c ****  *
  12:Lib/net/tcp.c ****  */
  13:Lib/net/tcp.c **** 
  14:Lib/net/tcp.c **** #include "tcp.h"
  15:Lib/net/tcp.c **** 
  16:Lib/net/tcp.c **** 
  17:Lib/net/tcp.c **** static struct TcpIpSocket* findConnectedSocket(void);
  18:Lib/net/tcp.c **** 
  19:Lib/net/tcp.c **** /**
  20:Lib/net/tcp.c ****  * @param *sck socket
  21:Lib/net/tcp.c ****  */
  22:Lib/net/tcp.c **** static inline void tcpAcceptConn(struct TcpIpSocket *sck);
  23:Lib/net/tcp.c **** 
  24:Lib/net/tcp.c **** inline void socketInit(void)
  25:Lib/net/tcp.c **** {
  26:Lib/net/tcp.c ****   sockets = xmalloc(NUMBER_OF_SOCKETS * sizeof(struct TcpIpSocket));
  27:Lib/net/tcp.c ****   memset(sockets, 0, NUMBER_OF_SOCKETS * sizeof(struct TcpIpSocket));
  28:Lib/net/tcp.c ****   
  29:Lib/net/tcp.c ****   uint8_t            i;
  30:Lib/net/tcp.c ****   uint8_t            *ptr = (uint8_t *)RTOS_TCP_BUF_BASE_ADDR;
  31:Lib/net/tcp.c **** 
  32:Lib/net/tcp.c ****   struct TcpIpSocket *sck = sockets;
  33:Lib/net/tcp.c ****   for (i=0; i < NUMBER_OF_SOCKETS; i++)
  34:Lib/net/tcp.c ****   {
  35:Lib/net/tcp.c **** //    sck->Rx = xQueueCreateExternal(255, 1, (void *)(ptr));
  36:Lib/net/tcp.c ****     ptr+=256;
  37:Lib/net/tcp.c **** //    sck->Tx = xQueueCreateExternal(255, 1, (void *)(ptr));
  38:Lib/net/tcp.c ****     ptr+=256;
  39:Lib/net/tcp.c **** 
  40:Lib/net/tcp.c ****     sck->localPort     = (i<16) ? htons(MYTELNETPOERT + i) : (MYTELNETPOERT + 16);
  41:Lib/net/tcp.c ****     sck->seqNoLastSent = HTONL(0xFF112233); 
  42:Lib/net/tcp.c ****     sck->state         = LISTEN;   
  43:Lib/net/tcp.c ****     sck++;
  44:Lib/net/tcp.c ****   }
  45:Lib/net/tcp.c **** }
  46:Lib/net/tcp.c **** 
  47:Lib/net/tcp.c **** struct TcpIpSocket* findConnectedSocket(void)
  48:Lib/net/tcp.c **** {
  49:Lib/net/tcp.c ****   struct TcpIpSocket *result = sockets;
  50:Lib/net/tcp.c ****   uint8_t i;
  51:Lib/net/tcp.c ****   for (i=0; i<NUMBER_OF_SOCKETS; i++)
  52:Lib/net/tcp.c ****   {
  53:Lib/net/tcp.c ****     if ( ((result->state != LISTEN) && (result->state != CLOSED)) 
  54:Lib/net/tcp.c ****       && (result->RemoteIpAddr == nicState.layer3.ip->srcipaddr) && (result->localPort == nicState.
  55:Lib/net/tcp.c ****     {
  56:Lib/net/tcp.c **** #if TCP_DEBUG
  57:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
  58:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
  59:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Found TCP socket state %d\r\n"), result->state);
  60:Lib/net/tcp.c **** #endif      
  61:Lib/net/tcp.c ****       return result;
  62:Lib/net/tcp.c ****     }
  63:Lib/net/tcp.c ****     result++;
  64:Lib/net/tcp.c ****   }
  65:Lib/net/tcp.c ****   
  66:Lib/net/tcp.c ****   result = sockets;
  67:Lib/net/tcp.c ****   for (i=0; i<NUMBER_OF_SOCKETS; i++)
  68:Lib/net/tcp.c ****   {
  69:Lib/net/tcp.c ****     if ((result->state == LISTEN) && (result->localPort == nicState.layer4.tcp->destport))
  70:Lib/net/tcp.c ****     {
  71:Lib/net/tcp.c **** #if TCP_DEBUG
  72:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
  73:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
  74:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Found TCP socket no %d state LISTEN\r\n"), i);
  75:Lib/net/tcp.c **** #endif      
  76:Lib/net/tcp.c ****       return &sockets[i];
  77:Lib/net/tcp.c ****     }
  78:Lib/net/tcp.c ****     result++;
  79:Lib/net/tcp.c ****   }
  80:Lib/net/tcp.c **** #if TCP_DEBUG
  81:Lib/net/tcp.c ****   if (tcpDebugStream != NULL)
  82:Lib/net/tcp.c ****     if (tcpDebugLevel > 2)
  83:Lib/net/tcp.c ****       fprintf_P(tcpDebugStream, PSTR("Can't find TCP socket with localPort %d\r\n"), htons(nicState
  84:Lib/net/tcp.c **** #endif
  85:Lib/net/tcp.c ****   return NULL;
  86:Lib/net/tcp.c **** }
  87:Lib/net/tcp.c **** 
  88:Lib/net/tcp.c **** static inline void tcpAcceptConn(struct TcpIpSocket *sck)
  89:Lib/net/tcp.c **** {
  90:Lib/net/tcp.c ****   sck->state        = SYN_RECEIVED;
  91:Lib/net/tcp.c ****   sck->remotePort   = nicState.layer4.tcp->srcport;
  92:Lib/net/tcp.c ****   sck->RemoteIpAddr = nicState.layer3.ip->srcipaddr;
  93:Lib/net/tcp.c **** }
  94:Lib/net/tcp.c **** 
  95:Lib/net/tcp.c **** inline uint8_t processTcpPacket(void)
  96:Lib/net/tcp.c **** {
  97:Lib/net/tcp.c ****   struct TcpIpSocket *socket = findConnectedSocket();
  98:Lib/net/tcp.c ****   
  99:Lib/net/tcp.c ****   if (socket == NULL)
 100:Lib/net/tcp.c ****     return 1;
 101:Lib/net/tcp.c ****   
 102:Lib/net/tcp.c ****   
 103:Lib/net/tcp.c ****   socket->seqNoLastReceived = htonl(nicState.layer4.tcp->seqno);
 104:Lib/net/tcp.c ****   
 105:Lib/net/tcp.c ****   if (socket->state == LISTEN)
 106:Lib/net/tcp.c ****   {
 107:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_SYN)
 108:Lib/net/tcp.c ****     {
 109:Lib/net/tcp.c **** //      uint16_t len = nicState.layer4.tcp->tcpoffset>>4;
 110:Lib/net/tcp.c **** //      len *=4;
 111:Lib/net/tcp.c **** #if TCP_DEBUG
 112:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 113:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
 114:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection socket state change LISTEN->SYN_RE
 115:Lib/net/tcp.c **** #endif
 116:Lib/net/tcp.c ****       tcpAcceptConn(socket);
 117:Lib/net/tcp.c ****       //Preparing response
 118:Lib/net/tcp.c ****       nicState.layer4.tcp->srcport   = socket->localPort;
 119:Lib/net/tcp.c ****       nicState.layer4.tcp->destport  = socket->remotePort;
 120:Lib/net/tcp.c ****       nicState.layer4.tcp->seqno     = htonl(socket->seqNoLastSent);
 121:Lib/net/tcp.c ****       nicState.layer4.tcp->ackno     = htonl(socket->seqNoLastReceived+1);
 122:Lib/net/tcp.c ****       nicState.layer4.tcp->tcpoffset = 5<<4;
 123:Lib/net/tcp.c ****       nicState.layer4.tcp->flags     = TCP_FLAGS_ACK+TCP_FLAGS_SYN;
 124:Lib/net/tcp.c ****       nicState.layer4.tcp->wnd       = htons(100);
 125:Lib/net/tcp.c ****       nicState.layer4.tcp->tcpchksum = 0;
 126:Lib/net/tcp.c ****       nicState.layer4.tcp->urgp      = 0;
 127:Lib/net/tcp.c ****       calculateTcpChecksun(TCP_HEADER_LEN);
 128:Lib/net/tcp.c **** 
 129:Lib/net/tcp.c ****       socket->seqNoLastSent++;
 130:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN);
 131:Lib/net/tcp.c ****     }
 132:Lib/net/tcp.c **** #if TCP_DEBUG
 133:Lib/net/tcp.c ****     else
 134:Lib/net/tcp.c ****     {
 135:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 136:Lib/net/tcp.c ****         if (tcpDebugLevel > 1)
 137:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection ERROR: syn flag wasn't set\r\n"));
 138:Lib/net/tcp.c ****     }
 139:Lib/net/tcp.c **** #endif    
 140:Lib/net/tcp.c ****     return 0;
 141:Lib/net/tcp.c ****   }
 142:Lib/net/tcp.c ****   
 143:Lib/net/tcp.c ****   if (socket->state == SYN_RECEIVED)
 144:Lib/net/tcp.c ****   {
 145:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_ACK)
 146:Lib/net/tcp.c ****     {
 147:Lib/net/tcp.c ****       socket->state    = ESTABILISHED;
 148:Lib/net/tcp.c **** #if TCP_DEBUG
 149:Lib/net/tcp.c ****     if (tcpDebugStream != NULL)
 150:Lib/net/tcp.c ****       if (tcpDebugLevel > 2)
 151:Lib/net/tcp.c ****         fprintf_P(tcpDebugStream, PSTR("Opening TCP connection socket state change SYN_RECEIVED->ES
 152:Lib/net/tcp.c **** #endif        
 153:Lib/net/tcp.c **** 
 154:Lib/net/tcp.c ****     }
 155:Lib/net/tcp.c ****     else
 156:Lib/net/tcp.c ****     {
 157:Lib/net/tcp.c ****       socket->state = LISTEN;
 158:Lib/net/tcp.c **** #if TCP_DEBUG
 159:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 160:Lib/net/tcp.c ****         if (tcpDebugLevel > 1)
 161:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection ERROR: ack flag wasn't set\r\n"));
 162:Lib/net/tcp.c **** #endif    
 163:Lib/net/tcp.c ****     }
 164:Lib/net/tcp.c ****     return 0;
 165:Lib/net/tcp.c ****   }
 166:Lib/net/tcp.c ****   
 167:Lib/net/tcp.c ****   
 168:Lib/net/tcp.c ****   if (socket->state == ESTABILISHED)
 169:Lib/net/tcp.c ****   {
 170:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_FIN)  //ESTABILISHED -> CLOSE_WAIT -> closed
 171:Lib/net/tcp.c ****     {
 172:Lib/net/tcp.c ****       socket->timer              = timer100Hz;
 173:Lib/net/tcp.c ****       nicState.layer4.tcp->flags = TCP_FLAGS_ACK;
 174:Lib/net/tcp.c ****       
 175:Lib/net/tcp.c ****       uint8_t dataFromBufLen;
 176:Lib/net/tcp.c ****       uint8_t *dataPtr = (uint8_t *)(nicState.layer4.tcp+1);
 177:Lib/net/tcp.c **** //      while (xQueueReceive(socket->Tx, dataPtr, 0) == pdTRUE)
 178:Lib/net/tcp.c **** //      {
 179:Lib/net/tcp.c **** //        dataFromBufLen++;
 180:Lib/net/tcp.c **** //        dataPtr++;
 181:Lib/net/tcp.c **** //      }
 182:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN + dataFromBufLen);
 183:Lib/net/tcp.c ****       socket->state    = CLOSE_WAIT;
 184:Lib/net/tcp.c ****       
 185:Lib/net/tcp.c ****       
 186:Lib/net/tcp.c ****       nicState.layer4.tcp->flags = TCP_FLAGS_FIN;
 187:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN);
 188:Lib/net/tcp.c ****       socket->state    = LAST_ACK;
 189:Lib/net/tcp.c ****     }
 190:Lib/net/tcp.c ****     return 0;
 191:Lib/net/tcp.c ****   }
 192:Lib/net/tcp.c **** 
 193:Lib/net/tcp.c ****   //Read data and put into the queue
 194:Lib/net/tcp.c ****   
 195:Lib/net/tcp.c ****   return 0;
 196:Lib/net/tcp.c **** }
 197:Lib/net/tcp.c **** 
 198:Lib/net/tcp.c **** void calculateTcpChecksun(uint16_t tcpLen)
 199:Lib/net/tcp.c **** {
 200:Lib/net/tcp.c ****   nicState.layer4.tcp->tcpchksum = 0;
 201:Lib/net/tcp.c ****   nicState.layer4.tcp->tcpchksum = netChecksum(nicState.layer4.tcp, tcpLen); //TODO finish it
 202:Lib/net/tcp.c **** }
 203:Lib/net/tcp.c **** 
 204:Lib/net/tcp.c **** 
 205:Lib/net/tcp.c **** 
 206:Lib/net/tcp.c **** uint8_t sendTcBuffer(uint8_t socketNo)
 207:Lib/net/tcp.c **** {
 167               	.LM0:
 168               	.LFBB1:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 208:Lib/net/tcp.c ****   struct TcpIpSocket *sck = &sockets[socketNo];
 209:Lib/net/tcp.c ****   return 0;
 210:Lib/net/tcp.c **** }
 172               	.LM1:
 173 0000 80E0      		ldi r24,lo8(0)
 174               	/* epilogue start */
 175 0002 0895      		ret
 177               	.Lscope1:
 179               		.stabd	78,0,0
 183               	.global	setTcpDebug
 185               	setTcpDebug:
 186               		.stabd	46,0,0
 211:Lib/net/tcp.c **** 
 212:Lib/net/tcp.c **** void netstackTCPIPProcess(void)
 213:Lib/net/tcp.c **** {
 214:Lib/net/tcp.c ****   if (nicState.layer4.tcp->destport == htons(80))
 215:Lib/net/tcp.c ****   {
 216:Lib/net/tcp.c **** #if TCP_DEBUG
 217:Lib/net/tcp.c ****     if (tcpDebugStream != NULL)
 218:Lib/net/tcp.c ****       fprintf_P(tcpDebugStream, PSTR("HTTP not implemented\r\n"));
 219:Lib/net/tcp.c **** #endif
 220:Lib/net/tcp.c ****     ;
 221:Lib/net/tcp.c ****   }
 222:Lib/net/tcp.c ****   else
 223:Lib/net/tcp.c ****   {
 224:Lib/net/tcp.c ****     processTcpPacket();
 225:Lib/net/tcp.c ****   }
 226:Lib/net/tcp.c **** }
 227:Lib/net/tcp.c **** 
 228:Lib/net/tcp.c **** #if TCP_DEBUG
 229:Lib/net/tcp.c **** void setTcpDebug(FILE *stream, uint8_t level)
 230:Lib/net/tcp.c **** {
 188               	.LM2:
 189               	.LFBB2:
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 231:Lib/net/tcp.c ****   tcpDebugStream = stream;
 193               	.LM3:
 194 0004 9093 0000 		sts (tcpDebugStream)+1,r25
 195 0008 8093 0000 		sts tcpDebugStream,r24
 232:Lib/net/tcp.c ****   tcpDebugLevel = level;
 197               	.LM4:
 198 000c 6093 0000 		sts tcpDebugLevel,r22
 199               	/* epilogue start */
 233:Lib/net/tcp.c **** }
 201               	.LM5:
 202 0010 0895      		ret
 204               	.Lscope2:
 206               		.stabd	78,0,0
 208               	.global	flushTcpQueues
 210               	flushTcpQueues:
 211               		.stabd	46,0,0
 234:Lib/net/tcp.c **** #endif /* TCP_DEBUG */
 235:Lib/net/tcp.c **** 
 236:Lib/net/tcp.c **** void flushTcpQueues()
 237:Lib/net/tcp.c **** {
 213               	.LM6:
 214               	.LFBB3:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* epilogue start */
 238:Lib/net/tcp.c ****   uint8_t sckNo = 0;
 239:Lib/net/tcp.c ****   struct TcpIpSocket *sck = sockets;
 240:Lib/net/tcp.c ****   for (sckNo = 0; sckNo < NUMBER_OF_SOCKETS; sckNo++)
 241:Lib/net/tcp.c ****   {
 242:Lib/net/tcp.c ****     
 243:Lib/net/tcp.c ****     sck++;
 244:Lib/net/tcp.c ****   }
 245:Lib/net/tcp.c **** }
 219               	.LM7:
 220 0012 0895      		ret
 222               	.Lscope3:
 224               		.stabd	78,0,0
 226               	.global	httpProcess
 228               	httpProcess:
 229               		.stabd	46,0,0
 246:Lib/net/tcp.c **** 
 247:Lib/net/tcp.c **** 
 248:Lib/net/tcp.c **** inline void httpProcess()
 249:Lib/net/tcp.c **** {
 231               	.LM8:
 232               	.LFBB4:
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* epilogue start */
 250:Lib/net/tcp.c **** #if 0
 251:Lib/net/tcp.c ****     // TCP WWW tcp port www start, compare only the lower byte
 252:Lib/net/tcp.c ****     if ( Enc28j60_global.buf[IP_PROTO_P]==IP_PROTO_TCP && Enc28j60_global.buf[TCP_DST_PORT_H_P]==0 
 253:Lib/net/tcp.c ****     {
 254:Lib/net/tcp.c ****       if ( Enc28j60_global.buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V )
 255:Lib/net/tcp.c ****       {
 256:Lib/net/tcp.c ****         make_tcp_synack_from_syn (Enc28j60_global.buf );
 257:Lib/net/tcp.c ****         // make_tcp_synack_from_syn does already send the syn,ack
 258:Lib/net/tcp.c ****         continue;
 259:Lib/net/tcp.c ****       }
 260:Lib/net/tcp.c ****       if (Enc28j60_global.buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 261:Lib/net/tcp.c ****       {
 262:Lib/net/tcp.c ****         init_len_info (Enc28j60_global.buf ); // init some data structures
 263:Lib/net/tcp.c ****         // we can possibly have no data, just ack:
 264:Lib/net/tcp.c ****         dat_p=get_tcp_data_pointer();
 265:Lib/net/tcp.c ****         if ( dat_p==0 )
 266:Lib/net/tcp.c ****         {
 267:Lib/net/tcp.c ****           if (Enc28j60_global.buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V )
 268:Lib/net/tcp.c ****           {
 269:Lib/net/tcp.c ****             // finack, answer with ack
 270:Lib/net/tcp.c ****             make_tcp_ack_from_any (Enc28j60_global.buf );
 271:Lib/net/tcp.c ****           }
 272:Lib/net/tcp.c ****           // just an ack with no data, wait for next packet
 273:Lib/net/tcp.c ****           continue;
 274:Lib/net/tcp.c ****         }
 275:Lib/net/tcp.c ****         if ( strncmp ( "GET ", ( char * )(&Enc28j60_global.buf[dat_p]), 4) !=0 )
 276:Lib/net/tcp.c ****         {
 277:Lib/net/tcp.c ****           // head, post and other methods:
 278:Lib/net/tcp.c ****           //
 279:Lib/net/tcp.c ****           // for possible status codes see:
 280:Lib/net/tcp.c ****           // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
 281:Lib/net/tcp.c ****           plen=fill_tcp_data_p (Enc28j60_global.buf, 0, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: te
 282:Lib/net/tcp.c ****           make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 283:Lib/net/tcp.c ****           make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 284:Lib/net/tcp.c ****           continue;
 285:Lib/net/tcp.c ****         }
 286:Lib/net/tcp.c ****         if ( strncmp ( "/ ", ( char * ) & (Enc28j60_global.buf[dat_p+4] ),2 ) ==0)
 287:Lib/net/tcp.c ****         {
 288:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, 0, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: tex
 289:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( "<p>Usage: http://host_or_ip/filen
 290:Lib/net/tcp.c ****           make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 291:Lib/net/tcp.c ****           make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 292:Lib/net/tcp.c ****           continue;
 293:Lib/net/tcp.c ****         }
 294:Lib/net/tcp.c **** 
 295:Lib/net/tcp.c ****         cmd = analyse_get_url (( char * )(&Enc28j60_global.buf[dat_p+5]), filename);
 296:Lib/net/tcp.c **** 
 297:Lib/net/tcp.c ****         if (cmd == URLramDysk)
 298:Lib/net/tcp.c ****         {
 299:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, 0, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: tex
 300:Lib/net/tcp.c ****   
 301:Lib/net/tcp.c ****           //Open the filen
 302:Lib/net/tcp.c ****           struct ramPlikFd fd;
 303:Lib/net/tcp.c ****           if (ramDyskOtworzPlik(filename, &fd) != 0)
 304:Lib/net/tcp.c ****           {
 305:Lib/net/tcp.c ****             plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( "<p>Nie mozna otworzyc pliku o n
 306:Lib/net/tcp.c ****             plen=fill_tcp_data(Enc28j60_global.buf, plen, filename);
 307:Lib/net/tcp.c ****             plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( " umieszczonego w ram dysku</p>\
 308:Lib/net/tcp.c ****             make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 309:Lib/net/tcp.c ****             make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 310:Lib/net/tcp.c ****             continue;
 311:Lib/net/tcp.c ****           }
 312:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( "<p>Zawartosc pliku " ) );
 313:Lib/net/tcp.c ****           plen=fill_tcp_data(Enc28j60_global.buf, plen, filename);
 314:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( " zapisanego w ram dysku:<br>" ) )
 315:Lib/net/tcp.c **** 
 316:Lib/net/tcp.c ****           char c;
 317:Lib/net/tcp.c ****           while (plen < Enc28j60_global.bufferSize - 30)
 318:Lib/net/tcp.c ****           {
 319:Lib/net/tcp.c ****             if (ramDyskCzytajBajtZPliku(&fd , &c) != 0)
 320:Lib/net/tcp.c ****               break;
 321:Lib/net/tcp.c ****             plen = add_tcp_byte(Enc28j60_global.buf, plen, c);
 322:Lib/net/tcp.c ****           }
 323:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( "</p>\n"));
 324:Lib/net/tcp.c ****           ramDyskZamknijPlik(&fd);
 325:Lib/net/tcp.c ****           make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 326:Lib/net/tcp.c ****           make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 327:Lib/net/tcp.c **** 
 328:Lib/net/tcp.c ****           continue;
 329:Lib/net/tcp.c ****         }
 330:Lib/net/tcp.c **** 
 331:Lib/net/tcp.c ****         if (cmd == URLsdDysk)
 332:Lib/net/tcp.c ****         {
 333:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, 0, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: tex
 334:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( "<p>Do zaimpelentowania wyswietlen
 335:Lib/net/tcp.c ****           plen=fill_tcp_data(Enc28j60_global.buf, plen, filename);
 336:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, plen, PSTR ( " z karty SD</p>\n" ) );
 337:Lib/net/tcp.c ****           make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 338:Lib/net/tcp.c ****           make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 339:Lib/net/tcp.c ****           continue;
 340:Lib/net/tcp.c ****         }
 341:Lib/net/tcp.c ****         if (cmd == URLstatus)
 342:Lib/net/tcp.c ****         {
 343:Lib/net/tcp.c ****           plen=fill_tcp_data_p(Enc28j60_global.buf, 0, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: tex
 344:Lib/net/tcp.c ****           plen=printHTMLstatus(Enc28j60_global.buf, plen, Enc28j60_global.bufferSize);  
 345:Lib/net/tcp.c ****           make_tcp_ack_from_any(Enc28j60_global.buf);          // send ack for http get
 346:Lib/net/tcp.c ****           make_tcp_ack_with_data(Enc28j60_global.buf, plen);   // send data
 347:Lib/net/tcp.c ****           continue;  
 348:Lib/net/tcp.c ****         }
 349:Lib/net/tcp.c ****       }
 350:Lib/net/tcp.c **** 
 351:Lib/net/tcp.c **** #endif
 352:Lib/net/tcp.c **** }...
 237               	.LM9:
 238 0014 0895      		ret
 240               	.Lscope4:
 242               		.stabd	78,0,0
 245               	.global	calculateTcpChecksun
 247               	calculateTcpChecksun:
 248               		.stabd	46,0,0
 199:Lib/net/tcp.c **** {
 250               	.LM10:
 251               	.LFBB5:
 252 0016 0F93      		push r16
 253 0018 1F93      		push r17
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256 001a BC01      		movw r22,r24
 200:Lib/net/tcp.c ****   nicState.layer4.tcp->tcpchksum = 0;
 258               	.LM11:
 259 001c 0091 0000 		lds r16,nicState+12
 260 0020 1091 0000 		lds r17,(nicState+12)+1
 261 0024 F801      		movw r30,r16
 262 0026 118A      		std Z+17,__zero_reg__
 263 0028 108A      		std Z+16,__zero_reg__
 201:Lib/net/tcp.c ****   nicState.layer4.tcp->tcpchksum = netChecksum(nicState.layer4.tcp, tcpLen); //TODO finish it
 265               	.LM12:
 266 002a C801      		movw r24,r16
 267 002c 0E94 0000 		call netChecksum
 268 0030 F801      		movw r30,r16
 269 0032 918B      		std Z+17,r25
 270 0034 808B      		std Z+16,r24
 271               	/* epilogue start */
 202:Lib/net/tcp.c **** }
 273               	.LM13:
 274 0036 1F91      		pop r17
 275 0038 0F91      		pop r16
 276 003a 0895      		ret
 278               	.Lscope5:
 280               		.stabd	78,0,0
 282               	.global	processTcpPacket
 284               	processTcpPacket:
 285               		.stabd	46,0,0
  96:Lib/net/tcp.c **** {
 287               	.LM14:
 288               	.LFBB6:
 289 003c AF92      		push r10
 290 003e BF92      		push r11
 291 0040 CF92      		push r12
 292 0042 DF92      		push r13
 293 0044 EF92      		push r14
 294 0046 FF92      		push r15
 295 0048 0F93      		push r16
 296 004a 1F93      		push r17
 297 004c CF93      		push r28
 298 004e DF93      		push r29
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	.LBB14:
 302               	.LBB15:
  49:Lib/net/tcp.c ****   struct TcpIpSocket *result = sockets;
 304               	.LM15:
 305 0050 E091 0000 		lds r30,sockets
 306 0054 F091 0000 		lds r31,(sockets)+1
  53:Lib/net/tcp.c ****     if ( ((result->state != LISTEN) && (result->state != CLOSED)) 
 308               	.LM16:
 309 0058 E090 0000 		lds r14,nicState+10
 310 005c F090 0000 		lds r15,(nicState+10)+1
 311 0060 6091 0000 		lds r22,nicState+12
 312 0064 7091 0000 		lds r23,(nicState+12)+1
 313 0068 EF01      		movw r28,r30
 314 006a 00E0      		ldi r16,lo8(0)
 315               	.L15:
 316 006c 1881      		ld r17,Y
 317 006e 1230      		cpi r17,lo8(2)
 318 0070 00F4      		brsh .+2
 319 0072 00C0      		rjmp .L12
 320 0074 2981      		ldd r18,Y+1
 321 0076 3A81      		ldd r19,Y+2
 322 0078 4B81      		ldd r20,Y+3
 323 007a 5C81      		ldd r21,Y+4
 324 007c D701      		movw r26,r14
 325 007e 1C96      		adiw r26,12
 326 0080 AD90      		ld r10,X+
 327 0082 BD90      		ld r11,X+
 328 0084 CD90      		ld r12,X+
 329 0086 DC90      		ld r13,X
 330 0088 1F97      		sbiw r26,12+3
 331 008a 2A15      		cp r18,r10
 332 008c 3B05      		cpc r19,r11
 333 008e 4C05      		cpc r20,r12
 334 0090 5D05      		cpc r21,r13
 335 0092 01F4      		brne .L12
 336 0094 2D81      		ldd r18,Y+5
 337 0096 3E81      		ldd r19,Y+6
 338 0098 DB01      		movw r26,r22
 339 009a 1296      		adiw r26,2
 340 009c 8D91      		ld r24,X+
 341 009e 9C91      		ld r25,X
 342 00a0 1397      		sbiw r26,2+1
 343 00a2 2817      		cp r18,r24
 344 00a4 3907      		cpc r19,r25
 345 00a6 01F4      		brne .L12
 346 00a8 2F81      		ldd r18,Y+7
 347 00aa 3885      		ldd r19,Y+8
 348 00ac 8D91      		ld r24,X+
 349 00ae 9C91      		ld r25,X
 350 00b0 2817      		cp r18,r24
 351 00b2 3907      		cpc r19,r25
 352 00b4 01F4      		brne .L12
  57:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 354               	.LM17:
 355 00b6 2091 0000 		lds r18,tcpDebugStream
 356 00ba 3091 0000 		lds r19,(tcpDebugStream)+1
 357 00be 2115      		cp r18,__zero_reg__
 358 00c0 3105      		cpc r19,__zero_reg__
 359 00c2 01F4      		brne .+2
 360 00c4 00C0      		rjmp .L13
  58:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
 362               	.LM18:
 363 00c6 8091 0000 		lds r24,tcpDebugLevel
 364 00ca 8330      		cpi r24,lo8(3)
 365 00cc 00F4      		brsh .+2
 366 00ce 00C0      		rjmp .L13
  59:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Found TCP socket state %d\r\n"), result->state);
 368               	.LM19:
 369 00d0 00D0      		rcall .
 370 00d2 00D0      		rcall .
 371 00d4 00D0      		rcall .
 372 00d6 EDB7      		in r30,__SP_L__
 373 00d8 FEB7      		in r31,__SP_H__
 374 00da 3196      		adiw r30,1
 375 00dc ADB7      		in r26,__SP_L__
 376 00de BEB7      		in r27,__SP_H__
 377 00e0 1296      		adiw r26,1+1
 378 00e2 3C93      		st X,r19
 379 00e4 2E93      		st -X,r18
 380 00e6 1197      		sbiw r26,1
 381               	.LBE15:
 382 00e8 80E0      		ldi r24,lo8(__c.2285)
 383 00ea 90E0      		ldi r25,hi8(__c.2285)
 384 00ec 9383      		std Z+3,r25
 385 00ee 8283      		std Z+2,r24
 386 00f0 1483      		std Z+4,r17
 387 00f2 1582      		std Z+5,__zero_reg__
 388 00f4 0E94 0000 		call fprintf_P
 389 00f8 EDB7      		in r30,__SP_L__
 390 00fa FEB7      		in r31,__SP_H__
 391 00fc 3696      		adiw r30,6
 392 00fe 0FB6      		in __tmp_reg__,__SREG__
 393 0100 F894      		cli
 394 0102 FEBF      		out __SP_H__,r31
 395 0104 0FBE      		out __SREG__,__tmp_reg__
 396 0106 EDBF      		out __SP_L__,r30
 397 0108 00C0      		rjmp .L13
 398               	.L12:
 399               	.LBB16:
  51:Lib/net/tcp.c ****   for (i=0; i<NUMBER_OF_SOCKETS; i++)
 401               	.LM20:
 402 010a 0F5F      		subi r16,lo8(-(1))
 403 010c 0431      		cpi r16,lo8(20)
 404 010e 01F0      		breq .L14
  63:Lib/net/tcp.c ****     result++;
 406               	.LM21:
 407 0110 6C96      		adiw r28,28
 408 0112 00C0      		rjmp .L15
 409               	.L14:
 410 0114 00E0      		ldi r16,lo8(0)
 411               	.L19:
  69:Lib/net/tcp.c ****     if ((result->state == LISTEN) && (result->localPort == nicState.layer4.tcp->destport))
 413               	.LM22:
 414 0116 8081      		ld r24,Z
 415 0118 8130      		cpi r24,lo8(1)
 416 011a 01F4      		brne .L16
 417 011c 2581      		ldd r18,Z+5
 418 011e 3681      		ldd r19,Z+6
 419 0120 DB01      		movw r26,r22
 420 0122 1296      		adiw r26,2
 421 0124 8D91      		ld r24,X+
 422 0126 9C91      		ld r25,X
 423 0128 1397      		sbiw r26,2+1
 424 012a 2817      		cp r18,r24
 425 012c 3907      		cpc r19,r25
 426 012e 01F4      		brne .L16
  72:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 428               	.LM23:
 429 0130 2091 0000 		lds r18,tcpDebugStream
 430 0134 3091 0000 		lds r19,(tcpDebugStream)+1
 431 0138 2115      		cp r18,__zero_reg__
 432 013a 3105      		cpc r19,__zero_reg__
 433 013c 01F0      		breq .L17
  73:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
 435               	.LM24:
 436 013e 8091 0000 		lds r24,tcpDebugLevel
 437 0142 8330      		cpi r24,lo8(3)
 438 0144 00F0      		brlo .L17
  74:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Found TCP socket no %d state LISTEN\r\n"), i);
 440               	.LM25:
 441 0146 00D0      		rcall .
 442 0148 00D0      		rcall .
 443 014a 00D0      		rcall .
 444 014c EDB7      		in r30,__SP_L__
 445 014e FEB7      		in r31,__SP_H__
 446 0150 3196      		adiw r30,1
 447 0152 ADB7      		in r26,__SP_L__
 448 0154 BEB7      		in r27,__SP_H__
 449 0156 1296      		adiw r26,1+1
 450 0158 3C93      		st X,r19
 451 015a 2E93      		st -X,r18
 452 015c 1197      		sbiw r26,1
 453               	.LBE16:
 454 015e 80E0      		ldi r24,lo8(__c.2290)
 455 0160 90E0      		ldi r25,hi8(__c.2290)
 456 0162 9383      		std Z+3,r25
 457 0164 8283      		std Z+2,r24
 458 0166 0483      		std Z+4,r16
 459 0168 1582      		std Z+5,__zero_reg__
 460 016a 0E94 0000 		call fprintf_P
 461 016e EDB7      		in r30,__SP_L__
 462 0170 FEB7      		in r31,__SP_H__
 463 0172 3696      		adiw r30,6
 464 0174 0FB6      		in __tmp_reg__,__SREG__
 465 0176 F894      		cli
 466 0178 FEBF      		out __SP_H__,r31
 467 017a 0FBE      		out __SREG__,__tmp_reg__
 468 017c EDBF      		out __SP_L__,r30
 469               	.L17:
 470               	.LBB17:
  76:Lib/net/tcp.c ****       return &sockets[i];
 472               	.LM26:
 473 017e 8CE1      		ldi r24,lo8(28)
 474 0180 089F      		mul r16,r24
 475 0182 C001      		movw r24,r0
 476 0184 1124      		clr r1
 477 0186 C091 0000 		lds r28,sockets
 478 018a D091 0000 		lds r29,(sockets)+1
 479 018e C80F      		add r28,r24
 480 0190 D91F      		adc r29,r25
 481 0192 00C0      		rjmp .L13
 482               	.L16:
  67:Lib/net/tcp.c ****   for (i=0; i<NUMBER_OF_SOCKETS; i++)
 484               	.LM27:
 485 0194 0F5F      		subi r16,lo8(-(1))
 486 0196 0431      		cpi r16,lo8(20)
 487 0198 01F0      		breq .L18
  78:Lib/net/tcp.c ****     result++;
 489               	.LM28:
 490 019a 7C96      		adiw r30,28
 491 019c 00C0      		rjmp .L19
 492               	.L18:
  81:Lib/net/tcp.c ****   if (tcpDebugStream != NULL)
 494               	.LM29:
 495 019e C091 0000 		lds r28,tcpDebugStream
 496 01a2 D091 0000 		lds r29,(tcpDebugStream)+1
 497 01a6 2097      		sbiw r28,0
 498 01a8 01F4      		brne .+2
 499 01aa 00C0      		rjmp .L20
  82:Lib/net/tcp.c ****     if (tcpDebugLevel > 2)
 501               	.LM30:
 502 01ac 8091 0000 		lds r24,tcpDebugLevel
 503 01b0 8330      		cpi r24,lo8(3)
 504 01b2 00F4      		brsh .+2
 505 01b4 00C0      		rjmp .L20
 506               	.LBE17:
  83:Lib/net/tcp.c ****       fprintf_P(tcpDebugStream, PSTR("Can't find TCP socket with localPort %d\r\n"), htons(nicState
 508               	.LM31:
 509 01b6 DB01      		movw r26,r22
 510 01b8 1296      		adiw r26,2
 511 01ba 8D91      		ld r24,X+
 512 01bc 9C91      		ld r25,X
 513 01be 1397      		sbiw r26,2+1
 514 01c0 0E94 0000 		call htons
 515               	.LBB18:
 516 01c4 00D0      		rcall .
 517 01c6 00D0      		rcall .
 518 01c8 00D0      		rcall .
 519 01ca EDB7      		in r30,__SP_L__
 520 01cc FEB7      		in r31,__SP_H__
 521 01ce 3196      		adiw r30,1
 522 01d0 ADB7      		in r26,__SP_L__
 523 01d2 BEB7      		in r27,__SP_H__
 524 01d4 1296      		adiw r26,1+1
 525 01d6 DC93      		st X,r29
 526 01d8 CE93      		st -X,r28
 527 01da 1197      		sbiw r26,1
 528               	.LBE18:
 529 01dc 20E0      		ldi r18,lo8(__c.2295)
 530 01de 30E0      		ldi r19,hi8(__c.2295)
 531 01e0 3383      		std Z+3,r19
 532 01e2 2283      		std Z+2,r18
 533 01e4 9583      		std Z+5,r25
 534 01e6 8483      		std Z+4,r24
 535 01e8 0E94 0000 		call fprintf_P
 536 01ec 81E0      		ldi r24,lo8(1)
 537 01ee EDB7      		in r30,__SP_L__
 538 01f0 FEB7      		in r31,__SP_H__
 539 01f2 3696      		adiw r30,6
 540 01f4 0FB6      		in __tmp_reg__,__SREG__
 541 01f6 F894      		cli
 542 01f8 FEBF      		out __SP_H__,r31
 543 01fa 0FBE      		out __SREG__,__tmp_reg__
 544 01fc EDBF      		out __SP_L__,r30
 545 01fe 00C0      		rjmp .L21
 546               	.L13:
 547               	.LBE14:
  99:Lib/net/tcp.c ****   if (socket == NULL)
 549               	.LM32:
 550 0200 2097      		sbiw r28,0
 551 0202 01F4      		brne .+2
 552 0204 00C0      		rjmp .L20
 103:Lib/net/tcp.c ****   socket->seqNoLastReceived = htonl(nicState.layer4.tcp->seqno);
 554               	.LM33:
 555 0206 E091 0000 		lds r30,nicState+12
 556 020a F091 0000 		lds r31,(nicState+12)+1
 557 020e 6481      		ldd r22,Z+4
 558 0210 7581      		ldd r23,Z+5
 559 0212 8681      		ldd r24,Z+6
 560 0214 9781      		ldd r25,Z+7
 561 0216 0E94 0000 		call htonl
 562 021a 6987      		std Y+9,r22
 563 021c 7A87      		std Y+10,r23
 564 021e 8B87      		std Y+11,r24
 565 0220 9C87      		std Y+12,r25
 105:Lib/net/tcp.c ****   if (socket->state == LISTEN)
 567               	.LM34:
 568 0222 8881      		ld r24,Y
 569 0224 8130      		cpi r24,lo8(1)
 570 0226 01F0      		breq .+2
 571 0228 00C0      		rjmp .L22
 107:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_SYN)
 573               	.LM35:
 574 022a E091 0000 		lds r30,nicState+12
 575 022e F091 0000 		lds r31,(nicState+12)+1
 576 0232 8585      		ldd r24,Z+13
 577 0234 2091 0000 		lds r18,tcpDebugStream
 578 0238 3091 0000 		lds r19,(tcpDebugStream)+1
 579 023c 81FF      		sbrs r24,1
 580 023e 00C0      		rjmp .L23
 112:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 582               	.LM36:
 583 0240 2115      		cp r18,__zero_reg__
 584 0242 3105      		cpc r19,__zero_reg__
 585 0244 01F0      		breq .L24
 113:Lib/net/tcp.c ****         if (tcpDebugLevel > 2)
 587               	.LM37:
 588 0246 8091 0000 		lds r24,tcpDebugLevel
 589 024a 8330      		cpi r24,lo8(3)
 590 024c 00F0      		brlo .L24
 114:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection socket state change LISTEN->SYN_RE
 592               	.LM38:
 593 024e 00D0      		rcall .
 594 0250 00D0      		rcall .
 595 0252 ADB7      		in r26,__SP_L__
 596 0254 BEB7      		in r27,__SP_H__
 597 0256 1296      		adiw r26,1+1
 598 0258 3C93      		st X,r19
 599 025a 2E93      		st -X,r18
 600 025c 1197      		sbiw r26,1
 601 025e 80E0      		ldi r24,lo8(__c.2326)
 602 0260 90E0      		ldi r25,hi8(__c.2326)
 603 0262 1496      		adiw r26,3+1
 604 0264 9C93      		st X,r25
 605 0266 8E93      		st -X,r24
 606 0268 1397      		sbiw r26,3
 607 026a 0E94 0000 		call fprintf_P
 608 026e 0F90      		pop __tmp_reg__
 609 0270 0F90      		pop __tmp_reg__
 610 0272 0F90      		pop __tmp_reg__
 611 0274 0F90      		pop __tmp_reg__
 612               	.L24:
 613               	.LBB19:
 614               	.LBB20:
  90:Lib/net/tcp.c ****   sck->state        = SYN_RECEIVED;
 616               	.LM39:
 617 0276 82E0      		ldi r24,lo8(2)
 618 0278 8883      		st Y,r24
  91:Lib/net/tcp.c ****   sck->remotePort   = nicState.layer4.tcp->srcport;
 620               	.LM40:
 621 027a E091 0000 		lds r30,nicState+12
 622 027e F091 0000 		lds r31,(nicState+12)+1
 623 0282 8081      		ld r24,Z
 624 0284 9181      		ldd r25,Z+1
 625 0286 9887      		std Y+8,r25
 626 0288 8F83      		std Y+7,r24
  92:Lib/net/tcp.c ****   sck->RemoteIpAddr = nicState.layer3.ip->srcipaddr;
 628               	.LM41:
 629 028a E091 0000 		lds r30,nicState+10
 630 028e F091 0000 		lds r31,(nicState+10)+1
 631 0292 8485      		ldd r24,Z+12
 632 0294 9585      		ldd r25,Z+13
 633 0296 A685      		ldd r26,Z+14
 634 0298 B785      		ldd r27,Z+15
 635 029a 8983      		std Y+1,r24
 636 029c 9A83      		std Y+2,r25
 637 029e AB83      		std Y+3,r26
 638 02a0 BC83      		std Y+4,r27
 639               	.LBE20:
 640               	.LBE19:
 118:Lib/net/tcp.c ****       nicState.layer4.tcp->srcport   = socket->localPort;
 642               	.LM42:
 643 02a2 E091 0000 		lds r30,nicState+12
 644 02a6 F091 0000 		lds r31,(nicState+12)+1
 645 02aa 8D81      		ldd r24,Y+5
 646 02ac 9E81      		ldd r25,Y+6
 647 02ae 9183      		std Z+1,r25
 648 02b0 8083      		st Z,r24
 119:Lib/net/tcp.c ****       nicState.layer4.tcp->destport  = socket->remotePort;
 650               	.LM43:
 651 02b2 0091 0000 		lds r16,nicState+12
 652 02b6 1091 0000 		lds r17,(nicState+12)+1
 653 02ba 8F81      		ldd r24,Y+7
 654 02bc 9885      		ldd r25,Y+8
 655 02be F801      		movw r30,r16
 656 02c0 9383      		std Z+3,r25
 657 02c2 8283      		std Z+2,r24
 120:Lib/net/tcp.c ****       nicState.layer4.tcp->seqno     = htonl(socket->seqNoLastSent);
 659               	.LM44:
 660 02c4 6D85      		ldd r22,Y+13
 661 02c6 7E85      		ldd r23,Y+14
 662 02c8 8F85      		ldd r24,Y+15
 663 02ca 9889      		ldd r25,Y+16
 664 02cc 0E94 0000 		call htonl
 665 02d0 D801      		movw r26,r16
 666 02d2 1496      		adiw r26,4
 667 02d4 6D93      		st X+,r22
 668 02d6 7D93      		st X+,r23
 669 02d8 8D93      		st X+,r24
 670 02da 9C93      		st X,r25
 671 02dc 1797      		sbiw r26,4+3
 121:Lib/net/tcp.c ****       nicState.layer4.tcp->ackno     = htonl(socket->seqNoLastReceived+1);
 673               	.LM45:
 674 02de 0091 0000 		lds r16,nicState+12
 675 02e2 1091 0000 		lds r17,(nicState+12)+1
 676 02e6 6985      		ldd r22,Y+9
 677 02e8 7A85      		ldd r23,Y+10
 678 02ea 8B85      		ldd r24,Y+11
 679 02ec 9C85      		ldd r25,Y+12
 680 02ee 6F5F      		subi r22,lo8(-(1))
 681 02f0 7F4F      		sbci r23,hi8(-(1))
 682 02f2 8F4F      		sbci r24,hlo8(-(1))
 683 02f4 9F4F      		sbci r25,hhi8(-(1))
 684 02f6 0E94 0000 		call htonl
 685 02fa F801      		movw r30,r16
 686 02fc 6087      		std Z+8,r22
 687 02fe 7187      		std Z+9,r23
 688 0300 8287      		std Z+10,r24
 689 0302 9387      		std Z+11,r25
 122:Lib/net/tcp.c ****       nicState.layer4.tcp->tcpoffset = 5<<4;
 691               	.LM46:
 692 0304 0091 0000 		lds r16,nicState+12
 693 0308 1091 0000 		lds r17,(nicState+12)+1
 694 030c 80E5      		ldi r24,lo8(80)
 695 030e D801      		movw r26,r16
 696 0310 1C96      		adiw r26,12
 697 0312 8C93      		st X,r24
 698 0314 1C97      		sbiw r26,12
 123:Lib/net/tcp.c ****       nicState.layer4.tcp->flags     = TCP_FLAGS_ACK+TCP_FLAGS_SYN;
 700               	.LM47:
 701 0316 82E1      		ldi r24,lo8(18)
 702 0318 1D96      		adiw r26,13
 703 031a 8C93      		st X,r24
 124:Lib/net/tcp.c ****       nicState.layer4.tcp->wnd       = htons(100);
 705               	.LM48:
 706 031c 84E6      		ldi r24,lo8(100)
 707 031e 90E0      		ldi r25,hi8(100)
 708 0320 0E94 0000 		call htons
 709 0324 F801      		movw r30,r16
 710 0326 9787      		std Z+15,r25
 711 0328 8687      		std Z+14,r24
 125:Lib/net/tcp.c ****       nicState.layer4.tcp->tcpchksum = 0;
 713               	.LM49:
 714 032a E091 0000 		lds r30,nicState+12
 715 032e F091 0000 		lds r31,(nicState+12)+1
 716 0332 118A      		std Z+17,__zero_reg__
 717 0334 108A      		std Z+16,__zero_reg__
 126:Lib/net/tcp.c ****       nicState.layer4.tcp->urgp      = 0;
 719               	.LM50:
 720 0336 138A      		std Z+19,__zero_reg__
 721 0338 128A      		std Z+18,__zero_reg__
 127:Lib/net/tcp.c ****       calculateTcpChecksun(TCP_HEADER_LEN);
 723               	.LM51:
 724 033a 84E1      		ldi r24,lo8(20)
 725 033c 90E0      		ldi r25,hi8(20)
 726 033e 0E94 0000 		call calculateTcpChecksun
 129:Lib/net/tcp.c ****       socket->seqNoLastSent++;
 728               	.LM52:
 729 0342 8D85      		ldd r24,Y+13
 730 0344 9E85      		ldd r25,Y+14
 731 0346 AF85      		ldd r26,Y+15
 732 0348 B889      		ldd r27,Y+16
 733 034a 0196      		adiw r24,1
 734 034c A11D      		adc r26,__zero_reg__
 735 034e B11D      		adc r27,__zero_reg__
 736 0350 8D87      		std Y+13,r24
 737 0352 9E87      		std Y+14,r25
 738 0354 AF87      		std Y+15,r26
 739 0356 B88B      		std Y+16,r27
 130:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN);
 741               	.LM53:
 742 0358 6981      		ldd r22,Y+1
 743 035a 7A81      		ldd r23,Y+2
 744 035c 8B81      		ldd r24,Y+3
 745 035e 9C81      		ldd r25,Y+4
 746 0360 46E0      		ldi r20,lo8(6)
 747 0362 24E1      		ldi r18,lo8(20)
 748 0364 30E0      		ldi r19,hi8(20)
 749 0366 0E94 0000 		call ipSend
 750 036a 00C0      		rjmp .L25
 751               	.L23:
 135:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 753               	.LM54:
 754 036c 2115      		cp r18,__zero_reg__
 755 036e 3105      		cpc r19,__zero_reg__
 756 0370 01F4      		brne .+2
 757 0372 00C0      		rjmp .L25
 136:Lib/net/tcp.c ****         if (tcpDebugLevel > 1)
 759               	.LM55:
 760 0374 8091 0000 		lds r24,tcpDebugLevel
 761 0378 8230      		cpi r24,lo8(2)
 762 037a 00F4      		brsh .+2
 763 037c 00C0      		rjmp .L25
 137:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection ERROR: syn flag wasn't set\r\n"));
 765               	.LM56:
 766 037e 00D0      		rcall .
 767 0380 00D0      		rcall .
 768 0382 ADB7      		in r26,__SP_L__
 769 0384 BEB7      		in r27,__SP_H__
 770 0386 1296      		adiw r26,1+1
 771 0388 3C93      		st X,r19
 772 038a 2E93      		st -X,r18
 773 038c 1197      		sbiw r26,1
 774 038e 80E0      		ldi r24,lo8(__c.2328)
 775 0390 90E0      		ldi r25,hi8(__c.2328)
 776 0392 00C0      		rjmp .L29
 777               	.L22:
 143:Lib/net/tcp.c ****   if (socket->state == SYN_RECEIVED)
 779               	.LM57:
 780 0394 8230      		cpi r24,lo8(2)
 781 0396 01F0      		breq .+2
 782 0398 00C0      		rjmp .L26
 145:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_ACK)
 784               	.LM58:
 785 039a E091 0000 		lds r30,nicState+12
 786 039e F091 0000 		lds r31,(nicState+12)+1
 787 03a2 8585      		ldd r24,Z+13
 788 03a4 2091 0000 		lds r18,tcpDebugStream
 789 03a8 3091 0000 		lds r19,(tcpDebugStream)+1
 790 03ac 84FF      		sbrs r24,4
 791 03ae 00C0      		rjmp .L27
 147:Lib/net/tcp.c ****       socket->state    = ESTABILISHED;
 793               	.LM59:
 794 03b0 83E0      		ldi r24,lo8(3)
 795 03b2 8883      		st Y,r24
 149:Lib/net/tcp.c ****     if (tcpDebugStream != NULL)
 797               	.LM60:
 798 03b4 2115      		cp r18,__zero_reg__
 799 03b6 3105      		cpc r19,__zero_reg__
 800 03b8 01F4      		brne .+2
 801 03ba 00C0      		rjmp .L25
 150:Lib/net/tcp.c ****       if (tcpDebugLevel > 2)
 803               	.LM61:
 804 03bc 8091 0000 		lds r24,tcpDebugLevel
 805 03c0 8330      		cpi r24,lo8(3)
 806 03c2 00F4      		brsh .+2
 807 03c4 00C0      		rjmp .L25
 151:Lib/net/tcp.c ****         fprintf_P(tcpDebugStream, PSTR("Opening TCP connection socket state change SYN_RECEIVED->ES
 809               	.LM62:
 810 03c6 00D0      		rcall .
 811 03c8 00D0      		rcall .
 812 03ca EDB7      		in r30,__SP_L__
 813 03cc FEB7      		in r31,__SP_H__
 814 03ce 3283      		std Z+2,r19
 815 03d0 2183      		std Z+1,r18
 816 03d2 80E0      		ldi r24,lo8(__c.2330)
 817 03d4 90E0      		ldi r25,hi8(__c.2330)
 818 03d6 9483      		std Z+4,r25
 819 03d8 8383      		std Z+3,r24
 820 03da 00C0      		rjmp .L30
 821               	.L27:
 157:Lib/net/tcp.c ****       socket->state = LISTEN;
 823               	.LM63:
 824 03dc 81E0      		ldi r24,lo8(1)
 825 03de 8883      		st Y,r24
 159:Lib/net/tcp.c ****       if (tcpDebugStream != NULL)
 827               	.LM64:
 828 03e0 2115      		cp r18,__zero_reg__
 829 03e2 3105      		cpc r19,__zero_reg__
 830 03e4 01F4      		brne .+2
 831 03e6 00C0      		rjmp .L25
 160:Lib/net/tcp.c ****         if (tcpDebugLevel > 1)
 833               	.LM65:
 834 03e8 8091 0000 		lds r24,tcpDebugLevel
 835 03ec 8230      		cpi r24,lo8(2)
 836 03ee 00F4      		brsh .+2
 837 03f0 00C0      		rjmp .L25
 161:Lib/net/tcp.c ****           fprintf_P(tcpDebugStream, PSTR("Opening TCP connection ERROR: ack flag wasn't set\r\n"));
 839               	.LM66:
 840 03f2 00D0      		rcall .
 841 03f4 00D0      		rcall .
 842 03f6 ADB7      		in r26,__SP_L__
 843 03f8 BEB7      		in r27,__SP_H__
 844 03fa 1296      		adiw r26,1+1
 845 03fc 3C93      		st X,r19
 846 03fe 2E93      		st -X,r18
 847 0400 1197      		sbiw r26,1
 848 0402 80E0      		ldi r24,lo8(__c.2332)
 849 0404 90E0      		ldi r25,hi8(__c.2332)
 850               	.L29:
 851 0406 1496      		adiw r26,3+1
 852 0408 9C93      		st X,r25
 853 040a 8E93      		st -X,r24
 854 040c 1397      		sbiw r26,3
 855               	.L30:
 856 040e 0E94 0000 		call fprintf_P
 857 0412 80E0      		ldi r24,lo8(0)
 858 0414 0F90      		pop __tmp_reg__
 859 0416 0F90      		pop __tmp_reg__
 860 0418 0F90      		pop __tmp_reg__
 861 041a 0F90      		pop __tmp_reg__
 862 041c 00C0      		rjmp .L21
 863               	.L26:
 168:Lib/net/tcp.c ****   if (socket->state == ESTABILISHED)
 865               	.LM67:
 866 041e 8330      		cpi r24,lo8(3)
 867 0420 01F4      		brne .L25
 170:Lib/net/tcp.c ****     if (nicState.layer4.tcp->flags & TCP_FLAGS_FIN)  //ESTABILISHED -> CLOSE_WAIT -> closed
 869               	.LM68:
 870 0422 E091 0000 		lds r30,nicState+12
 871 0426 F091 0000 		lds r31,(nicState+12)+1
 872 042a 8585      		ldd r24,Z+13
 873 042c 80FF      		sbrs r24,0
 874 042e 00C0      		rjmp .L25
 875               	.LBB21:
 172:Lib/net/tcp.c ****       socket->timer              = timer100Hz;
 877               	.LM69:
 878 0430 8091 0000 		lds r24,timer100Hz
 879 0434 8D8B      		std Y+21,r24
 173:Lib/net/tcp.c ****       nicState.layer4.tcp->flags = TCP_FLAGS_ACK;
 881               	.LM70:
 882 0436 80E1      		ldi r24,lo8(16)
 883 0438 8587      		std Z+13,r24
 182:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN + dataFromBufLen);
 885               	.LM71:
 886 043a 6981      		ldd r22,Y+1
 887 043c 7A81      		ldd r23,Y+2
 888 043e 8B81      		ldd r24,Y+3
 889 0440 9C81      		ldd r25,Y+4
 890 0442 46E0      		ldi r20,lo8(6)
 891 0444 24E1      		ldi r18,lo8(20)
 892 0446 30E0      		ldi r19,hi8(20)
 893 0448 0E94 0000 		call ipSend
 183:Lib/net/tcp.c ****       socket->state    = CLOSE_WAIT;
 895               	.LM72:
 896 044c 84E0      		ldi r24,lo8(4)
 897 044e 8883      		st Y,r24
 186:Lib/net/tcp.c ****       nicState.layer4.tcp->flags = TCP_FLAGS_FIN;
 899               	.LM73:
 900 0450 E091 0000 		lds r30,nicState+12
 901 0454 F091 0000 		lds r31,(nicState+12)+1
 902 0458 81E0      		ldi r24,lo8(1)
 903 045a 8587      		std Z+13,r24
 187:Lib/net/tcp.c ****       ipSend(socket->RemoteIpAddr, IP_PROTO_TCP, TCP_HEADER_LEN);
 905               	.LM74:
 906 045c 6981      		ldd r22,Y+1
 907 045e 7A81      		ldd r23,Y+2
 908 0460 8B81      		ldd r24,Y+3
 909 0462 9C81      		ldd r25,Y+4
 910 0464 46E0      		ldi r20,lo8(6)
 911 0466 24E1      		ldi r18,lo8(20)
 912 0468 30E0      		ldi r19,hi8(20)
 913 046a 0E94 0000 		call ipSend
 188:Lib/net/tcp.c ****       socket->state    = LAST_ACK;
 915               	.LM75:
 916 046e 85E0      		ldi r24,lo8(5)
 917 0470 8883      		st Y,r24
 918 0472 00C0      		rjmp .L25
 919               	.L20:
 920 0474 81E0      		ldi r24,lo8(1)
 921 0476 00C0      		rjmp .L21
 922               	.L25:
 923 0478 80E0      		ldi r24,lo8(0)
 924               	.L21:
 925               	/* epilogue start */
 926               	.LBE21:
 196:Lib/net/tcp.c **** }
 928               	.LM76:
 929 047a DF91      		pop r29
 930 047c CF91      		pop r28
 931 047e 1F91      		pop r17
 932 0480 0F91      		pop r16
 933 0482 FF90      		pop r15
 934 0484 EF90      		pop r14
 935 0486 DF90      		pop r13
 936 0488 CF90      		pop r12
 937 048a BF90      		pop r11
 938 048c AF90      		pop r10
 939 048e 0895      		ret
 956               	.Lscope6:
 958               		.stabd	78,0,0
 960               	.global	netstackTCPIPProcess
 962               	netstackTCPIPProcess:
 963               		.stabd	46,0,0
 213:Lib/net/tcp.c **** {
 965               	.LM77:
 966               	.LFBB7:
 967 0490 0F93      		push r16
 968 0492 1F93      		push r17
 969               	/* prologue: function */
 970               	/* frame size = 0 */
 214:Lib/net/tcp.c ****   if (nicState.layer4.tcp->destport == htons(80))
 972               	.LM78:
 973 0494 E091 0000 		lds r30,nicState+12
 974 0498 F091 0000 		lds r31,(nicState+12)+1
 975 049c 0281      		ldd r16,Z+2
 976 049e 1381      		ldd r17,Z+3
 977 04a0 80E5      		ldi r24,lo8(80)
 978 04a2 90E0      		ldi r25,hi8(80)
 979 04a4 0E94 0000 		call htons
 980 04a8 0817      		cp r16,r24
 981 04aa 1907      		cpc r17,r25
 982 04ac 01F4      		brne .L32
 217:Lib/net/tcp.c ****     if (tcpDebugStream != NULL)
 984               	.LM79:
 985 04ae 8091 0000 		lds r24,tcpDebugStream
 986 04b2 9091 0000 		lds r25,(tcpDebugStream)+1
 987 04b6 0097      		sbiw r24,0
 988 04b8 01F0      		breq .L34
 218:Lib/net/tcp.c ****       fprintf_P(tcpDebugStream, PSTR("HTTP not implemented\r\n"));
 990               	.LM80:
 991 04ba 00D0      		rcall .
 992 04bc 00D0      		rcall .
 993 04be EDB7      		in r30,__SP_L__
 994 04c0 FEB7      		in r31,__SP_H__
 995 04c2 9283      		std Z+2,r25
 996 04c4 8183      		std Z+1,r24
 997 04c6 80E0      		ldi r24,lo8(__c.2382)
 998 04c8 90E0      		ldi r25,hi8(__c.2382)
 999 04ca 9483      		std Z+4,r25
 1000 04cc 8383      		std Z+3,r24
 1001 04ce 0E94 0000 		call fprintf_P
 1002 04d2 0F90      		pop __tmp_reg__
 1003 04d4 0F90      		pop __tmp_reg__
 1004 04d6 0F90      		pop __tmp_reg__
 1005 04d8 0F90      		pop __tmp_reg__
 1006 04da 00C0      		rjmp .L34
 1007               	.L32:
 224:Lib/net/tcp.c ****     processTcpPacket();
 1009               	.LM81:
 1010 04dc 0E94 0000 		call processTcpPacket
 1011               	.L34:
 1012               	/* epilogue start */
 226:Lib/net/tcp.c **** }
 1014               	.LM82:
 1015 04e0 1F91      		pop r17
 1016 04e2 0F91      		pop r16
 1017 04e4 0895      		ret
 1019               	.Lscope7:
 1021               		.stabd	78,0,0
 1023               	.global	socketInit
 1025               	socketInit:
 1026               		.stabd	46,0,0
  25:Lib/net/tcp.c **** {
 1028               	.LM83:
 1029               	.LFBB8:
 1030 04e6 BF92      		push r11
 1031 04e8 CF92      		push r12
 1032 04ea DF92      		push r13
 1033 04ec EF92      		push r14
 1034 04ee FF92      		push r15
 1035 04f0 0F93      		push r16
 1036 04f2 1F93      		push r17
 1037 04f4 CF93      		push r28
 1038 04f6 DF93      		push r29
 1039               	/* prologue: function */
 1040               	/* frame size = 0 */
  26:Lib/net/tcp.c ****   sockets = xmalloc(NUMBER_OF_SOCKETS * sizeof(struct TcpIpSocket));
 1042               	.LM84:
 1043 04f8 80E3      		ldi r24,lo8(560)
 1044 04fa 92E0      		ldi r25,hi8(560)
 1045 04fc 0E94 0000 		call xmalloc
 1046 0500 8093 0000 		sts sockets,r24
 1047 0504 9093 0000 		sts sockets+1,r25
  27:Lib/net/tcp.c ****   memset(sockets, 0, NUMBER_OF_SOCKETS * sizeof(struct TcpIpSocket));
 1049               	.LM85:
 1050 0508 FC01      		movw r30,r24
 1051 050a 80E3      		ldi r24,lo8(560)
 1052 050c 92E0      		ldi r25,hi8(560)
 1053 050e DF01      		movw r26,r30
 1054 0510 9C01      		movw r18,r24
 1055 0512 1D92      		st X+,__zero_reg__
 1056 0514 2150      		subi r18,1
 1057 0516 3040      		sbci r19,0
 1058 0518 01F4      		brne .-8
  32:Lib/net/tcp.c ****   struct TcpIpSocket *sck = sockets;
 1060               	.LM86:
 1061 051a 0091 0000 		lds r16,sockets
 1062 051e 1091 0000 		lds r17,(sockets)+1
 1063 0522 C8EA      		ldi r28,lo8(25000)
 1064 0524 D1E6      		ldi r29,hi8(25000)
  41:Lib/net/tcp.c ****     sck->seqNoLastSent = HTONL(0xFF112233); 
 1066               	.LM87:
 1067 0526 8FEF      		ldi r24,lo8(857870847)
 1068 0528 C82E      		mov r12,r24
 1069 052a 81E1      		ldi r24,hi8(857870847)
 1070 052c D82E      		mov r13,r24
 1071 052e 82E2      		ldi r24,hlo8(857870847)
 1072 0530 E82E      		mov r14,r24
 1073 0532 83E3      		ldi r24,hhi8(857870847)
 1074 0534 F82E      		mov r15,r24
  42:Lib/net/tcp.c ****     sck->state         = LISTEN;   
 1076               	.LM88:
 1077 0536 BB24      		clr r11
 1078 0538 B394      		inc r11
 1079               	.L39:
  40:Lib/net/tcp.c ****     sck->localPort     = (i<16) ? htons(MYTELNETPOERT + i) : (MYTELNETPOERT + 16);
 1081               	.LM89:
 1082 053a DE01      		movw r26,r28
 1083 053c A85A      		subi r26,lo8(-(88))
 1084 053e A031      		cpi r26,lo8(16)
 1085 0540 00F0      		brlo .L36
 1086 0542 88EB      		ldi r24,lo8(25016)
 1087 0544 91E6      		ldi r25,hi8(25016)
 1088 0546 00C0      		rjmp .L37
 1089               	.L36:
 1090 0548 CE01      		movw r24,r28
 1091 054a 0E94 0000 		call htons
 1092               	.L37:
 1093 054e F801      		movw r30,r16
 1094 0550 9683      		std Z+6,r25
 1095 0552 8583      		std Z+5,r24
  41:Lib/net/tcp.c ****     sck->seqNoLastSent = HTONL(0xFF112233); 
 1097               	.LM90:
 1098 0554 D801      		movw r26,r16
 1099 0556 1D96      		adiw r26,13
 1100 0558 CD92      		st X+,r12
 1101 055a DD92      		st X+,r13
 1102 055c ED92      		st X+,r14
 1103 055e FC92      		st X,r15
 1104 0560 5097      		sbiw r26,13+3
  42:Lib/net/tcp.c ****     sck->state         = LISTEN;   
 1106               	.LM91:
 1107 0562 BC92      		st X,r11
 1108 0564 2196      		adiw r28,1
  33:Lib/net/tcp.c ****   for (i=0; i < NUMBER_OF_SOCKETS; i++)
 1110               	.LM92:
 1111 0566 B1E6      		ldi r27,hi8(25020)
 1112 0568 CC3B      		cpi r28,lo8(25020)
 1113 056a DB07      		cpc r29,r27
 1114 056c 01F0      		breq .L40
  43:Lib/net/tcp.c ****     sck++;
 1116               	.LM93:
 1117 056e 045E      		subi r16,lo8(-(28))
 1118 0570 1F4F      		sbci r17,hi8(-(28))
 1119 0572 00C0      		rjmp .L39
 1120               	.L40:
 1121               	/* epilogue start */
  45:Lib/net/tcp.c **** }
 1123               	.LM94:
 1124 0574 DF91      		pop r29
 1125 0576 CF91      		pop r28
 1126 0578 1F91      		pop r17
 1127 057a 0F91      		pop r16
 1128 057c FF90      		pop r15
 1129 057e EF90      		pop r14
 1130 0580 DF90      		pop r13
 1131 0582 CF90      		pop r12
 1132 0584 BF90      		pop r11
 1133 0586 0895      		ret
 1138               	.Lscope8:
 1140               		.stabd	78,0,0
 1141               		.section	.progmem.data,"a",@progbits
 1144               	__c.2382:
 1145 0000 4854 5450 		.string	"HTTP not implemented\r\n"
 1145      206E 6F74 
 1145      2069 6D70 
 1145      6C65 6D65 
 1145      6E74 6564 
 1148               	__c.2332:
 1149 0017 4F70 656E 		.string	"Opening TCP connection ERROR: ack flag wasn't set\r\n"
 1149      696E 6720 
 1149      5443 5020 
 1149      636F 6E6E 
 1149      6563 7469 
 1152               	__c.2330:
 1153 004b 4F70 656E 		.ascii	"Opening"
 1153      696E 67
 1154 0052 2054 4350 		.string	" TCP connection socket state change SYN_RECEIVED->ESTABILISHED\r\n"
 1154      2063 6F6E 
 1154      6E65 6374 
 1154      696F 6E20 
 1154      736F 636B 
 1157               	__c.2328:
 1158 0093 4F70 656E 		.string	"Opening TCP connection ERROR: syn flag wasn't set\r\n"
 1158      696E 6720 
 1158      5443 5020 
 1158      636F 6E6E 
 1158      6563 7469 
 1161               	__c.2326:
 1162 00c7 4F        		.ascii	"O"
 1163 00c8 7065 6E69 		.string	"pening TCP connection socket state change LISTEN->SYN_RECEIVED\r\n"
 1163      6E67 2054 
 1163      4350 2063 
 1163      6F6E 6E65 
 1163      6374 696F 
 1166               	__c.2295:
 1167 0109 4361 6E27 		.string	"Can't find TCP socket with localPort %d\r\n"
 1167      7420 6669 
 1167      6E64 2054 
 1167      4350 2073 
 1167      6F63 6B65 
 1170               	__c.2290:
 1171 0133 466F 756E 		.string	"Found TCP socket no %d state LISTEN\r\n"
 1171      6420 5443 
 1171      5020 736F 
 1171      636B 6574 
 1171      206E 6F20 
 1174               	__c.2285:
 1175 0159 466F 756E 		.string	"Found TCP socket state %d\r\n"
 1175      6420 5443 
 1175      5020 736F 
 1175      636B 6574 
 1175      2073 7461 
 1176               		.comm wwwport,1,1
 1177               		.comm nicState,14,1
 1178               		.comm IpMyConfig,15,1
 1179               		.comm arpDebug,2,1
 1180               		.comm arpDebugLevel,1,1
 1181               		.comm icmpDebug,2,1
 1182               		.comm icmpDebugLevel,1,1
 1183               		.comm udpSocket,2,1
 1184               		.comm udpDbgStream,2,1
 1185               		.comm udpDbgLevel,1,1
 1186               		.comm tcpDebugStream,2,1
 1187               		.comm tcpDebugLevel,1,1
 1188               		.comm sockets,2,1
 1210               		.text
 1212               	.Letext0:
 1213               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 tcp.c
     /tmp/cc16dmSK.s:2      *ABS*:0000003f __SREG__
     /tmp/cc16dmSK.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc16dmSK.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc16dmSK.s:5      *ABS*:00000034 __CCP__
     /tmp/cc16dmSK.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc16dmSK.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc16dmSK.s:164    .text:00000000 sendTcBuffer
     /tmp/cc16dmSK.s:185    .text:00000004 setTcpDebug
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
     /tmp/cc16dmSK.s:210    .text:00000012 flushTcpQueues
     /tmp/cc16dmSK.s:228    .text:00000014 httpProcess
     /tmp/cc16dmSK.s:247    .text:00000016 calculateTcpChecksun
                            *COM*:0000000e nicState
     /tmp/cc16dmSK.s:284    .text:0000003c processTcpPacket
                            *COM*:00000002 sockets
     /tmp/cc16dmSK.s:1174   .progmem.data:00000159 __c.2285
     /tmp/cc16dmSK.s:1170   .progmem.data:00000133 __c.2290
     /tmp/cc16dmSK.s:1166   .progmem.data:00000109 __c.2295
     /tmp/cc16dmSK.s:1161   .progmem.data:000000c7 __c.2326
     /tmp/cc16dmSK.s:1157   .progmem.data:00000093 __c.2328
     /tmp/cc16dmSK.s:1152   .progmem.data:0000004b __c.2330
     /tmp/cc16dmSK.s:1148   .progmem.data:00000017 __c.2332
     /tmp/cc16dmSK.s:962    .text:00000490 netstackTCPIPProcess
     /tmp/cc16dmSK.s:1144   .progmem.data:00000000 __c.2382
     /tmp/cc16dmSK.s:1025   .text:000004e6 socketInit
                            *COM*:00000001 wwwport
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel

UNDEFINED SYMBOLS
netChecksum
fprintf_P
htons
htonl
ipSend
timer100Hz
xmalloc
__do_clear_bss
