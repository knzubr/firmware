   1               		.file	"sensors_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 259               	.global	sensorsTask
 261               	sensorsTask:
 262               		.stabd	46,0,0
   1:sensors_task.c **** /*********************************************
   2:sensors_task.c ****  * vim:sw=8:ts=8:si:et
   3:sensors_task.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:sensors_task.c ****  * Author: Guido Socher
   5:sensors_task.c ****  * Copyright: GPL V2
   6:sensors_task.c ****  * See http://www.gnu.org/licenses/gpl.html
   7:sensors_task.c ****  *
   8:sensors_task.c ****  * Ethernet remote device and sensor
   9:sensors_task.c ****  * UDP and HTTP interface
  10:sensors_task.c ****         url looks like this http://baseurl/password/command
  11:sensors_task.c ****         or http://baseurl/password/
  12:sensors_task.c ****  *
  13:sensors_task.c ****  * Chip type           : Atmega88 or Atmega168 or Atmega328 with ENC28J60
  14:sensors_task.c ****  * Note: there is a version number in the text. Search for tuxgraphics
  15:sensors_task.c ****  *********************************************/
  16:sensors_task.c **** #include <avr/io.h>
  17:sensors_task.c **** #include <stdlib.h>
  18:sensors_task.c **** #include <string.h>
  19:sensors_task.c **** #include <stdio.h>
  20:sensors_task.c **** #include <avr/pgmspace.h>
  21:sensors_task.c **** #include "sensors_task.h"
  22:sensors_task.c **** #include "memory_x.h"
  23:sensors_task.c **** #include "main.h"
  24:sensors_task.c **** #include "Rs485_prot.h"
  25:sensors_task.c **** #include "protocol1.h"
  26:sensors_task.c **** #include "mpc23s17.h"
  27:sensors_task.c **** 
  28:sensors_task.c **** 
  29:sensors_task.c **** 
  30:sensors_task.c **** void sensorsTaskInit(void)
  31:sensors_task.c **** {
  32:sensors_task.c ****   LockersMemInit();
  33:sensors_task.c ****   rollersMemInit();
  34:sensors_task.c **** }
  35:sensors_task.c **** 
  36:sensors_task.c **** void sensorsTask(void* pvParameters)
  37:sensors_task.c **** {
 264               	.LM0:
 265               	.LFBB1:
 266 0000 1F93      		push r17
 267               	/* prologue: function */
 268               	/* frame size = 0 */
  38:sensors_task.c ****   pvParameters = NULL;
  39:sensors_task.c ****   uint8_t addr = 255;
  40:sensors_task.c **** //  uint8_t i;
  41:sensors_task.c **** 
  42:sensors_task.c ****   MPC23s17SetDirA(0x00, 0);
 270               	.LM1:
 271 0002 80E0      		ldi r24,lo8(0)
 272 0004 60E0      		ldi r22,lo8(0)
 273 0006 0E94 0000 		call MPC23s17SetDirA
  43:sensors_task.c ****   
  44:sensors_task.c ****   MPC23s17SetDirB(0x00, 0);
 275               	.LM2:
 276 000a 80E0      		ldi r24,lo8(0)
 277 000c 60E0      		ldi r22,lo8(0)
 278 000e 0E94 0000 		call MPC23s17SetDirB
 279               	.L3:
 280               	.LBB2:
  45:sensors_task.c **** 
  46:sensors_task.c ****   for( ; ; )
  47:sensors_task.c ****   {
  48:sensors_task.c ****     uint16_t tmp;
  49:sensors_task.c ****     //Read power suply voltage
  50:sensors_task.c ****     tmp = MCP3008_getSampleSingle(0);
 282               	.LM3:
 283 0012 80E0      		ldi r24,lo8(0)
 284 0014 0E94 0000 		call MCP3008_getSampleSingle
  51:sensors_task.c ****     voltage = (uint8_t)(tmp>>5);
 286               	.LM4:
 287 0018 65E0      		ldi r22,5
 288 001a 9695      	1:	lsr r25
 289 001c 8795      		ror r24
 290 001e 6A95      		dec r22
 291 0020 01F4      		brne 1b
 292 0022 8093 0000 		sts voltage,r24
  52:sensors_task.c ****     vTaskDelay(10);
 294               	.LM5:
 295 0026 8AE0      		ldi r24,lo8(10)
 296 0028 90E0      		ldi r25,hi8(10)
 297 002a 0E94 0000 		call vTaskDelay
  53:sensors_task.c ****       
  54:sensors_task.c ****     //Read temperature inside chasis
  55:sensors_task.c ****     tmp = MCP3008_getSampleSingle(1);
 299               	.LM6:
 300 002e 81E0      		ldi r24,lo8(1)
 301 0030 0E94 0000 		call MCP3008_getSampleSingle
  56:sensors_task.c ****     tmp *=10;
  57:sensors_task.c ****     temperature = (uint8_t)(tmp / 24);
 303               	.LM7:
 304 0034 9C01      		movw r18,r24
 305 0036 53E0      		ldi r21,3
 306 0038 880F      	1:	lsl r24
 307 003a 991F      		rol r25
 308 003c 5A95      		dec r21
 309 003e 01F4      		brne 1b
 310 0040 220F      		lsl r18
 311 0042 331F      		rol r19
 312 0044 820F      		add r24,r18
 313 0046 931F      		adc r25,r19
 314 0048 68E1      		ldi r22,lo8(24)
 315 004a 70E0      		ldi r23,hi8(24)
 316 004c 0E94 0000 		call __udivmodhi4
 317 0050 6093 0000 		sts temperature,r22
  58:sensors_task.c ****     vTaskDelay(10);
 319               	.LM8:
 320 0054 8AE0      		ldi r24,lo8(10)
 321 0056 90E0      		ldi r25,hi8(10)
 322 0058 0E94 0000 		call vTaskDelay
  59:sensors_task.c ****       
  60:sensors_task.c ****     //read lock
  61:sensors_task.c ****     checkLockerSensors();
 324               	.LM9:
 325 005c 0E94 0000 		call checkLockerSensors
 326 0060 11E0      		ldi r17,lo8(1)
 327               	.L2:
  62:sensors_task.c **** 
  63:sensors_task.c ****     for (addr = FIRST_ROLLER_DRIVER_ADDR; addr <= LAST_ROLLER_DRIVER_ADDR; addr++)
  64:sensors_task.c ****     {
  65:sensors_task.c ****       rs485rollerHello(addr);
 329               	.LM10:
 330 0062 812F      		mov r24,r17
 331 0064 0E94 0000 		call rs485rollerHello
  66:sensors_task.c ****       vTaskDelay(10);
 333               	.LM11:
 334 0068 8AE0      		ldi r24,lo8(10)
 335 006a 90E0      		ldi r25,hi8(10)
 336 006c 0E94 0000 		call vTaskDelay
  63:sensors_task.c ****     for (addr = FIRST_ROLLER_DRIVER_ADDR; addr <= LAST_ROLLER_DRIVER_ADDR; addr++)
 338               	.LM12:
 339 0070 1F5F      		subi r17,lo8(-(1))
 340 0072 1032      		cpi r17,lo8(32)
 341 0074 01F4      		brne .L2
 342 0076 00C0      		rjmp .L3
 343               	.LBE2:
 348               	.Lscope1:
 350               		.stabd	78,0,0
 352               	.global	sensorsTaskInit
 354               	sensorsTaskInit:
 355               		.stabd	46,0,0
  31:sensors_task.c **** {
 357               	.LM13:
 358               	.LFBB2:
 359               	/* prologue: function */
 360               	/* frame size = 0 */
  32:sensors_task.c ****   LockersMemInit();
 362               	.LM14:
 363 0078 0E94 0000 		call LockersMemInit
  33:sensors_task.c ****   rollersMemInit();
 365               	.LM15:
 366 007c 0E94 0000 		call rollersMemInit
 367               	/* epilogue start */
  34:sensors_task.c **** }
 369               	.LM16:
 370 0080 0895      		ret
 372               	.Lscope2:
 374               		.stabd	78,0,0
 375               		.comm klastry,128,1
 376               		.comm wwwport,1,1
 377               		.comm rollers,2,1
 378               		.comm xSemaphoreSpiSS,2,1
 379               		.comm portA,1,1
 380               		.comm portB,1,1
 381               		.comm lockSensors,2,1
 382               		.comm xSemaphoreRs485,2,1
 383               		.comm nicState,14,1
 384               		.comm IpMyConfig,15,1
 385               		.comm arpDebug,2,1
 386               		.comm arpDebugLevel,1,1
 387               		.comm icmpDebug,2,1
 388               		.comm icmpDebugLevel,1,1
 389               		.comm udpSocket,2,1
 390               		.comm udpDbgStream,2,1
 391               		.comm udpDbgLevel,1,1
 392               		.comm tcpDebugStream,2,1
 393               		.comm tcpDebugLevel,1,1
 394               		.comm sockets,2,1
 395               		.comm Ipv6MyConfig,5,1
 396               		.comm debugStream,2,1
 397               		.comm czasRtc,7,1
 422               	.Letext0:
 423               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 sensors_task.c
     /tmp/ccFkPvFe.s:2      *ABS*:0000003f __SREG__
     /tmp/ccFkPvFe.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccFkPvFe.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccFkPvFe.s:5      *ABS*:00000034 __CCP__
     /tmp/ccFkPvFe.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccFkPvFe.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccFkPvFe.s:261    .text:00000000 sensorsTask
     /tmp/ccFkPvFe.s:354    .text:00000078 sensorsTaskInit
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:0000000e nicState
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000005 Ipv6MyConfig
                            *COM*:00000002 debugStream
                            *COM*:00000007 czasRtc

UNDEFINED SYMBOLS
MPC23s17SetDirA
MPC23s17SetDirB
MCP3008_getSampleSingle
voltage
vTaskDelay
__udivmodhi4
temperature
checkLockerSensors
rs485rollerHello
LockersMemInit
rollersMemInit
__do_clear_bss
