   1               		.file	"enc28j60.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 557               		.weak	spiEnableEnc28j60
 559               	spiEnableEnc28j60:
 560               		.stabd	46,0,0
   1:../../freeRtos/Lib/enc28j60.c **** /*********************************************
   2:../../freeRtos/Lib/enc28j60.c ****  * vim:sw=8:ts=8:si:et
   3:../../freeRtos/Lib/enc28j60.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:../../freeRtos/Lib/enc28j60.c ****  * Author: Guido Socher 
   5:../../freeRtos/Lib/enc28j60.c ****  * Copyright: GPL V2
   6:../../freeRtos/Lib/enc28j60.c ****  * http://www.gnu.org/licenses/gpl.html
   7:../../freeRtos/Lib/enc28j60.c ****  *
   8:../../freeRtos/Lib/enc28j60.c ****  * Based on the enc28j60.c file from the AVRlib library by Pascal Stang
   9:../../freeRtos/Lib/enc28j60.c ****  * For AVRlib See http://www.procyonengineering.com/
  10:../../freeRtos/Lib/enc28j60.c ****  * Used with explicit permission of Pascal Stang.
  11:../../freeRtos/Lib/enc28j60.c ****  *
  12:../../freeRtos/Lib/enc28j60.c ****  * Title: Microchip ENC28J60 Ethernet Interface Driver
  13:../../freeRtos/Lib/enc28j60.c ****  * Chip type           : ATMEGA88 with ENC28J60
  14:../../freeRtos/Lib/enc28j60.c ****  *********************************************/
  15:../../freeRtos/Lib/enc28j60.c **** 
  16:../../freeRtos/Lib/enc28j60.c **** #include "enc28j60.h"
  17:../../freeRtos/Lib/enc28j60.c **** 
  18:../../freeRtos/Lib/enc28j60.c **** 
  19:../../freeRtos/Lib/enc28j60.c **** static uint8_t Enc28j60Bank;
  20:../../freeRtos/Lib/enc28j60.c **** static uint16_t gNextPacketPtr;
  21:../../freeRtos/Lib/enc28j60.c **** 
  22:../../freeRtos/Lib/enc28j60.c **** 
  23:../../freeRtos/Lib/enc28j60.c **** /**
  24:../../freeRtos/Lib/enc28j60.c ****  * Initialize enc28j60
  25:../../freeRtos/Lib/enc28j60.c ****  * @param *macaddr - pointer to the mac address (6 bytes)
  26:../../freeRtos/Lib/enc28j60.c ****  */
  27:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Init(uint8_t* macaddr);
  28:../../freeRtos/Lib/enc28j60.c **** 
  29:../../freeRtos/Lib/enc28j60.c **** /**
  30:../../freeRtos/Lib/enc28j60.c ****  * Read register value (without changing the bank)
  31:../../freeRtos/Lib/enc28j60.c ****  * @param op      - operation type
  32:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address
  33:../../freeRtos/Lib/enc28j60.c ****  * @return register value
  34:../../freeRtos/Lib/enc28j60.c ****  */
  35:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60ReadOp (uint8_t op, uint8_t address);
  36:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data);
  37:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60SetBank(uint8_t address);
  38:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60ReadBuffer(uint16_t len, uint8_t* data);
  39:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60WriteBuffer(uint16_t len, uint8_t* data);
  40:../../freeRtos/Lib/enc28j60.c **** 
  41:../../freeRtos/Lib/enc28j60.c **** /**
  42:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 control register
  43:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  44:../../freeRtos/Lib/enc28j60.c ****  * @return control register value
  45:../../freeRtos/Lib/enc28j60.c ****  */
  46:../../freeRtos/Lib/enc28j60.c **** static uint8_t  enc28j60Read(uint8_t address);
  47:../../freeRtos/Lib/enc28j60.c **** 
  48:../../freeRtos/Lib/enc28j60.c **** /**
  49:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 control register
  50:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  51:../../freeRtos/Lib/enc28j60.c ****  * @param data    - control register value to be writen
  52:../../freeRtos/Lib/enc28j60.c ****  */
  53:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60Write(uint8_t address, uint8_t data);
  54:../../freeRtos/Lib/enc28j60.c **** 
  55:../../freeRtos/Lib/enc28j60.c **** /**
  56:../../freeRtos/Lib/enc28j60.c ****  * Reads Enc28j60 phy register
  57:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  58:../../freeRtos/Lib/enc28j60.c ****  * @return phy register value
  59:../../freeRtos/Lib/enc28j60.c ****  */
  60:../../freeRtos/Lib/enc28j60.c **** static uint16_t enc28j60PhyReadH(uint8_t address);
  61:../../freeRtos/Lib/enc28j60.c **** 
  62:../../freeRtos/Lib/enc28j60.c **** /**
  63:../../freeRtos/Lib/enc28j60.c ****  * Writes Enc28j60 phy register
  64:../../freeRtos/Lib/enc28j60.c ****  * @param address - register address. Banks are changed automatically
  65:../../freeRtos/Lib/enc28j60.c ****  * @param data    - phy register value to be writen
  66:../../freeRtos/Lib/enc28j60.c ****  */
  67:../../freeRtos/Lib/enc28j60.c **** static void     enc28j60PhyWrite(uint8_t address, uint16_t data);
  68:../../freeRtos/Lib/enc28j60.c **** 
  69:../../freeRtos/Lib/enc28j60.c **** 
  70:../../freeRtos/Lib/enc28j60.c **** //void     enc28j60BufferSend(uint16_t len, roundBuffer* buffer);
  71:../../freeRtos/Lib/enc28j60.c **** 
  72:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60hasRxPkt(void);
  73:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60getrev(void);
  74:../../freeRtos/Lib/enc28j60.c **** uint8_t  enc28j60linkup(void);
  75:../../freeRtos/Lib/enc28j60.c **** 
  76:../../freeRtos/Lib/enc28j60.c **** void nicMacInit(void)
  77:../../freeRtos/Lib/enc28j60.c **** { 
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  79:../../freeRtos/Lib/enc28j60.c ****     enc28j60Init        (nicState.mac.addr);
  80:../../freeRtos/Lib/enc28j60.c **** //  enc28j60clkout      (2);     // change clkout from 6.25MHz to 12.5MHz
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
  84:../../freeRtos/Lib/enc28j60.c **** }
  85:../../freeRtos/Lib/enc28j60.c **** 
  86:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
  87:../../freeRtos/Lib/enc28j60.c **** {
  88:../../freeRtos/Lib/enc28j60.c ****   uint8_t result;
  89:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
  91:../../freeRtos/Lib/enc28j60.c ****   
  92:../../freeRtos/Lib/enc28j60.c ****   // issue read command
  93:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
  94:../../freeRtos/Lib/enc28j60.c **** 
  95:../../freeRtos/Lib/enc28j60.c ****   // read data
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSendENC(0x00);
  97:../../freeRtos/Lib/enc28j60.c **** 
  98:../../freeRtos/Lib/enc28j60.c ****   // do dummy read if needed (for mac and mii, see datasheet page 29)
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 100:../../freeRtos/Lib/enc28j60.c ****   {
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSendENC(0x00);
 102:../../freeRtos/Lib/enc28j60.c ****   }
 103:../../freeRtos/Lib/enc28j60.c **** 
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 105:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 106:../../freeRtos/Lib/enc28j60.c ****   return result; 
 107:../../freeRtos/Lib/enc28j60.c **** }
 108:../../freeRtos/Lib/enc28j60.c **** 
 109:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
 110:../../freeRtos/Lib/enc28j60.c **** {
 111:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 113:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 114:../../freeRtos/Lib/enc28j60.c ****   //spiSend(op | (address & ADDR_MASK));
 115:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
 116:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(data);
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 118:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 119:../../freeRtos/Lib/enc28j60.c **** }
 120:../../freeRtos/Lib/enc28j60.c **** 
 121:../../freeRtos/Lib/enc28j60.c **** void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
 122:../../freeRtos/Lib/enc28j60.c **** {
 123:../../freeRtos/Lib/enc28j60.c ****  // spiTake();
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 125:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(ENC28J60_READ_BUF_MEM);
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 127:../../freeRtos/Lib/enc28j60.c ****   {
 128:../../freeRtos/Lib/enc28j60.c ****     len--;
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSendENC(0x00);
 130:../../freeRtos/Lib/enc28j60.c ****     data++;
 131:../../freeRtos/Lib/enc28j60.c ****   }
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 134:../../freeRtos/Lib/enc28j60.c ****  // spiGive();
 135:../../freeRtos/Lib/enc28j60.c **** }
 136:../../freeRtos/Lib/enc28j60.c **** 
 137:../../freeRtos/Lib/enc28j60.c **** void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
 138:../../freeRtos/Lib/enc28j60.c **** {
 139:../../freeRtos/Lib/enc28j60.c ****   //spiTake();
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 141:../../freeRtos/Lib/enc28j60.c ****   // issue write command
 142:../../freeRtos/Lib/enc28j60.c ****   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 143:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(ENC28J60_WRITE_BUF_MEM);
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 145:../../freeRtos/Lib/enc28j60.c ****   {
 146:../../freeRtos/Lib/enc28j60.c ****     len--;
 147:../../freeRtos/Lib/enc28j60.c ****     spiSendENC(*data);       // write data
 148:../../freeRtos/Lib/enc28j60.c ****     data++;
 149:../../freeRtos/Lib/enc28j60.c ****   }
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 151:../../freeRtos/Lib/enc28j60.c ****   //spiGive();
 152:../../freeRtos/Lib/enc28j60.c **** }
 153:../../freeRtos/Lib/enc28j60.c **** 
 154:../../freeRtos/Lib/enc28j60.c **** // void enc28j60WriteRoundBuffer(uint8_t len, roundBuffer *buffer)
 155:../../freeRtos/Lib/enc28j60.c **** // {
 156:../../freeRtos/Lib/enc28j60.c **** //   spiTake();
 157:../../freeRtos/Lib/enc28j60.c **** //   spiEnableEnc28j60();
 158:../../freeRtos/Lib/enc28j60.c **** //   // issue write command
 159:../../freeRtos/Lib/enc28j60.c **** //   //spiSend(ENC28J60_WRITE_BUF_MEM);      // 
 160:../../freeRtos/Lib/enc28j60.c **** //   spiSend(ENC28J60_WRITE_BUF_MEM);
 161:../../freeRtos/Lib/enc28j60.c **** //   uint8_t data;
 162:../../freeRtos/Lib/enc28j60.c **** //   while(len)
 163:../../freeRtos/Lib/enc28j60.c **** //   {
 164:../../freeRtos/Lib/enc28j60.c **** //     len--;
 165:../../freeRtos/Lib/enc28j60.c **** //     data = *buffer->readIdx.ptr16;   
 166:../../freeRtos/Lib/enc28j60.c **** //     buffer->readIdx.ptr.L++;
 167:../../freeRtos/Lib/enc28j60.c **** //     
 168:../../freeRtos/Lib/enc28j60.c **** //     spiSend(*data);       // write data
 169:../../freeRtos/Lib/enc28j60.c **** //   }
 170:../../freeRtos/Lib/enc28j60.c **** //   spiDisableEnc28j60();  
 171:../../freeRtos/Lib/enc28j60.c **** //   spiGive();
 172:../../freeRtos/Lib/enc28j60.c **** // }
 173:../../freeRtos/Lib/enc28j60.c **** 
 174:../../freeRtos/Lib/enc28j60.c **** 
 175:../../freeRtos/Lib/enc28j60.c **** void enc28j60SetBank(uint8_t address)
 176:../../freeRtos/Lib/enc28j60.c **** {
 177:../../freeRtos/Lib/enc28j60.c ****   // set the bank (if needed)
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 179:../../freeRtos/Lib/enc28j60.c ****   {
 180:../../freeRtos/Lib/enc28j60.c ****     // set the bank
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 184:../../freeRtos/Lib/enc28j60.c ****   }
 185:../../freeRtos/Lib/enc28j60.c **** }
 186:../../freeRtos/Lib/enc28j60.c **** 
 187:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60Read(uint8_t address)
 188:../../freeRtos/Lib/enc28j60.c **** {
 189:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 191:../../freeRtos/Lib/enc28j60.c ****   // do the read
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 193:../../freeRtos/Lib/enc28j60.c ****   return result;
 194:../../freeRtos/Lib/enc28j60.c **** }
 195:../../freeRtos/Lib/enc28j60.c **** 
 196:../../freeRtos/Lib/enc28j60.c **** // read upper 8 bits
 197:../../freeRtos/Lib/enc28j60.c **** uint16_t enc28j60PhyReadH(uint8_t address)
 198:../../freeRtos/Lib/enc28j60.c **** {
 199:../../freeRtos/Lib/enc28j60.c ****   // Set the right address and start the register read operation
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 202:../../freeRtos/Lib/enc28j60.c ****   
 203:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(0);
 204:../../freeRtos/Lib/enc28j60.c **** 
 205:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY read completes
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 208:../../freeRtos/Lib/enc28j60.c **** 
 209:../../freeRtos/Lib/enc28j60.c ****   // reset reading bit
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 211:../../freeRtos/Lib/enc28j60.c **** 
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 213:../../freeRtos/Lib/enc28j60.c **** }
 214:../../freeRtos/Lib/enc28j60.c **** 
 215:../../freeRtos/Lib/enc28j60.c **** void enc28j60Write(uint8_t address, uint8_t data)
 216:../../freeRtos/Lib/enc28j60.c **** {
 217:../../freeRtos/Lib/enc28j60.c ****   // set the bank
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 219:../../freeRtos/Lib/enc28j60.c ****   // do the write
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 221:../../freeRtos/Lib/enc28j60.c **** }
 222:../../freeRtos/Lib/enc28j60.c **** 
 223:../../freeRtos/Lib/enc28j60.c **** void enc28j60PhyWrite(uint8_t address, uint16_t data)
 224:../../freeRtos/Lib/enc28j60.c **** {
 225:../../freeRtos/Lib/enc28j60.c ****   // set the PHY register address
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 227:../../freeRtos/Lib/enc28j60.c ****   // write the PHY data
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 230:../../freeRtos/Lib/enc28j60.c ****   // wait until the PHY write completes
 231:../../freeRtos/Lib/enc28j60.c ****   
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 233:../../freeRtos/Lib/enc28j60.c ****   {
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 235:../../freeRtos/Lib/enc28j60.c ****   }
 236:../../freeRtos/Lib/enc28j60.c **** }
 237:../../freeRtos/Lib/enc28j60.c **** 
 238:../../freeRtos/Lib/enc28j60.c **** void enc28j60Init(uint8_t* macaddr)
 239:../../freeRtos/Lib/enc28j60.c **** {
 240:../../freeRtos/Lib/enc28j60.c ****   // perform system reset
 241:../../freeRtos/Lib/enc28j60.c ****   
 242:../../freeRtos/Lib/enc28j60.c ****   //ENC28j60 reset is on PE2 TODO add in hardware.c macros for that.
 243:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_ON;   // PORTE &= ~0x04;
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 245:../../freeRtos/Lib/enc28j60.c ****   ENC_RST_OFF;  //PORTE |= 0x04; 
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 247:../../freeRtos/Lib/enc28j60.c **** 
 248:../../freeRtos/Lib/enc28j60.c ****   // check CLKRDY bit to see if reset is complete
 249:../../freeRtos/Lib/enc28j60.c ****   // The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
 250:../../freeRtos/Lib/enc28j60.c ****   //while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
 251:../../freeRtos/Lib/enc28j60.c ****   // do bank 0 stuff
 252:../../freeRtos/Lib/enc28j60.c ****   // initialize receive buffer
 253:../../freeRtos/Lib/enc28j60.c ****   // 16-bit transfers, must write low byte first
 254:../../freeRtos/Lib/enc28j60.c ****   // set receive buffer start address
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 256:../../freeRtos/Lib/enc28j60.c ****   // Rx start
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 259:../../freeRtos/Lib/enc28j60.c ****   // set receive pointer address
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 262:../../freeRtos/Lib/enc28j60.c ****   // RX end
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 265:../../freeRtos/Lib/enc28j60.c ****   // TX start
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 268:../../freeRtos/Lib/enc28j60.c ****   // TX end
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 271:../../freeRtos/Lib/enc28j60.c **** 
 272:../../freeRtos/Lib/enc28j60.c ****   // do bank 1 stuff, packet filter:
 273:../../freeRtos/Lib/enc28j60.c ****   // For broadcast packets we allow only ARP packtets
 274:../../freeRtos/Lib/enc28j60.c ****   // All other packets should be unicast only for our mac (MAADR)
 275:../../freeRtos/Lib/enc28j60.c ****   //
 276:../../freeRtos/Lib/enc28j60.c ****   // The pattern to match on is therefore
 277:../../freeRtos/Lib/enc28j60.c ****   // Type     ETH.DST
 278:../../freeRtos/Lib/enc28j60.c ****   // ARP      BROADCAST
 279:../../freeRtos/Lib/enc28j60.c ****   // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
 280:../../freeRtos/Lib/enc28j60.c ****   // in binary these poitions are:11 0000 0011 1111
 281:../../freeRtos/Lib/enc28j60.c ****   // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 282:../../freeRtos/Lib/enc28j60.c ****   //enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);  //Bez wejsca dla broadcastu (
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 288:../../freeRtos/Lib/enc28j60.c ****   //
 289:../../freeRtos/Lib/enc28j60.c ****   //
 290:../../freeRtos/Lib/enc28j60.c ****   // do bank 2 stuff
 291:../../freeRtos/Lib/enc28j60.c ****   // enable MAC receive
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 293:../../freeRtos/Lib/enc28j60.c ****   // bring MAC out of reset
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 295:../../freeRtos/Lib/enc28j60.c ****   // enable automatic padding to 60bytes and CRC operations
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 297:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (non-back-to-back)
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 300:../../freeRtos/Lib/enc28j60.c ****   // set inter-frame gap (back-to-back)
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 302:../../freeRtos/Lib/enc28j60.c ****   // Set the maximum packet size which the controller will accept
 303:../../freeRtos/Lib/enc28j60.c ****   // Do not send packets longer than MAX_FRAMELEN:
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 306:../../freeRtos/Lib/enc28j60.c ****   
 307:../../freeRtos/Lib/enc28j60.c ****   // do bank 3 stuff
 308:../../freeRtos/Lib/enc28j60.c ****   // write MAC address
 309:../../freeRtos/Lib/enc28j60.c **** 
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 311:../../freeRtos/Lib/enc28j60.c ****   
 312:../../freeRtos/Lib/enc28j60.c ****   // no loopback of transmitted frames
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 314:../../freeRtos/Lib/enc28j60.c ****   
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 316:../../freeRtos/Lib/enc28j60.c ****   // enable interrutps
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 318:../../freeRtos/Lib/enc28j60.c ****   // enable packet reception
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 320:../../freeRtos/Lib/enc28j60.c **** }
 321:../../freeRtos/Lib/enc28j60.c **** 
 322:../../freeRtos/Lib/enc28j60.c **** // read the revision of the chip:
 323:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60getrev(void)
 324:../../freeRtos/Lib/enc28j60.c **** {
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 326:../../freeRtos/Lib/enc28j60.c **** }
 327:../../freeRtos/Lib/enc28j60.c **** 
 328:../../freeRtos/Lib/enc28j60.c **** // link status
 329:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60linkup(void)
 330:../../freeRtos/Lib/enc28j60.c **** {
 331:../../freeRtos/Lib/enc28j60.c ****   // bit 10 (= bit 3 in upper reg)
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 333:../../freeRtos/Lib/enc28j60.c **** }
 334:../../freeRtos/Lib/enc28j60.c **** 
 335:../../freeRtos/Lib/enc28j60.c **** void nicSend(uint16_t len)
 336:../../freeRtos/Lib/enc28j60.c **** {
 337:../../freeRtos/Lib/enc28j60.c ****   // Check no transmit in progress
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 339:../../freeRtos/Lib/enc28j60.c ****   {
 340:../../freeRtos/Lib/enc28j60.c ****     // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 342:../../freeRtos/Lib/enc28j60.c ****     {
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 345:../../freeRtos/Lib/enc28j60.c ****     }
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 347:../../freeRtos/Lib/enc28j60.c ****   }
 348:../../freeRtos/Lib/enc28j60.c ****   // Set the write pointer to start of transmit buffer area
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 351:../../freeRtos/Lib/enc28j60.c ****   // Set the TXND pointer to correspond to the packet size given
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 354:../../freeRtos/Lib/enc28j60.c ****   // write per-packet control byte (0x00 means use macon3 settings)
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 356:../../freeRtos/Lib/enc28j60.c ****   // copy the packet into the transmit buffer
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 358:../../freeRtos/Lib/enc28j60.c ****   // send the contents of the transmit buffer onto the network
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 360:../../freeRtos/Lib/enc28j60.c **** }
 361:../../freeRtos/Lib/enc28j60.c **** 
 362:../../freeRtos/Lib/enc28j60.c **** // just probe if there might be a packet
 363:../../freeRtos/Lib/enc28j60.c **** uint8_t enc28j60hasRxPkt(void)
 364:../../freeRtos/Lib/enc28j60.c **** {
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 366:../../freeRtos/Lib/enc28j60.c ****   {
 367:../../freeRtos/Lib/enc28j60.c ****     return(0);
 368:../../freeRtos/Lib/enc28j60.c ****   }
 369:../../freeRtos/Lib/enc28j60.c ****   return(1);
 370:../../freeRtos/Lib/enc28j60.c **** }
 371:../../freeRtos/Lib/enc28j60.c **** 
 372:../../freeRtos/Lib/enc28j60.c **** uint16_t nicPoll(void)
 373:../../freeRtos/Lib/enc28j60.c **** {
 374:../../freeRtos/Lib/enc28j60.c ****   uint16_t rxstat;
 375:../../freeRtos/Lib/enc28j60.c ****   uint16_t len;
 376:../../freeRtos/Lib/enc28j60.c ****   // check if a packet has been received and buffered
 377:../../freeRtos/Lib/enc28j60.c ****   //if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
 378:../../freeRtos/Lib/enc28j60.c ****   // The above does not work. See Rev. B4 Silicon Errata point 6.
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 380:../../freeRtos/Lib/enc28j60.c ****   {
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 382:../../freeRtos/Lib/enc28j60.c ****   }
 383:../../freeRtos/Lib/enc28j60.c **** 
 384:../../freeRtos/Lib/enc28j60.c ****   // Set the read pointer to the start of the received packet
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 387:../../freeRtos/Lib/enc28j60.c ****   // read the next packet pointer
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 390:../../freeRtos/Lib/enc28j60.c ****   // read the packet length (see datasheet page 43)
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 393:../../freeRtos/Lib/enc28j60.c ****   len-=4; //remove the CRC count
 394:../../freeRtos/Lib/enc28j60.c ****   // read the receive status (see datasheet page 43)
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 397:../../freeRtos/Lib/enc28j60.c ****   // limit retrieve length
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 399:../../freeRtos/Lib/enc28j60.c ****   {
 400:../../freeRtos/Lib/enc28j60.c ****     len= nicState.bufferSize-1;
 401:../../freeRtos/Lib/enc28j60.c ****   }
 402:../../freeRtos/Lib/enc28j60.c ****   // check CRC and symbol errors (see datasheet page 44, table 7-3):
 403:../../freeRtos/Lib/enc28j60.c ****   // The ERXFCON.CRCEN is set by default. Normally we should not
 404:../../freeRtos/Lib/enc28j60.c ****   // need to check this.
 405:../../freeRtos/Lib/enc28j60.c **** 
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 407:../../freeRtos/Lib/enc28j60.c ****   {
 408:../../freeRtos/Lib/enc28j60.c ****     // invalid
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 410:../../freeRtos/Lib/enc28j60.c ****   }
 411:../../freeRtos/Lib/enc28j60.c ****   else
 412:../../freeRtos/Lib/enc28j60.c ****   {
 413:../../freeRtos/Lib/enc28j60.c ****     // copy the packet from the receive buffer
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 415:../../freeRtos/Lib/enc28j60.c ****   }
 416:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 417:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 420:../../freeRtos/Lib/enc28j60.c ****   // Move the RX read pointer to the start of the next received packet
 421:../../freeRtos/Lib/enc28j60.c ****   // This frees the memory we just read out.
 422:../../freeRtos/Lib/enc28j60.c ****   // However, compensate for the errata point 13, rev B4: enver write an even address!
 423:../../freeRtos/Lib/enc28j60.c ****   //FIXME remove this warning
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 425:../../freeRtos/Lib/enc28j60.c ****   {
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 428:../../freeRtos/Lib/enc28j60.c ****   }
 429:../../freeRtos/Lib/enc28j60.c ****   else
 430:../../freeRtos/Lib/enc28j60.c ****   {
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 433:../../freeRtos/Lib/enc28j60.c ****   }
 434:../../freeRtos/Lib/enc28j60.c ****   // decrement the packet counter indicate we are done with this packet
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 437:../../freeRtos/Lib/enc28j60.c **** }
 438:../../freeRtos/Lib/enc28j60.c **** 
 439:../../freeRtos/Lib/enc28j60.c **** void spiEnableEnc28j60(void)  {};
 562               	.LM0:
 563               	.LFBB1:
 564               	/* prologue: function */
 565               	/* frame size = 0 */
 566               	/* stack size = 0 */
 567               	.L__stack_usage = 0
 568               	/* epilogue start */
 570               	.LM1:
 571 0000 0895      		ret
 573               	.Lscope1:
 575               		.stabd	78,0,0
 577               		.weak	spiDisableEnc28j60
 579               	spiDisableEnc28j60:
 580               		.stabd	46,0,0
 440:../../freeRtos/Lib/enc28j60.c **** void spiDisableEnc28j60(void) {};
 582               	.LM2:
 583               	.LFBB2:
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 0 */
 587               	.L__stack_usage = 0
 588               	/* epilogue start */
 590               	.LM3:
 591 0002 0895      		ret
 593               	.Lscope2:
 595               		.stabd	78,0,0
 601               	enc28j60WriteOp:
 602               		.stabd	46,0,0
 110:../../freeRtos/Lib/enc28j60.c **** {
 604               	.LM4:
 605               	.LFBB3:
 606 0004 DF93      		push r29
 607 0006 CF93      		push r28
 608 0008 00D0      		rcall .
 609 000a CDB7      		in r28,__SP_L__
 610 000c DEB7      		in r29,__SP_H__
 611               	/* prologue: function */
 612               	/* frame size = 3 */
 613               	/* stack size = 5 */
 614               	.L__stack_usage = 5
 112:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 616               	.LM5:
 617 000e 4B83      		std Y+3,r20
 618 0010 6A83      		std Y+2,r22
 619 0012 8983      		std Y+1,r24
 620 0014 0E94 0000 		call spiEnableEnc28j60
 115:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
 622               	.LM6:
 623 0018 6A81      		ldd r22,Y+2
 624 001a 70E0      		ldi r23,lo8(0)
 625 001c 6F71      		andi r22,lo8(31)
 626 001e 7070      		andi r23,hi8(31)
 627 0020 8981      		ldd r24,Y+1
 628 0022 282F      		mov r18,r24
 629 0024 30E0      		ldi r19,lo8(0)
 630 0026 CB01      		movw r24,r22
 631 0028 822B      		or r24,r18
 632 002a 932B      		or r25,r19
 633 002c 0E94 0000 		call spiSendENC
 116:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(data);
 635               	.LM7:
 636 0030 4B81      		ldd r20,Y+3
 637 0032 842F      		mov r24,r20
 638 0034 90E0      		ldi r25,lo8(0)
 639 0036 0E94 0000 		call spiSendENC
 117:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 641               	.LM8:
 642 003a 0E94 0000 		call spiDisableEnc28j60
 643               	/* epilogue start */
 119:../../freeRtos/Lib/enc28j60.c **** }
 645               	.LM9:
 646 003e 2396      		adiw r28,3
 647 0040 CDBF      		out __SP_L__,r28
 648 0042 DEBF      		out __SP_H__,r29
 649 0044 CF91      		pop r28
 650 0046 DF91      		pop r29
 651 0048 0895      		ret
 653               	.Lscope3:
 655               		.stabd	78,0,0
 659               	enc28j60SetBank:
 660               		.stabd	46,0,0
 176:../../freeRtos/Lib/enc28j60.c **** {
 662               	.LM10:
 663               	.LFBB4:
 664 004a 1F93      		push r17
 665 004c CF93      		push r28
 666 004e DF93      		push r29
 667               	/* prologue: function */
 668               	/* frame size = 0 */
 669               	/* stack size = 3 */
 670               	.L__stack_usage = 3
 671 0050 182F      		mov r17,r24
 178:../../freeRtos/Lib/enc28j60.c ****   if((address & BANK_MASK) != Enc28j60Bank)
 673               	.LM11:
 674 0052 C82F      		mov r28,r24
 675 0054 D0E0      		ldi r29,lo8(0)
 676 0056 C076      		andi r28,lo8(96)
 677 0058 D070      		andi r29,hi8(96)
 678 005a 2091 0000 		lds r18,Enc28j60Bank
 679 005e 30E0      		ldi r19,lo8(0)
 680 0060 C217      		cp r28,r18
 681 0062 D307      		cpc r29,r19
 682 0064 01F0      		breq .L4
 181:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 684               	.LM12:
 685 0066 80EA      		ldi r24,lo8(-96)
 686 0068 6FE1      		ldi r22,lo8(31)
 687 006a 43E0      		ldi r20,lo8(3)
 688 006c 0E94 0000 		call enc28j60WriteOp
 182:../../freeRtos/Lib/enc28j60.c ****     enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 690               	.LM13:
 691 0070 AE01      		movw r20,r28
 692 0072 85E0      		ldi r24,5
 693 0074 5595      	1:	asr r21
 694 0076 4795      		ror r20
 695 0078 8A95      		dec r24
 696 007a 01F4      		brne 1b
 697 007c 80E8      		ldi r24,lo8(-128)
 698 007e 6FE1      		ldi r22,lo8(31)
 699 0080 0E94 0000 		call enc28j60WriteOp
 183:../../freeRtos/Lib/enc28j60.c ****     Enc28j60Bank = (address & BANK_MASK);
 701               	.LM14:
 702 0084 1076      		andi r17,lo8(96)
 703 0086 1093 0000 		sts Enc28j60Bank,r17
 704               	.L4:
 705               	/* epilogue start */
 185:../../freeRtos/Lib/enc28j60.c **** }
 707               	.LM15:
 708 008a DF91      		pop r29
 709 008c CF91      		pop r28
 710 008e 1F91      		pop r17
 711 0090 0895      		ret
 713               	.Lscope4:
 715               		.stabd	78,0,0
 720               	enc28j60Write:
 721               		.stabd	46,0,0
 216:../../freeRtos/Lib/enc28j60.c **** {
 723               	.LM16:
 724               	.LFBB5:
 725 0092 1F93      		push r17
 726 0094 DF93      		push r29
 727 0096 CF93      		push r28
 728 0098 0F92      		push __tmp_reg__
 729 009a CDB7      		in r28,__SP_L__
 730 009c DEB7      		in r29,__SP_H__
 731               	/* prologue: function */
 732               	/* frame size = 1 */
 733               	/* stack size = 4 */
 734               	.L__stack_usage = 4
 735 009e 182F      		mov r17,r24
 218:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 737               	.LM17:
 738 00a0 6983      		std Y+1,r22
 739 00a2 0E94 0000 		call enc28j60SetBank
 220:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 741               	.LM18:
 742 00a6 80E4      		ldi r24,lo8(64)
 743 00a8 612F      		mov r22,r17
 744 00aa 4981      		ldd r20,Y+1
 745 00ac 0E94 0000 		call enc28j60WriteOp
 746               	/* epilogue start */
 221:../../freeRtos/Lib/enc28j60.c **** }
 748               	.LM19:
 749 00b0 0F90      		pop __tmp_reg__
 750 00b2 CF91      		pop r28
 751 00b4 DF91      		pop r29
 752 00b6 1F91      		pop r17
 753 00b8 0895      		ret
 755               	.Lscope5:
 757               		.stabd	78,0,0
 762               	enc28j60ReadOp:
 763               		.stabd	46,0,0
  87:../../freeRtos/Lib/enc28j60.c **** {
 765               	.LM20:
 766               	.LFBB6:
 767 00ba 1F93      		push r17
 768 00bc DF93      		push r29
 769 00be CF93      		push r28
 770 00c0 0F92      		push __tmp_reg__
 771 00c2 CDB7      		in r28,__SP_L__
 772 00c4 DEB7      		in r29,__SP_H__
 773               	/* prologue: function */
 774               	/* frame size = 1 */
 775               	/* stack size = 4 */
 776               	.L__stack_usage = 4
 777 00c6 162F      		mov r17,r22
  90:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 779               	.LM21:
 780 00c8 8983      		std Y+1,r24
 781 00ca 0E94 0000 		call spiEnableEnc28j60
  93:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(op | (address & ADDR_MASK));
 783               	.LM22:
 784 00ce 212F      		mov r18,r17
 785 00d0 30E0      		ldi r19,lo8(0)
 786 00d2 2F71      		andi r18,lo8(31)
 787 00d4 3070      		andi r19,hi8(31)
 788 00d6 8981      		ldd r24,Y+1
 789 00d8 90E0      		ldi r25,lo8(0)
 790 00da 822B      		or r24,r18
 791 00dc 932B      		or r25,r19
 792 00de 0E94 0000 		call spiSendENC
  96:../../freeRtos/Lib/enc28j60.c ****   result = spiSendENC(0x00);
 794               	.LM23:
 795 00e2 80E0      		ldi r24,lo8(0)
 796 00e4 90E0      		ldi r25,hi8(0)
 797 00e6 0E94 0000 		call spiSendENC
  99:../../freeRtos/Lib/enc28j60.c ****   if(address & 0x80)
 799               	.LM24:
 800 00ea 17FF      		sbrs r17,7
 801 00ec 00C0      		rjmp .L9
 101:../../freeRtos/Lib/enc28j60.c ****     result = spiSendENC(0x00);
 803               	.LM25:
 804 00ee 80E0      		ldi r24,lo8(0)
 805 00f0 90E0      		ldi r25,hi8(0)
 806 00f2 0E94 0000 		call spiSendENC
 807               	.L9:
 104:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 809               	.LM26:
 810 00f6 8983      		std Y+1,r24
 811 00f8 0E94 0000 		call spiDisableEnc28j60
 107:../../freeRtos/Lib/enc28j60.c **** }
 813               	.LM27:
 814 00fc 8981      		ldd r24,Y+1
 815               	/* epilogue start */
 816 00fe 0F90      		pop __tmp_reg__
 817 0100 CF91      		pop r28
 818 0102 DF91      		pop r29
 819 0104 1F91      		pop r17
 820 0106 0895      		ret
 825               	.Lscope6:
 827               		.stabd	78,0,0
 831               	enc28j60Read:
 832               		.stabd	46,0,0
 188:../../freeRtos/Lib/enc28j60.c **** {
 834               	.LM28:
 835               	.LFBB7:
 836 0108 DF93      		push r29
 837 010a CF93      		push r28
 838 010c 0F92      		push __tmp_reg__
 839 010e CDB7      		in r28,__SP_L__
 840 0110 DEB7      		in r29,__SP_H__
 841               	/* prologue: function */
 842               	/* frame size = 1 */
 843               	/* stack size = 3 */
 844               	.L__stack_usage = 3
 845 0112 682F      		mov r22,r24
 190:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(address);
 847               	.LM29:
 848 0114 6983      		std Y+1,r22
 849 0116 0E94 0000 		call enc28j60SetBank
 192:../../freeRtos/Lib/enc28j60.c ****   uint8_t result = enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 851               	.LM30:
 852 011a 80E0      		ldi r24,lo8(0)
 853 011c 6981      		ldd r22,Y+1
 854 011e 0E94 0000 		call enc28j60ReadOp
 855               	/* epilogue start */
 194:../../freeRtos/Lib/enc28j60.c **** }
 857               	.LM31:
 858 0122 0F90      		pop __tmp_reg__
 859 0124 CF91      		pop r28
 860 0126 DF91      		pop r29
 861 0128 0895      		ret
 863               	.Lscope7:
 865               		.stabd	78,0,0
 867               	.global	enc28j60hasRxPkt
 869               	enc28j60hasRxPkt:
 870               		.stabd	46,0,0
 364:../../freeRtos/Lib/enc28j60.c **** {
 872               	.LM32:
 873               	.LFBB8:
 874               	/* prologue: function */
 875               	/* frame size = 0 */
 876               	/* stack size = 0 */
 877               	.L__stack_usage = 0
 365:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) ==0 )
 879               	.LM33:
 880 012a 89E3      		ldi r24,lo8(57)
 881 012c 0E94 0000 		call enc28j60Read
 367:../../freeRtos/Lib/enc28j60.c ****     return(0);
 883               	.LM34:
 884 0130 91E0      		ldi r25,lo8(1)
 885 0132 8823      		tst r24
 886 0134 01F4      		brne .L12
 887 0136 90E0      		ldi r25,lo8(0)
 888               	.L12:
 370:../../freeRtos/Lib/enc28j60.c **** }
 890               	.LM35:
 891 0138 892F      		mov r24,r25
 892               	/* epilogue start */
 893 013a 0895      		ret
 895               	.Lscope8:
 897               		.stabd	78,0,0
 899               	.global	enc28j60linkup
 901               	enc28j60linkup:
 902               		.stabd	46,0,0
 330:../../freeRtos/Lib/enc28j60.c **** {
 904               	.LM36:
 905               	.LFBB9:
 906               	/* prologue: function */
 907               	/* frame size = 0 */
 908               	/* stack size = 0 */
 909               	.L__stack_usage = 0
 910               	.LBB8:
 911               	.LBB9:
 200:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 913               	.LM37:
 914 013c 84ED      		ldi r24,lo8(-44)
 915 013e 61E1      		ldi r22,lo8(17)
 916 0140 0E94 0000 		call enc28j60Write
 201:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, MICMD_MIIRD);
 918               	.LM38:
 919 0144 82ED      		ldi r24,lo8(-46)
 920 0146 61E0      		ldi r22,lo8(1)
 921 0148 0E94 0000 		call enc28j60Write
 922               	.L15:
 207:../../freeRtos/Lib/enc28j60.c ****    vTaskDelay ( 0 ); //FIXME być może tutaj następuje zawieszenie
 924               	.LM39:
 925 014c 80E0      		ldi r24,lo8(0)
 926 014e 90E0      		ldi r25,hi8(0)
 927 0150 0E94 0000 		call vTaskDelay
 206:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 929               	.LM40:
 930 0154 8AEE      		ldi r24,lo8(-22)
 931 0156 0E94 0000 		call enc28j60Read
 932 015a 80FD      		sbrc r24,0
 933 015c 00C0      		rjmp .L15
 210:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MICMD, 0x00);
 935               	.LM41:
 936 015e 82ED      		ldi r24,lo8(-46)
 937 0160 60E0      		ldi r22,lo8(0)
 938 0162 0E94 0000 		call enc28j60Write
 212:../../freeRtos/Lib/enc28j60.c ****   return (enc28j60Read(MIRDH));
 940               	.LM42:
 941 0166 89ED      		ldi r24,lo8(-39)
 942 0168 0E94 0000 		call enc28j60Read
 943               	.LBE9:
 944               	.LBE8:
 332:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60PhyReadH(PHSTAT2) && 4);
 946               	.LM43:
 947 016c 91E0      		ldi r25,lo8(1)
 948 016e 8823      		tst r24
 949 0170 01F4      		brne .L16
 950 0172 90E0      		ldi r25,lo8(0)
 951               	.L16:
 333:../../freeRtos/Lib/enc28j60.c **** }
 953               	.LM44:
 954 0174 892F      		mov r24,r25
 955               	/* epilogue start */
 956 0176 0895      		ret
 958               	.Lscope9:
 960               		.stabd	78,0,0
 962               	.global	enc28j60getrev
 964               	enc28j60getrev:
 965               		.stabd	46,0,0
 324:../../freeRtos/Lib/enc28j60.c **** {
 967               	.LM45:
 968               	.LFBB10:
 969               	/* prologue: function */
 970               	/* frame size = 0 */
 971               	/* stack size = 0 */
 972               	.L__stack_usage = 0
 325:../../freeRtos/Lib/enc28j60.c ****   return(enc28j60Read(EREVID));
 974               	.LM46:
 975 0178 82E7      		ldi r24,lo8(114)
 976 017a 0E94 0000 		call enc28j60Read
 977               	/* epilogue start */
 326:../../freeRtos/Lib/enc28j60.c **** }
 979               	.LM47:
 980 017e 0895      		ret
 982               	.Lscope10:
 984               		.stabd	78,0,0
 988               	enc28j60PhyWrite:
 989               		.stabd	46,0,0
 224:../../freeRtos/Lib/enc28j60.c **** {
 991               	.LM48:
 992               	.LFBB11:
 993 0180 1F93      		push r17
 994 0182 DF93      		push r29
 995 0184 CF93      		push r28
 996 0186 0F92      		push __tmp_reg__
 997 0188 CDB7      		in r28,__SP_L__
 998 018a DEB7      		in r29,__SP_H__
 999               	/* prologue: function */
 1000               	/* frame size = 1 */
 1001               	/* stack size = 4 */
 1002               	.L__stack_usage = 4
 1003 018c 982F      		mov r25,r24
 1004 018e 162F      		mov r17,r22
 226:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIREGADR, address);
 1006               	.LM49:
 1007 0190 84ED      		ldi r24,lo8(-44)
 1008 0192 692F      		mov r22,r25
 1009 0194 7983      		std Y+1,r23
 1010 0196 0E94 0000 		call enc28j60Write
 228:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRL, data);
 1012               	.LM50:
 1013 019a 86ED      		ldi r24,lo8(-42)
 1014 019c 612F      		mov r22,r17
 1015 019e 0E94 0000 		call enc28j60Write
 229:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MIWRH, data>>8);
 1017               	.LM51:
 1018 01a2 87ED      		ldi r24,lo8(-41)
 1019 01a4 7981      		ldd r23,Y+1
 1020 01a6 672F      		mov r22,r23
 1021 01a8 0E94 0000 		call enc28j60Write
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1023               	.LM52:
 1024 01ac 00C0      		rjmp .L19
 1025               	.L20:
 234:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 );         //FIXME być może tutaj następuje zakleszczenie
 1027               	.LM53:
 1028 01ae 80E0      		ldi r24,lo8(0)
 1029 01b0 90E0      		ldi r25,hi8(0)
 1030 01b2 0E94 0000 		call vTaskDelay
 1031               	.L19:
 232:../../freeRtos/Lib/enc28j60.c ****   while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 1033               	.LM54:
 1034 01b6 8AEE      		ldi r24,lo8(-22)
 1035 01b8 0E94 0000 		call enc28j60Read
 1036 01bc 80FD      		sbrc r24,0
 1037 01be 00C0      		rjmp .L20
 1038               	/* epilogue start */
 236:../../freeRtos/Lib/enc28j60.c **** }
 1040               	.LM55:
 1041 01c0 0F90      		pop __tmp_reg__
 1042 01c2 CF91      		pop r28
 1043 01c4 DF91      		pop r29
 1044 01c6 1F91      		pop r17
 1045 01c8 0895      		ret
 1047               	.Lscope11:
 1049               		.stabd	78,0,0
 1051               		.weak	nicPoll
 1053               	nicPoll:
 1054               		.stabd	46,0,0
 373:../../freeRtos/Lib/enc28j60.c **** {
 1056               	.LM56:
 1057               	.LFBB12:
 1058 01ca CF92      		push r12
 1059 01cc DF92      		push r13
 1060 01ce EF92      		push r14
 1061 01d0 FF92      		push r15
 1062 01d2 0F93      		push r16
 1063 01d4 1F93      		push r17
 1064 01d6 CF93      		push r28
 1065 01d8 DF93      		push r29
 1066               	/* prologue: function */
 1067               	/* frame size = 0 */
 1068               	/* stack size = 8 */
 1069               	.L__stack_usage = 8
 379:../../freeRtos/Lib/enc28j60.c ****   if( enc28j60Read(EPKTCNT) == 0 )
 1071               	.LM57:
 1072 01da 89E3      		ldi r24,lo8(57)
 1073 01dc 0E94 0000 		call enc28j60Read
 1074 01e0 8823      		tst r24
 1075 01e2 01F4      		brne .+2
 1076 01e4 00C0      		rjmp .L29
 385:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
 1078               	.LM58:
 1079 01e6 80E0      		ldi r24,lo8(0)
 1080 01e8 6091 0000 		lds r22,gNextPacketPtr
 1081 01ec 0E94 0000 		call enc28j60Write
 386:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
 1083               	.LM59:
 1084 01f0 6091 0000 		lds r22,gNextPacketPtr+1
 1085 01f4 81E0      		ldi r24,lo8(1)
 1086 01f6 0E94 0000 		call enc28j60Write
 388:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1088               	.LM60:
 1089 01fa 8AE3      		ldi r24,lo8(58)
 1090 01fc 60E0      		ldi r22,lo8(0)
 1091 01fe 0E94 0000 		call enc28j60ReadOp
 1092 0202 C82F      		mov r28,r24
 1093 0204 D0E0      		ldi r29,lo8(0)
 1094 0206 C093 0000 		sts gNextPacketPtr,r28
 1095 020a D093 0000 		sts gNextPacketPtr+1,r29
 389:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1097               	.LM61:
 1098 020e 8AE3      		ldi r24,lo8(58)
 1099 0210 60E0      		ldi r22,lo8(0)
 1100 0212 0E94 0000 		call enc28j60ReadOp
 1101 0216 382F      		mov r19,r24
 1102 0218 20E0      		ldi r18,lo8(0)
 1103 021a C22B      		or r28,r18
 1104 021c D32B      		or r29,r19
 1105 021e C093 0000 		sts gNextPacketPtr,r28
 1106 0222 D093 0000 		sts gNextPacketPtr+1,r29
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1108               	.LM62:
 1109 0226 8AE3      		ldi r24,lo8(58)
 1110 0228 60E0      		ldi r22,lo8(0)
 1111 022a 0E94 0000 		call enc28j60ReadOp
 1112 022e C82E      		mov r12,r24
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1114               	.LM63:
 1115 0230 8AE3      		ldi r24,lo8(58)
 1116 0232 60E0      		ldi r22,lo8(0)
 1117 0234 0E94 0000 		call enc28j60ReadOp
 1118 0238 E82E      		mov r14,r24
 395:../../freeRtos/Lib/enc28j60.c ****   rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1120               	.LM64:
 1121 023a 8AE3      		ldi r24,lo8(58)
 1122 023c 60E0      		ldi r22,lo8(0)
 1123 023e 0E94 0000 		call enc28j60ReadOp
 1124 0242 082F      		mov r16,r24
 1125 0244 10E0      		ldi r17,lo8(0)
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 1127               	.LM65:
 1128 0246 8AE3      		ldi r24,lo8(58)
 1129 0248 60E0      		ldi r22,lo8(0)
 1130 024a 0E94 0000 		call enc28j60ReadOp
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 1132               	.LM66:
 1133 024e 4091 0000 		lds r20,nicState
 1134 0252 5091 0000 		lds r21,nicState+1
 396:../../freeRtos/Lib/enc28j60.c ****   rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
 1136               	.LM67:
 1137 0256 382F      		mov r19,r24
 1138 0258 20E0      		ldi r18,lo8(0)
 1139 025a 022B      		or r16,r18
 1140 025c 132B      		or r17,r19
 406:../../freeRtos/Lib/enc28j60.c ****   if ((rxstat & 0x80)==0)
 1142               	.LM68:
 1143 025e 07FF      		sbrs r16,7
 1144 0260 00C0      		rjmp .L30
 391:../../freeRtos/Lib/enc28j60.c ****   len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 1146               	.LM69:
 1147 0262 CC2D      		mov r28,r12
 1148 0264 D0E0      		ldi r29,lo8(0)
 392:../../freeRtos/Lib/enc28j60.c ****   len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 1150               	.LM70:
 1151 0266 3E2D      		mov r19,r14
 1152 0268 20E0      		ldi r18,lo8(0)
 1153 026a C22B      		or r28,r18
 1154 026c D32B      		or r29,r19
 398:../../freeRtos/Lib/enc28j60.c ****   if (len> nicState.bufferSize -1)
 1156               	.LM71:
 1157 026e 4150      		subi r20,lo8(-(-1))
 1158 0270 5040      		sbci r21,hi8(-(-1))
 393:../../freeRtos/Lib/enc28j60.c ****   len-=4; //remove the CRC count
 1160               	.LM72:
 1161 0272 2497      		sbiw r28,4
 1162 0274 4C17      		cp r20,r28
 1163 0276 5D07      		cpc r21,r29
 1164 0278 00F4      		brsh .L24
 1165 027a EA01      		movw r28,r20
 1166               	.L24:
 414:../../freeRtos/Lib/enc28j60.c ****     enc28j60ReadBuffer(len, nicState.layer2.buf);
 1168               	.LM73:
 1169 027c C090 0000 		lds r12,nicState+8
 1170 0280 D090 0000 		lds r13,nicState+8+1
 1171               	.LBB10:
 1172               	.LBB11:
 124:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 1174               	.LM74:
 1175 0284 0E94 0000 		call spiEnableEnc28j60
 125:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(ENC28J60_READ_BUF_MEM);
 1177               	.LM75:
 1178 0288 8AE3      		ldi r24,lo8(58)
 1179 028a 90E0      		ldi r25,hi8(58)
 1180 028c 0E94 0000 		call spiSendENC
 1181 0290 7601      		movw r14,r12
 1182 0292 8E01      		movw r16,r28
 1183 0294 00C0      		rjmp .L25
 1184               	.L26:
 128:../../freeRtos/Lib/enc28j60.c ****     len--;
 1186               	.LM76:
 1187 0296 0150      		subi r16,lo8(-(-1))
 1188 0298 1040      		sbci r17,hi8(-(-1))
 129:../../freeRtos/Lib/enc28j60.c ****     *data = spiSendENC(0x00);
 1190               	.LM77:
 1191 029a 80E0      		ldi r24,lo8(0)
 1192 029c 90E0      		ldi r25,hi8(0)
 1193 029e 0E94 0000 		call spiSendENC
 1194 02a2 F701      		movw r30,r14
 1195 02a4 8193      		st Z+,r24
 1196 02a6 7F01      		movw r14,r30
 1197               	.L25:
 126:../../freeRtos/Lib/enc28j60.c ****   while(len)
 1199               	.LM78:
 1200 02a8 0115      		cp r16,__zero_reg__
 1201 02aa 1105      		cpc r17,__zero_reg__
 1202 02ac 01F4      		brne .L26
 132:../../freeRtos/Lib/enc28j60.c ****   *data='\0';
 1204               	.LM79:
 1205 02ae F601      		movw r30,r12
 1206 02b0 EC0F      		add r30,r28
 1207 02b2 FD1F      		adc r31,r29
 1208 02b4 1082      		st Z,__zero_reg__
 133:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();
 1210               	.LM80:
 1211 02b6 0E94 0000 		call spiDisableEnc28j60
 1212 02ba 00C0      		rjmp .L23
 1213               	.L30:
 1214               	.LBE11:
 1215               	.LBE10:
 409:../../freeRtos/Lib/enc28j60.c ****     len=0;
 1217               	.LM81:
 1218 02bc C0E0      		ldi r28,lo8(0)
 1219 02be D0E0      		ldi r29,hi8(0)
 1220               	.L23:
 418:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
 1222               	.LM82:
 1223 02c0 8CE0      		ldi r24,lo8(12)
 1224 02c2 6091 0000 		lds r22,gNextPacketPtr
 1225 02c6 0E94 0000 		call enc28j60Write
 419:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
 1227               	.LM83:
 1228 02ca 6091 0000 		lds r22,gNextPacketPtr+1
 1229 02ce 8DE0      		ldi r24,lo8(13)
 1230 02d0 0E94 0000 		call enc28j60Write
 424:../../freeRtos/Lib/enc28j60.c ****   if ((gNextPacketPtr - 1 < RXSTART_INIT) || (gNextPacketPtr -1 > RXSTOP_INIT))
 1232               	.LM84:
 1233 02d4 6091 0000 		lds r22,gNextPacketPtr
 1234 02d8 7091 0000 		lds r23,gNextPacketPtr+1
 1235 02dc CB01      		movw r24,r22
 1236 02de 0197      		sbiw r24,1
 1237 02e0 F9E1      		ldi r31,hi8(6655)
 1238 02e2 8F3F      		cpi r24,lo8(6655)
 1239 02e4 9F07      		cpc r25,r31
 1240 02e6 00F0      		brlo .L27
 426:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
 1242               	.LM85:
 1243 02e8 8CE0      		ldi r24,lo8(12)
 1244 02ea 6EEF      		ldi r22,lo8(-2)
 1245 02ec 0E94 0000 		call enc28j60Write
 427:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
 1247               	.LM86:
 1248 02f0 8DE0      		ldi r24,lo8(13)
 1249 02f2 69E1      		ldi r22,lo8(25)
 1250 02f4 00C0      		rjmp .L31
 1251               	.L27:
 431:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
 1253               	.LM87:
 1254 02f6 6150      		subi r22,lo8(-(-1))
 1255 02f8 8CE0      		ldi r24,lo8(12)
 1256 02fa 0E94 0000 		call enc28j60Write
 432:../../freeRtos/Lib/enc28j60.c ****     enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
 1258               	.LM88:
 1259 02fe 2091 0000 		lds r18,gNextPacketPtr
 1260 0302 3091 0000 		lds r19,gNextPacketPtr+1
 1261 0306 2150      		subi r18,lo8(-(-1))
 1262 0308 3040      		sbci r19,hi8(-(-1))
 1263 030a 8DE0      		ldi r24,lo8(13)
 1264 030c 632F      		mov r22,r19
 1265               	.L31:
 1266 030e 0E94 0000 		call enc28j60Write
 435:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 1268               	.LM89:
 1269 0312 80E8      		ldi r24,lo8(-128)
 1270 0314 6EE1      		ldi r22,lo8(30)
 1271 0316 40E4      		ldi r20,lo8(64)
 1272 0318 0E94 0000 		call enc28j60WriteOp
 436:../../freeRtos/Lib/enc28j60.c ****   return(len);
 1274               	.LM90:
 1275 031c 00C0      		rjmp .L22
 1276               	.L29:
 381:../../freeRtos/Lib/enc28j60.c ****     return(0);
 1278               	.LM91:
 1279 031e C0E0      		ldi r28,lo8(0)
 1280 0320 D0E0      		ldi r29,hi8(0)
 1281               	.L22:
 437:../../freeRtos/Lib/enc28j60.c **** }
 1283               	.LM92:
 1284 0322 CE01      		movw r24,r28
 1285               	/* epilogue start */
 1286 0324 DF91      		pop r29
 1287 0326 CF91      		pop r28
 1288 0328 1F91      		pop r17
 1289 032a 0F91      		pop r16
 1290 032c FF90      		pop r15
 1291 032e EF90      		pop r14
 1292 0330 DF90      		pop r13
 1293 0332 CF90      		pop r12
 1294 0334 0895      		ret
 1296               	.Lscope12:
 1298               		.stabd	78,0,0
 1301               		.weak	nicSend
 1303               	nicSend:
 1304               		.stabd	46,0,0
 336:../../freeRtos/Lib/enc28j60.c **** {
 1306               	.LM93:
 1307               	.LFBB13:
 1308 0336 0F93      		push r16
 1309 0338 1F93      		push r17
 1310 033a CF93      		push r28
 1311 033c DF93      		push r29
 1312               	/* prologue: function */
 1313               	/* frame size = 0 */
 1314               	/* stack size = 4 */
 1315               	.L__stack_usage = 4
 1316 033e EC01      		movw r28,r24
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 1318               	.LM94:
 1319 0340 00C0      		rjmp .L33
 1320               	.L35:
 341:../../freeRtos/Lib/enc28j60.c ****     if( (enc28j60Read(EIR) & EIR_TXERIF) )
 1322               	.LM95:
 1323 0342 8CE1      		ldi r24,lo8(28)
 1324 0344 0E94 0000 		call enc28j60Read
 1325 0348 81FF      		sbrs r24,1
 1326 034a 00C0      		rjmp .L34
 343:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 1328               	.LM96:
 1329 034c 80E8      		ldi r24,lo8(-128)
 1330 034e 6FE1      		ldi r22,lo8(31)
 1331 0350 40E8      		ldi r20,lo8(-128)
 1332 0352 0E94 0000 		call enc28j60WriteOp
 344:../../freeRtos/Lib/enc28j60.c ****       enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 1334               	.LM97:
 1335 0356 80EA      		ldi r24,lo8(-96)
 1336 0358 6FE1      		ldi r22,lo8(31)
 1337 035a 40E8      		ldi r20,lo8(-128)
 1338 035c 0E94 0000 		call enc28j60WriteOp
 1339               	.L34:
 346:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay ( 0 ); //FIXME być może tutaj następuje zakleszczenie
 1341               	.LM98:
 1342 0360 80E0      		ldi r24,lo8(0)
 1343 0362 90E0      		ldi r25,hi8(0)
 1344 0364 0E94 0000 		call vTaskDelay
 1345               	.L33:
 338:../../freeRtos/Lib/enc28j60.c ****   while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 1347               	.LM99:
 1348 0368 80E0      		ldi r24,lo8(0)
 1349 036a 6FE1      		ldi r22,lo8(31)
 1350 036c 0E94 0000 		call enc28j60ReadOp
 1351 0370 83FD      		sbrc r24,3
 1352 0372 00C0      		rjmp .L35
 349:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 1354               	.LM100:
 1355 0374 82E0      		ldi r24,lo8(2)
 1356 0376 6FEF      		ldi r22,lo8(-1)
 1357 0378 0E94 0000 		call enc28j60Write
 350:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 1359               	.LM101:
 1360 037c 83E0      		ldi r24,lo8(3)
 1361 037e 69E1      		ldi r22,lo8(25)
 1362 0380 0E94 0000 		call enc28j60Write
 352:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 1364               	.LM102:
 1365 0384 CE01      		movw r24,r28
 1366 0386 8150      		subi r24,lo8(-(-1))
 1367 0388 682F      		mov r22,r24
 1368 038a 86E0      		ldi r24,lo8(6)
 1369 038c 0E94 0000 		call enc28j60Write
 353:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 1371               	.LM103:
 1372 0390 9E01      		movw r18,r28
 1373 0392 2150      		subi r18,lo8(-(6655))
 1374 0394 364E      		sbci r19,hi8(-(6655))
 1375 0396 87E0      		ldi r24,lo8(7)
 1376 0398 632F      		mov r22,r19
 1377 039a 0E94 0000 		call enc28j60Write
 355:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 1379               	.LM104:
 1380 039e 8AE7      		ldi r24,lo8(122)
 1381 03a0 60E0      		ldi r22,lo8(0)
 1382 03a2 40E0      		ldi r20,lo8(0)
 1383 03a4 0E94 0000 		call enc28j60WriteOp
 357:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteBuffer(len, nicState.layer2.buf);
 1385               	.LM105:
 1386 03a8 0091 0000 		lds r16,nicState+8
 1387 03ac 1091 0000 		lds r17,nicState+8+1
 1388               	.LBB12:
 1389               	.LBB13:
 140:../../freeRtos/Lib/enc28j60.c ****   spiEnableEnc28j60();
 1391               	.LM106:
 1392 03b0 0E94 0000 		call spiEnableEnc28j60
 143:../../freeRtos/Lib/enc28j60.c ****   spiSendENC(ENC28J60_WRITE_BUF_MEM);
 1394               	.LM107:
 1395 03b4 8AE7      		ldi r24,lo8(122)
 1396 03b6 90E0      		ldi r25,hi8(122)
 1397 03b8 00C0      		rjmp .L38
 1398               	.L37:
 146:../../freeRtos/Lib/enc28j60.c ****     len--;
 1400               	.LM108:
 1401 03ba 2197      		sbiw r28,1
 147:../../freeRtos/Lib/enc28j60.c ****     spiSendENC(*data);       // write data
 1403               	.LM109:
 1404 03bc F801      		movw r30,r16
 1405 03be 8191      		ld r24,Z+
 1406 03c0 8F01      		movw r16,r30
 1407 03c2 90E0      		ldi r25,lo8(0)
 1408               	.L38:
 1409 03c4 0E94 0000 		call spiSendENC
 144:../../freeRtos/Lib/enc28j60.c ****   while(len)
 1411               	.LM110:
 1412 03c8 2097      		sbiw r28,0
 1413 03ca 01F4      		brne .L37
 150:../../freeRtos/Lib/enc28j60.c ****   spiDisableEnc28j60();  
 1415               	.LM111:
 1416 03cc 0E94 0000 		call spiDisableEnc28j60
 1417               	.LBE13:
 1418               	.LBE12:
 359:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 1420               	.LM112:
 1421 03d0 80E8      		ldi r24,lo8(-128)
 1422 03d2 6FE1      		ldi r22,lo8(31)
 1423 03d4 48E0      		ldi r20,lo8(8)
 1424 03d6 0E94 0000 		call enc28j60WriteOp
 1425               	/* epilogue start */
 360:../../freeRtos/Lib/enc28j60.c **** }
 1427               	.LM113:
 1428 03da DF91      		pop r29
 1429 03dc CF91      		pop r28
 1430 03de 1F91      		pop r17
 1431 03e0 0F91      		pop r16
 1432 03e2 0895      		ret
 1437               	.Lscope13:
 1439               		.stabd	78,0,0
 1442               		.weak	nicSetMacAddress
 1444               	nicSetMacAddress:
 1445               		.stabd	46,0,0
 441:../../freeRtos/Lib/enc28j60.c **** 
 442:../../freeRtos/Lib/enc28j60.c **** void     nicSetMacAddress(uint8_t* macaddr)
 443:../../freeRtos/Lib/enc28j60.c **** {
 1447               	.LM114:
 1448               	.LFBB14:
 1449 03e4 CF93      		push r28
 1450 03e6 DF93      		push r29
 1451               	/* prologue: function */
 1452               	/* frame size = 0 */
 1453               	/* stack size = 2 */
 1454               	.L__stack_usage = 2
 1455 03e8 EC01      		movw r28,r24
 444:../../freeRtos/Lib/enc28j60.c **** //NOTE: MAC address in ENC28J60 is byte-backward
 445:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR5, macaddr[0]); 
 1457               	.LM115:
 1458 03ea 84EE      		ldi r24,lo8(-28)
 1459 03ec 6881      		ld r22,Y
 1460 03ee 0E94 0000 		call enc28j60Write
 446:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR4, macaddr[1]);
 1462               	.LM116:
 1463 03f2 85EE      		ldi r24,lo8(-27)
 1464 03f4 6981      		ldd r22,Y+1
 1465 03f6 0E94 0000 		call enc28j60Write
 447:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR3, macaddr[2]);
 1467               	.LM117:
 1468 03fa 82EE      		ldi r24,lo8(-30)
 1469 03fc 6A81      		ldd r22,Y+2
 1470 03fe 0E94 0000 		call enc28j60Write
 448:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR2, macaddr[3]);
 1472               	.LM118:
 1473 0402 83EE      		ldi r24,lo8(-29)
 1474 0404 6B81      		ldd r22,Y+3
 1475 0406 0E94 0000 		call enc28j60Write
 449:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR1, macaddr[4]);
 1477               	.LM119:
 1478 040a 80EE      		ldi r24,lo8(-32)
 1479 040c 6C81      		ldd r22,Y+4
 1480 040e 0E94 0000 		call enc28j60Write
 450:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAADR0, macaddr[5]);
 1482               	.LM120:
 1483 0412 81EE      		ldi r24,lo8(-31)
 1484 0414 6D81      		ldd r22,Y+5
 1485 0416 0E94 0000 		call enc28j60Write
 1486               	/* epilogue start */
 451:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 452:../../freeRtos/Lib/enc28j60.c **** }
 1488               	.LM121:
 1489 041a DF91      		pop r29
 1490 041c CF91      		pop r28
 1491 041e 0895      		ret
 1493               	.Lscope14:
 1495               		.stabd	78,0,0
 1497               		.weak	nicMacInit
 1499               	nicMacInit:
 1500               		.stabd	46,0,0
  77:../../freeRtos/Lib/enc28j60.c **** { 
 1502               	.LM122:
 1503               	.LFBB15:
 1504               	/* prologue: function */
 1505               	/* frame size = 0 */
 1506               	/* stack size = 0 */
 1507               	.L__stack_usage = 0
  78:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1509               	.LM123:
 1510 0420 85E0      		ldi r24,lo8(5)
 1511 0422 90E0      		ldi r25,hi8(5)
 1512 0424 0E94 0000 		call vTaskDelay
 1513               	.LBB16:
 1514               	.LBB17:
 244:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1516               	.LM124:
 1517 0428 85E0      		ldi r24,lo8(5)
 1518 042a 90E0      		ldi r25,hi8(5)
 1519 042c 0E94 0000 		call vTaskDelay
 246:../../freeRtos/Lib/enc28j60.c ****   vTaskDelay(5); // 50ms
 1521               	.LM125:
 1522 0430 85E0      		ldi r24,lo8(5)
 1523 0432 90E0      		ldi r25,hi8(5)
 1524 0434 0E94 0000 		call vTaskDelay
 255:../../freeRtos/Lib/enc28j60.c ****   gNextPacketPtr = RXSTART_INIT;
 1526               	.LM126:
 1527 0438 1092 0000 		sts gNextPacketPtr,__zero_reg__
 1528 043c 1092 0000 		sts gNextPacketPtr+1,__zero_reg__
 257:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 1530               	.LM127:
 1531 0440 88E0      		ldi r24,lo8(8)
 1532 0442 60E0      		ldi r22,lo8(0)
 1533 0444 0E94 0000 		call enc28j60Write
 258:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 1535               	.LM128:
 1536 0448 89E0      		ldi r24,lo8(9)
 1537 044a 60E0      		ldi r22,lo8(0)
 1538 044c 0E94 0000 		call enc28j60Write
 260:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 1540               	.LM129:
 1541 0450 8CE0      		ldi r24,lo8(12)
 1542 0452 60E0      		ldi r22,lo8(0)
 1543 0454 0E94 0000 		call enc28j60Write
 261:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 1545               	.LM130:
 1546 0458 8DE0      		ldi r24,lo8(13)
 1547 045a 60E0      		ldi r22,lo8(0)
 1548 045c 0E94 0000 		call enc28j60Write
 263:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 1550               	.LM131:
 1551 0460 8AE0      		ldi r24,lo8(10)
 1552 0462 6EEF      		ldi r22,lo8(-2)
 1553 0464 0E94 0000 		call enc28j60Write
 264:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 1555               	.LM132:
 1556 0468 8BE0      		ldi r24,lo8(11)
 1557 046a 69E1      		ldi r22,lo8(25)
 1558 046c 0E94 0000 		call enc28j60Write
 266:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 1560               	.LM133:
 1561 0470 84E0      		ldi r24,lo8(4)
 1562 0472 6FEF      		ldi r22,lo8(-1)
 1563 0474 0E94 0000 		call enc28j60Write
 267:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 1565               	.LM134:
 1566 0478 85E0      		ldi r24,lo8(5)
 1567 047a 69E1      		ldi r22,lo8(25)
 1568 047c 0E94 0000 		call enc28j60Write
 269:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 1570               	.LM135:
 1571 0480 86E0      		ldi r24,lo8(6)
 1572 0482 6FEF      		ldi r22,lo8(-1)
 1573 0484 0E94 0000 		call enc28j60Write
 270:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 1575               	.LM136:
 1576 0488 87E0      		ldi r24,lo8(7)
 1577 048a 6FE1      		ldi r22,lo8(31)
 1578 048c 0E94 0000 		call enc28j60Write
 283:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN); //Z wejsciem dla ca
 1580               	.LM137:
 1581 0490 88E3      		ldi r24,lo8(56)
 1582 0492 62EB      		ldi r22,lo8(-78)
 1583 0494 0E94 0000 		call enc28j60Write
 284:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM0, 0x3f);
 1585               	.LM138:
 1586 0498 88E2      		ldi r24,lo8(40)
 1587 049a 6FE3      		ldi r22,lo8(63)
 1588 049c 0E94 0000 		call enc28j60Write
 285:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMM1, 0x30);
 1590               	.LM139:
 1591 04a0 89E2      		ldi r24,lo8(41)
 1592 04a2 60E3      		ldi r22,lo8(48)
 1593 04a4 0E94 0000 		call enc28j60Write
 286:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSL, 0xf9);
 1595               	.LM140:
 1596 04a8 80E3      		ldi r24,lo8(48)
 1597 04aa 69EF      		ldi r22,lo8(-7)
 1598 04ac 0E94 0000 		call enc28j60Write
 287:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(EPMCSH, 0xf7);
 1600               	.LM141:
 1601 04b0 81E3      		ldi r24,lo8(49)
 1602 04b2 67EF      		ldi r22,lo8(-9)
 1603 04b4 0E94 0000 		call enc28j60Write
 292:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 1605               	.LM142:
 1606 04b8 80EC      		ldi r24,lo8(-64)
 1607 04ba 6DE0      		ldi r22,lo8(13)
 1608 04bc 0E94 0000 		call enc28j60Write
 294:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MACON2, 0x00);
 1610               	.LM143:
 1611 04c0 81EC      		ldi r24,lo8(-63)
 1612 04c2 60E0      		ldi r22,lo8(0)
 1613 04c4 0E94 0000 		call enc28j60Write
 296:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 1615               	.LM144:
 1616 04c8 80E8      		ldi r24,lo8(-128)
 1617 04ca 62EC      		ldi r22,lo8(-62)
 1618 04cc 42E3      		ldi r20,lo8(50)
 1619 04ce 0E94 0000 		call enc28j60WriteOp
 298:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGL, 0x12);
 1621               	.LM145:
 1622 04d2 86EC      		ldi r24,lo8(-58)
 1623 04d4 62E1      		ldi r22,lo8(18)
 1624 04d6 0E94 0000 		call enc28j60Write
 299:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAIPGH, 0x0C);
 1626               	.LM146:
 1627 04da 87EC      		ldi r24,lo8(-57)
 1628 04dc 6CE0      		ldi r22,lo8(12)
 1629 04de 0E94 0000 		call enc28j60Write
 301:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MABBIPG, 0x12);
 1631               	.LM147:
 1632 04e2 84EC      		ldi r24,lo8(-60)
 1633 04e4 62E1      		ldi r22,lo8(18)
 1634 04e6 0E94 0000 		call enc28j60Write
 304:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 1636               	.LM148:
 1637 04ea 8AEC      		ldi r24,lo8(-54)
 1638 04ec 6CED      		ldi r22,lo8(-36)
 1639 04ee 0E94 0000 		call enc28j60Write
 305:../../freeRtos/Lib/enc28j60.c ****   enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 1641               	.LM149:
 1642 04f2 8BEC      		ldi r24,lo8(-53)
 1643 04f4 65E0      		ldi r22,lo8(5)
 1644 04f6 0E94 0000 		call enc28j60Write
 310:../../freeRtos/Lib/enc28j60.c ****   nicSetMacAddress(macaddr);
 1646               	.LM150:
 1647 04fa 80E0      		ldi r24,lo8(nicState+2)
 1648 04fc 90E0      		ldi r25,hi8(nicState+2)
 1649 04fe 0E94 0000 		call nicSetMacAddress
 313:../../freeRtos/Lib/enc28j60.c ****   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 1651               	.LM151:
 1652 0502 80E1      		ldi r24,lo8(16)
 1653 0504 60E0      		ldi r22,lo8(256)
 1654 0506 71E0      		ldi r23,hi8(256)
 1655 0508 0E94 0000 		call enc28j60PhyWrite
 315:../../freeRtos/Lib/enc28j60.c ****   enc28j60SetBank(ECON1);                             // switch to bank 0
 1657               	.LM152:
 1658 050c 8FE1      		ldi r24,lo8(31)
 1659 050e 0E94 0000 		call enc28j60SetBank
 317:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 1661               	.LM153:
 1662 0512 80E8      		ldi r24,lo8(-128)
 1663 0514 6BE1      		ldi r22,lo8(27)
 1664 0516 40EC      		ldi r20,lo8(-64)
 1665 0518 0E94 0000 		call enc28j60WriteOp
 319:../../freeRtos/Lib/enc28j60.c ****   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 1667               	.LM154:
 1668 051c 80E8      		ldi r24,lo8(-128)
 1669 051e 6FE1      		ldi r22,lo8(31)
 1670 0520 44E0      		ldi r20,lo8(4)
 1671 0522 0E94 0000 		call enc28j60WriteOp
 1672               	.LBE17:
 1673               	.LBE16:
  81:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (5);
 1675               	.LM155:
 1676 0526 85E0      		ldi r24,lo8(5)
 1677 0528 90E0      		ldi r25,hi8(5)
 1678 052a 0E94 0000 		call vTaskDelay
  82:../../freeRtos/Lib/enc28j60.c ****     enc28j60PhyWrite    (PHLCON, 0x476);
 1680               	.LM156:
 1681 052e 84E1      		ldi r24,lo8(20)
 1682 0530 66E7      		ldi r22,lo8(1142)
 1683 0532 74E0      		ldi r23,hi8(1142)
 1684 0534 0E94 0000 		call enc28j60PhyWrite
  83:../../freeRtos/Lib/enc28j60.c ****     vTaskDelay          (2);
 1686               	.LM157:
 1687 0538 82E0      		ldi r24,lo8(2)
 1688 053a 90E0      		ldi r25,hi8(2)
 1689 053c 0E94 0000 		call vTaskDelay
 1690               	/* epilogue start */
  84:../../freeRtos/Lib/enc28j60.c **** }
 1692               	.LM158:
 1693 0540 0895      		ret
 1695               	.Lscope15:
 1697               		.stabd	78,0,0
 1700               		.weak	nicGetMacAddress
 1702               	nicGetMacAddress:
 1703               		.stabd	46,0,0
 453:../../freeRtos/Lib/enc28j60.c **** 
 454:../../freeRtos/Lib/enc28j60.c **** void     nicGetMacAddress(uint8_t* macaddr)
 455:../../freeRtos/Lib/enc28j60.c **** {
 1705               	.LM159:
 1706               	.LFBB16:
 1707 0542 CF93      		push r28
 1708 0544 DF93      		push r29
 1709               	/* prologue: function */
 1710               	/* frame size = 0 */
 1711               	/* stack size = 2 */
 1712               	.L__stack_usage = 2
 1713 0546 EC01      		movw r28,r24
 456:../../freeRtos/Lib/enc28j60.c ****   macaddr[5] = enc28j60Read(MAADR0); 
 1715               	.LM160:
 1716 0548 81EE      		ldi r24,lo8(-31)
 1717 054a 0E94 0000 		call enc28j60Read
 1718 054e 8D83      		std Y+5,r24
 457:../../freeRtos/Lib/enc28j60.c ****   macaddr[4] = enc28j60Read(MAADR1); 
 1720               	.LM161:
 1721 0550 80EE      		ldi r24,lo8(-32)
 1722 0552 0E94 0000 		call enc28j60Read
 1723 0556 8C83      		std Y+4,r24
 458:../../freeRtos/Lib/enc28j60.c ****   macaddr[3] = enc28j60Read(MAADR2); 
 1725               	.LM162:
 1726 0558 83EE      		ldi r24,lo8(-29)
 1727 055a 0E94 0000 		call enc28j60Read
 1728 055e 8B83      		std Y+3,r24
 459:../../freeRtos/Lib/enc28j60.c ****   macaddr[2] = enc28j60Read(MAADR3); 
 1730               	.LM163:
 1731 0560 82EE      		ldi r24,lo8(-30)
 1732 0562 0E94 0000 		call enc28j60Read
 1733 0566 8A83      		std Y+2,r24
 460:../../freeRtos/Lib/enc28j60.c ****   macaddr[1] = enc28j60Read(MAADR4); 
 1735               	.LM164:
 1736 0568 85EE      		ldi r24,lo8(-27)
 1737 056a 0E94 0000 		call enc28j60Read
 1738 056e 8983      		std Y+1,r24
 461:../../freeRtos/Lib/enc28j60.c ****   macaddr[0] = enc28j60Read(MAADR5); 
 1740               	.LM165:
 1741 0570 84EE      		ldi r24,lo8(-28)
 1742 0572 0E94 0000 		call enc28j60Read
 1743 0576 8883      		st Y,r24
 1744               	/* epilogue start */
 462:../../freeRtos/Lib/enc28j60.c ****   //strncpy((void *)(nicState.mac.addr), (void *)(macaddr), 6);
 463:../../freeRtos/Lib/enc28j60.c **** }
 1746               	.LM166:
 1747 0578 DF91      		pop r29
 1748 057a CF91      		pop r28
 1749 057c 0895      		ret
 1751               	.Lscope16:
 1753               		.stabd	78,0,0
 1756               		.weak	nicRegDump
 1758               	nicRegDump:
 1759               		.stabd	46,0,0
 464:../../freeRtos/Lib/enc28j60.c **** 
 465:../../freeRtos/Lib/enc28j60.c **** void     nicRegDump(FILE *stream)
 466:../../freeRtos/Lib/enc28j60.c **** {
 1761               	.LM167:
 1762               	.LFBB17:
 1763 057e CF93      		push r28
 1764 0580 DF93      		push r29
 1765               	/* prologue: function */
 1766               	/* frame size = 0 */
 1767               	/* stack size = 2 */
 1768               	.L__stack_usage = 2
 1769 0582 EC01      		movw r28,r24
 467:../../freeRtos/Lib/enc28j60.c ****   uint8_t temp;
 468:../../freeRtos/Lib/enc28j60.c ****   fprintf_P(stream, PSTR("ENC28j60 stan rejestrow:\r\n"));
 1771               	.LM168:
 1772 0584 00D0      		rcall .
 1773 0586 0F92      		push __tmp_reg__
 1774 0588 ADB7      		in r26,__SP_L__
 1775 058a BEB7      		in r27,__SP_H__
 1776 058c 1196      		adiw r26,1
 1777 058e 8D93      		st X+,r24
 1778 0590 9C93      		st X,r25
 1779 0592 1297      		sbiw r26,1+1
 1780 0594 80E0      		ldi r24,lo8(__c.5200)
 1781 0596 90E0      		ldi r25,hi8(__c.5200)
 1782 0598 1396      		adiw r26,3
 1783 059a 8D93      		st X+,r24
 1784 059c 9C93      		st X,r25
 1785 059e 1497      		sbiw r26,3+1
 1786 05a0 0E94 0000 		call fprintf_P
 469:../../freeRtos/Lib/enc28j60.c **** 
 470:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR0); fprintf_P(stream, PSTR("\tMAADR0 0x%x\r\n"), temp);
 1788               	.LM169:
 1789 05a4 0F90      		pop __tmp_reg__
 1790 05a6 0F90      		pop __tmp_reg__
 1791 05a8 0F90      		pop __tmp_reg__
 1792 05aa 0F90      		pop __tmp_reg__
 1793 05ac 81EE      		ldi r24,lo8(-31)
 1794 05ae 0E94 0000 		call enc28j60Read
 1795 05b2 00D0      		rcall .
 1796 05b4 00D0      		rcall .
 1797 05b6 EDB7      		in r30,__SP_L__
 1798 05b8 FEB7      		in r31,__SP_H__
 1799 05ba 3196      		adiw r30,1
 1800 05bc ADB7      		in r26,__SP_L__
 1801 05be BEB7      		in r27,__SP_H__
 1802 05c0 1196      		adiw r26,1
 1803 05c2 CD93      		st X+,r28
 1804 05c4 DC93      		st X,r29
 1805 05c6 1297      		sbiw r26,1+1
 1806 05c8 20E0      		ldi r18,lo8(__c.5202)
 1807 05ca 30E0      		ldi r19,hi8(__c.5202)
 1808 05cc 2283      		std Z+2,r18
 1809 05ce 3383      		std Z+3,r19
 1810 05d0 8483      		std Z+4,r24
 1811 05d2 1582      		std Z+5,__zero_reg__
 1812 05d4 0E94 0000 		call fprintf_P
 471:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR1); fprintf_P(stream, PSTR("\tMAADR1 0x%x\r\n"), temp);
 1814               	.LM170:
 1815 05d8 EDB7      		in r30,__SP_L__
 1816 05da FEB7      		in r31,__SP_H__
 1817 05dc 3696      		adiw r30,6
 1818 05de EDBF      		out __SP_L__,r30
 1819 05e0 FEBF      		out __SP_H__,r31
 1820 05e2 80EE      		ldi r24,lo8(-32)
 1821 05e4 0E94 0000 		call enc28j60Read
 1822 05e8 00D0      		rcall .
 1823 05ea 00D0      		rcall .
 1824 05ec EDB7      		in r30,__SP_L__
 1825 05ee FEB7      		in r31,__SP_H__
 1826 05f0 3196      		adiw r30,1
 1827 05f2 ADB7      		in r26,__SP_L__
 1828 05f4 BEB7      		in r27,__SP_H__
 1829 05f6 1196      		adiw r26,1
 1830 05f8 CD93      		st X+,r28
 1831 05fa DC93      		st X,r29
 1832 05fc 1297      		sbiw r26,1+1
 1833 05fe 20E0      		ldi r18,lo8(__c.5204)
 1834 0600 30E0      		ldi r19,hi8(__c.5204)
 1835 0602 2283      		std Z+2,r18
 1836 0604 3383      		std Z+3,r19
 1837 0606 8483      		std Z+4,r24
 1838 0608 1582      		std Z+5,__zero_reg__
 1839 060a 0E94 0000 		call fprintf_P
 472:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR2); fprintf_P(stream, PSTR("\tMAADR2 0x%x\r\n"), temp);
 1841               	.LM171:
 1842 060e EDB7      		in r30,__SP_L__
 1843 0610 FEB7      		in r31,__SP_H__
 1844 0612 3696      		adiw r30,6
 1845 0614 EDBF      		out __SP_L__,r30
 1846 0616 FEBF      		out __SP_H__,r31
 1847 0618 83EE      		ldi r24,lo8(-29)
 1848 061a 0E94 0000 		call enc28j60Read
 1849 061e 00D0      		rcall .
 1850 0620 00D0      		rcall .
 1851 0622 EDB7      		in r30,__SP_L__
 1852 0624 FEB7      		in r31,__SP_H__
 1853 0626 3196      		adiw r30,1
 1854 0628 ADB7      		in r26,__SP_L__
 1855 062a BEB7      		in r27,__SP_H__
 1856 062c 1196      		adiw r26,1
 1857 062e CD93      		st X+,r28
 1858 0630 DC93      		st X,r29
 1859 0632 1297      		sbiw r26,1+1
 1860 0634 20E0      		ldi r18,lo8(__c.5206)
 1861 0636 30E0      		ldi r19,hi8(__c.5206)
 1862 0638 2283      		std Z+2,r18
 1863 063a 3383      		std Z+3,r19
 1864 063c 8483      		std Z+4,r24
 1865 063e 1582      		std Z+5,__zero_reg__
 1866 0640 0E94 0000 		call fprintf_P
 473:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR3); fprintf_P(stream, PSTR("\tMAADR3 0x%x\r\n"), temp);
 1868               	.LM172:
 1869 0644 EDB7      		in r30,__SP_L__
 1870 0646 FEB7      		in r31,__SP_H__
 1871 0648 3696      		adiw r30,6
 1872 064a EDBF      		out __SP_L__,r30
 1873 064c FEBF      		out __SP_H__,r31
 1874 064e 82EE      		ldi r24,lo8(-30)
 1875 0650 0E94 0000 		call enc28j60Read
 1876 0654 00D0      		rcall .
 1877 0656 00D0      		rcall .
 1878 0658 EDB7      		in r30,__SP_L__
 1879 065a FEB7      		in r31,__SP_H__
 1880 065c 3196      		adiw r30,1
 1881 065e ADB7      		in r26,__SP_L__
 1882 0660 BEB7      		in r27,__SP_H__
 1883 0662 1196      		adiw r26,1
 1884 0664 CD93      		st X+,r28
 1885 0666 DC93      		st X,r29
 1886 0668 1297      		sbiw r26,1+1
 1887 066a 20E0      		ldi r18,lo8(__c.5208)
 1888 066c 30E0      		ldi r19,hi8(__c.5208)
 1889 066e 2283      		std Z+2,r18
 1890 0670 3383      		std Z+3,r19
 1891 0672 8483      		std Z+4,r24
 1892 0674 1582      		std Z+5,__zero_reg__
 1893 0676 0E94 0000 		call fprintf_P
 474:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR4); fprintf_P(stream, PSTR("\tMAADR4 0x%x\r\n"), temp);
 1895               	.LM173:
 1896 067a EDB7      		in r30,__SP_L__
 1897 067c FEB7      		in r31,__SP_H__
 1898 067e 3696      		adiw r30,6
 1899 0680 EDBF      		out __SP_L__,r30
 1900 0682 FEBF      		out __SP_H__,r31
 1901 0684 85EE      		ldi r24,lo8(-27)
 1902 0686 0E94 0000 		call enc28j60Read
 1903 068a 00D0      		rcall .
 1904 068c 00D0      		rcall .
 1905 068e EDB7      		in r30,__SP_L__
 1906 0690 FEB7      		in r31,__SP_H__
 1907 0692 3196      		adiw r30,1
 1908 0694 ADB7      		in r26,__SP_L__
 1909 0696 BEB7      		in r27,__SP_H__
 1910 0698 1196      		adiw r26,1
 1911 069a CD93      		st X+,r28
 1912 069c DC93      		st X,r29
 1913 069e 1297      		sbiw r26,1+1
 1914 06a0 20E0      		ldi r18,lo8(__c.5210)
 1915 06a2 30E0      		ldi r19,hi8(__c.5210)
 1916 06a4 2283      		std Z+2,r18
 1917 06a6 3383      		std Z+3,r19
 1918 06a8 8483      		std Z+4,r24
 1919 06aa 1582      		std Z+5,__zero_reg__
 1920 06ac 0E94 0000 		call fprintf_P
 475:../../freeRtos/Lib/enc28j60.c ****   temp = enc28j60Read(MAADR5); fprintf_P(stream, PSTR("\tMAADR5 0x%x\r\n"), temp);
 1922               	.LM174:
 1923 06b0 EDB7      		in r30,__SP_L__
 1924 06b2 FEB7      		in r31,__SP_H__
 1925 06b4 3696      		adiw r30,6
 1926 06b6 EDBF      		out __SP_L__,r30
 1927 06b8 FEBF      		out __SP_H__,r31
 1928 06ba 84EE      		ldi r24,lo8(-28)
 1929 06bc 0E94 0000 		call enc28j60Read
 1930 06c0 00D0      		rcall .
 1931 06c2 00D0      		rcall .
 1932 06c4 EDB7      		in r30,__SP_L__
 1933 06c6 FEB7      		in r31,__SP_H__
 1934 06c8 3196      		adiw r30,1
 1935 06ca ADB7      		in r26,__SP_L__
 1936 06cc BEB7      		in r27,__SP_H__
 1937 06ce 1196      		adiw r26,1
 1938 06d0 CD93      		st X+,r28
 1939 06d2 DC93      		st X,r29
 1940 06d4 1297      		sbiw r26,1+1
 1941 06d6 20E0      		ldi r18,lo8(__c.5212)
 1942 06d8 30E0      		ldi r19,hi8(__c.5212)
 1943 06da 2283      		std Z+2,r18
 1944 06dc 3383      		std Z+3,r19
 1945 06de 8483      		std Z+4,r24
 1946 06e0 1582      		std Z+5,__zero_reg__
 1947 06e2 0E94 0000 		call fprintf_P
 1948 06e6 EDB7      		in r30,__SP_L__
 1949 06e8 FEB7      		in r31,__SP_H__
 1950 06ea 3696      		adiw r30,6
 1951 06ec EDBF      		out __SP_L__,r30
 1952 06ee FEBF      		out __SP_H__,r31
 1953               	/* epilogue start */
 476:../../freeRtos/Lib/enc28j60.c **** }
 1955               	.LM175:
 1956 06f0 DF91      		pop r29
 1957 06f2 CF91      		pop r28
 1958 06f4 0895      		ret
 1960               	.Lscope17:
 1962               		.stabd	78,0,0
 1963               		.comm klastry,128,1
 1964               		.comm wwwport,1,1
 1965               		.comm rollers,2,1
 1966               		.comm xSemaphoreSpiSS,2,1
 1967               		.comm portA,1,1
 1968               		.comm portB,1,1
 1969               		.comm lockSensors,2,1
 1970               		.comm xSemaphoreRs485,2,1
 1971               		.comm nicState,14,1
 1972               		.comm plen,2,1
 1973               		.comm IpMyConfig,15,1
 1974               		.comm arpDebug,2,1
 1975               		.comm arpDebugLevel,1,1
 1976               		.comm icmpDebug,2,1
 1977               		.comm icmpDebugLevel,1,1
 1978               		.comm udpSocket,2,1
 1979               		.comm udpDbgStream,2,1
 1980               		.comm udpDbgLevel,1,1
 1981               		.comm tcpDebugStream,2,1
 1982               		.comm tcpDebugLevel,1,1
 1983               		.comm sockets,2,1
 1984               		.comm czasRtc,7,1
 1985               		.section	.progmem.data,"a",@progbits
 1988               	__c.5212:
 1989 0000 094D 4141 		.string	"\tMAADR5 0x%x\r\n"
 1989      4452 3520 
 1989      3078 2578 
 1989      0D0A 00
 1992               	__c.5210:
 1993 000f 094D 4141 		.string	"\tMAADR4 0x%x\r\n"
 1993      4452 3420 
 1993      3078 2578 
 1993      0D0A 00
 1996               	__c.5208:
 1997 001e 094D 4141 		.string	"\tMAADR3 0x%x\r\n"
 1997      4452 3320 
 1997      3078 2578 
 1997      0D0A 00
 2000               	__c.5206:
 2001 002d 094D 4141 		.string	"\tMAADR2 0x%x\r\n"
 2001      4452 3220 
 2001      3078 2578 
 2001      0D0A 00
 2004               	__c.5204:
 2005 003c 094D 4141 		.string	"\tMAADR1 0x%x\r\n"
 2005      4452 3120 
 2005      3078 2578 
 2005      0D0A 00
 2008               	__c.5202:
 2009 004b 094D 4141 		.string	"\tMAADR0 0x%x\r\n"
 2009      4452 3020 
 2009      3078 2578 
 2009      0D0A 00
 2012               	__c.5200:
 2013 005a 454E 4332 		.string	"ENC28j60 stan rejestrow:\r\n"
 2013      386A 3630 
 2013      2073 7461 
 2013      6E20 7265 
 2013      6A65 7374 
 2014               		.lcomm Enc28j60Bank,1
 2015               		.lcomm gNextPacketPtr,2
 2040               		.text
 2042               	.Letext0:
 2043               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 enc28j60.c
     /tmp/ccpjD11X.s:2      *ABS*:0000003f __SREG__
     /tmp/ccpjD11X.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccpjD11X.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccpjD11X.s:5      *ABS*:00000034 __CCP__
     /tmp/ccpjD11X.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccpjD11X.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccpjD11X.s:559    .text:00000000 spiEnableEnc28j60
     /tmp/ccpjD11X.s:579    .text:00000002 spiDisableEnc28j60
     /tmp/ccpjD11X.s:601    .text:00000004 enc28j60WriteOp
     /tmp/ccpjD11X.s:659    .text:0000004a enc28j60SetBank
                             .bss:00000000 Enc28j60Bank
     /tmp/ccpjD11X.s:720    .text:00000092 enc28j60Write
     /tmp/ccpjD11X.s:762    .text:000000ba enc28j60ReadOp
     /tmp/ccpjD11X.s:831    .text:00000108 enc28j60Read
     /tmp/ccpjD11X.s:869    .text:0000012a enc28j60hasRxPkt
     /tmp/ccpjD11X.s:901    .text:0000013c enc28j60linkup
     /tmp/ccpjD11X.s:964    .text:00000178 enc28j60getrev
     /tmp/ccpjD11X.s:988    .text:00000180 enc28j60PhyWrite
     /tmp/ccpjD11X.s:1053   .text:000001ca nicPoll
     /tmp/ccpjD11X.s:2014   .bss:00000001 gNextPacketPtr
                            *COM*:0000000e nicState
     /tmp/ccpjD11X.s:1303   .text:00000336 nicSend
     /tmp/ccpjD11X.s:1444   .text:000003e4 nicSetMacAddress
     /tmp/ccpjD11X.s:1499   .text:00000420 nicMacInit
     /tmp/ccpjD11X.s:1702   .text:00000542 nicGetMacAddress
     /tmp/ccpjD11X.s:1758   .text:0000057e nicRegDump
     /tmp/ccpjD11X.s:2012   .progmem.data:0000005a __c.5200
     /tmp/ccpjD11X.s:2008   .progmem.data:0000004b __c.5202
     /tmp/ccpjD11X.s:2004   .progmem.data:0000003c __c.5204
     /tmp/ccpjD11X.s:2000   .progmem.data:0000002d __c.5206
     /tmp/ccpjD11X.s:1996   .progmem.data:0000001e __c.5208
     /tmp/ccpjD11X.s:1992   .progmem.data:0000000f __c.5210
     /tmp/ccpjD11X.s:1988   .progmem.data:00000000 __c.5212
                            *COM*:00000080 klastry
                            *COM*:00000001 wwwport
                            *COM*:00000002 rollers
                            *COM*:00000002 xSemaphoreSpiSS
                            *COM*:00000001 portA
                            *COM*:00000001 portB
                            *COM*:00000002 lockSensors
                            *COM*:00000002 xSemaphoreRs485
                            *COM*:00000002 plen
                            *COM*:0000000f IpMyConfig
                            *COM*:00000002 arpDebug
                            *COM*:00000001 arpDebugLevel
                            *COM*:00000002 icmpDebug
                            *COM*:00000001 icmpDebugLevel
                            *COM*:00000002 udpSocket
                            *COM*:00000002 udpDbgStream
                            *COM*:00000001 udpDbgLevel
                            *COM*:00000002 tcpDebugStream
                            *COM*:00000001 tcpDebugLevel
                            *COM*:00000002 sockets
                            *COM*:00000007 czasRtc

UNDEFINED SYMBOLS
spiSendENC
vTaskDelay
fprintf_P
__do_clear_bss
