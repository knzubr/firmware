   1               		.file	"list.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	vListInitialise
 140               	vListInitialise:
 141               		.stabd	46,0,0
   1:../../freeRtos/Source/list.c **** /*
   2:../../freeRtos/Source/list.c **** 	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
   3:../../freeRtos/Source/list.c **** 
   4:../../freeRtos/Source/list.c **** 	This file is part of the FreeRTOS.org distribution.
   5:../../freeRtos/Source/list.c **** 
   6:../../freeRtos/Source/list.c **** 	FreeRTOS.org is free software; you can redistribute it and/or modify it 
   7:../../freeRtos/Source/list.c **** 	under the terms of the GNU General Public License (version 2) as published
   8:../../freeRtos/Source/list.c **** 	by the Free Software Foundation and modified by the FreeRTOS exception.
   9:../../freeRtos/Source/list.c **** 
  10:../../freeRtos/Source/list.c **** 	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
  11:../../freeRtos/Source/list.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  12:../../freeRtos/Source/list.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
  13:../../freeRtos/Source/list.c **** 	more details.
  14:../../freeRtos/Source/list.c **** 
  15:../../freeRtos/Source/list.c **** 	You should have received a copy of the GNU General Public License along 
  16:../../freeRtos/Source/list.c **** 	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59 
  17:../../freeRtos/Source/list.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  18:../../freeRtos/Source/list.c **** 
  19:../../freeRtos/Source/list.c **** 	A special exception to the GPL is included to allow you to distribute a 
  20:../../freeRtos/Source/list.c **** 	combined work that includes FreeRTOS.org without being obliged to provide
  21:../../freeRtos/Source/list.c **** 	the source code for any proprietary components.  See the licensing section
  22:../../freeRtos/Source/list.c **** 	of http://www.FreeRTOS.org for full details.
  23:../../freeRtos/Source/list.c **** 
  24:../../freeRtos/Source/list.c **** 
  25:../../freeRtos/Source/list.c **** 	***************************************************************************
  26:../../freeRtos/Source/list.c **** 	*                                                                         *
  27:../../freeRtos/Source/list.c **** 	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
  28:../../freeRtos/Source/list.c **** 	*                                                                         *
  29:../../freeRtos/Source/list.c **** 	* This is a concise, step by step, 'hands on' guide that describes both   *
  30:../../freeRtos/Source/list.c **** 	* general multitasking concepts and FreeRTOS specifics. It presents and   *
  31:../../freeRtos/Source/list.c **** 	* explains numerous examples that are written using the FreeRTOS API.     *
  32:../../freeRtos/Source/list.c **** 	* Full source code for all the examples is provided in an accompanying    *
  33:../../freeRtos/Source/list.c **** 	* .zip file.                                                              *
  34:../../freeRtos/Source/list.c **** 	*                                                                         *
  35:../../freeRtos/Source/list.c **** 	***************************************************************************
  36:../../freeRtos/Source/list.c **** 
  37:../../freeRtos/Source/list.c **** 	1 tab == 4 spaces!
  38:../../freeRtos/Source/list.c **** 
  39:../../freeRtos/Source/list.c **** 	Please ensure to read the configuration and relevant port sections of the
  40:../../freeRtos/Source/list.c **** 	online documentation.
  41:../../freeRtos/Source/list.c **** 
  42:../../freeRtos/Source/list.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  43:../../freeRtos/Source/list.c **** 	contact details.
  44:../../freeRtos/Source/list.c **** 
  45:../../freeRtos/Source/list.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  46:../../freeRtos/Source/list.c **** 	critical systems.
  47:../../freeRtos/Source/list.c **** 
  48:../../freeRtos/Source/list.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  49:../../freeRtos/Source/list.c **** 	licensing and training services.
  50:../../freeRtos/Source/list.c **** */
  51:../../freeRtos/Source/list.c **** 
  52:../../freeRtos/Source/list.c **** 
  53:../../freeRtos/Source/list.c **** #include <stdlib.h>
  54:../../freeRtos/Source/list.c **** #include "FreeRTOS.h"
  55:../../freeRtos/Source/list.c **** #include "list.h"
  56:../../freeRtos/Source/list.c **** 
  57:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------
  58:../../freeRtos/Source/list.c ****  * PUBLIC LIST API documented in list.h
  59:../../freeRtos/Source/list.c ****  *----------------------------------------------------------*/
  60:../../freeRtos/Source/list.c **** 
  61:../../freeRtos/Source/list.c **** void vListInitialise( xList *pxList )
  62:../../freeRtos/Source/list.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149 0000 FC01      		movw r30,r24
  63:../../freeRtos/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  64:../../freeRtos/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  65:../../freeRtos/Source/list.c **** 	as the only list entry. */
  66:../../freeRtos/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 151               	.LM1:
 152 0002 0396      		adiw r24,3
 153 0004 9283      		std Z+2,r25
 154 0006 8183      		std Z+1,r24
  67:../../freeRtos/Source/list.c **** 
  68:../../freeRtos/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  69:../../freeRtos/Source/list.c **** 	ensure it remains at the end of the list. */
  70:../../freeRtos/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
 156               	.LM2:
 157 0008 2FEF      		ldi r18,lo8(-1)
 158 000a 3FEF      		ldi r19,lo8(-1)
 159 000c 3483      		std Z+4,r19
 160 000e 2383      		std Z+3,r18
  71:../../freeRtos/Source/list.c **** 
  72:../../freeRtos/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  73:../../freeRtos/Source/list.c **** 	when the list is empty. */
  74:../../freeRtos/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 162               	.LM3:
 163 0010 9683      		std Z+6,r25
 164 0012 8583      		std Z+5,r24
  75:../../freeRtos/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 166               	.LM4:
 167 0014 9087      		std Z+8,r25
 168 0016 8783      		std Z+7,r24
  76:../../freeRtos/Source/list.c **** 
  77:../../freeRtos/Source/list.c **** 	pxList->uxNumberOfItems = 0;
 170               	.LM5:
 171 0018 1082      		st Z,__zero_reg__
 172 001a 0895      		ret
 174               	.Lscope1:
 176               		.stabd	78,0,0
 179               	.global	vListInitialiseItem
 181               	vListInitialiseItem:
 182               		.stabd	46,0,0
  78:../../freeRtos/Source/list.c **** }
  79:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
  80:../../freeRtos/Source/list.c **** 
  81:../../freeRtos/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  82:../../freeRtos/Source/list.c **** {
 184               	.LM6:
 185               	.LFBB2:
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 0 */
 189               	.L__stack_usage = 0
  83:../../freeRtos/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  84:../../freeRtos/Source/list.c **** 	pxItem->pvContainer = NULL;
 191               	.LM7:
 192 001c FC01      		movw r30,r24
 193 001e 1186      		std Z+9,__zero_reg__
 194 0020 1086      		std Z+8,__zero_reg__
 195 0022 0895      		ret
 197               	.Lscope2:
 199               		.stabd	78,0,0
 203               	.global	vListInsertEnd
 205               	vListInsertEnd:
 206               		.stabd	46,0,0
  85:../../freeRtos/Source/list.c **** }
  86:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
  87:../../freeRtos/Source/list.c **** 
  88:../../freeRtos/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  89:../../freeRtos/Source/list.c **** {
 208               	.LM8:
 209               	.LFBB3:
 210 0024 CF93      		push r28
 211 0026 DF93      		push r29
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 2 */
 215               	.L__stack_usage = 2
 216 0028 DC01      		movw r26,r24
 217 002a FB01      		movw r30,r22
  90:../../freeRtos/Source/list.c **** volatile xListItem * pxIndex;
  91:../../freeRtos/Source/list.c **** 
  92:../../freeRtos/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  93:../../freeRtos/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  94:../../freeRtos/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  95:../../freeRtos/Source/list.c **** 	the pxIndex member. */
  96:../../freeRtos/Source/list.c **** 	pxIndex = pxList->pxIndex;
 219               	.LM9:
 220 002c 1196      		adiw r26,1
 221 002e 2D91      		ld r18,X+
 222 0030 3C91      		ld r19,X
 223 0032 1297      		sbiw r26,1+1
  97:../../freeRtos/Source/list.c **** 
  98:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 225               	.LM10:
 226 0034 E901      		movw r28,r18
 227 0036 8A81      		ldd r24,Y+2
 228 0038 9B81      		ldd r25,Y+3
 229 003a 9383      		std Z+3,r25
 230 003c 8283      		std Z+2,r24
  99:../../freeRtos/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 232               	.LM11:
 233 003e 3583      		std Z+5,r19
 234 0040 2483      		std Z+4,r18
 100:../../freeRtos/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 236               	.LM12:
 237 0042 8A81      		ldd r24,Y+2
 238 0044 9B81      		ldd r25,Y+3
 239 0046 EC01      		movw r28,r24
 240 0048 7D83      		std Y+5,r23
 241 004a 6C83      		std Y+4,r22
 101:../../freeRtos/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 243               	.LM13:
 244 004c E901      		movw r28,r18
 245 004e 7B83      		std Y+3,r23
 246 0050 6A83      		std Y+2,r22
 102:../../freeRtos/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 248               	.LM14:
 249 0052 1296      		adiw r26,1+1
 250 0054 7C93      		st X,r23
 251 0056 6E93      		st -X,r22
 252 0058 1197      		sbiw r26,1
 103:../../freeRtos/Source/list.c **** 
 104:../../freeRtos/Source/list.c **** 	/* Remember which list the item is in. */
 105:../../freeRtos/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 254               	.LM15:
 255 005a B187      		std Z+9,r27
 256 005c A087      		std Z+8,r26
 106:../../freeRtos/Source/list.c **** 
 107:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 258               	.LM16:
 259 005e 8C91      		ld r24,X
 260 0060 8F5F      		subi r24,lo8(-(1))
 261 0062 8C93      		st X,r24
 262               	/* epilogue start */
 108:../../freeRtos/Source/list.c **** }
 264               	.LM17:
 265 0064 DF91      		pop r29
 266 0066 CF91      		pop r28
 267 0068 0895      		ret
 272               	.Lscope3:
 274               		.stabd	78,0,0
 278               	.global	vListInsert
 280               	vListInsert:
 281               		.stabd	46,0,0
 109:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
 110:../../freeRtos/Source/list.c **** 
 111:../../freeRtos/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 112:../../freeRtos/Source/list.c **** {
 283               	.LM18:
 284               	.LFBB4:
 285 006a CF93      		push r28
 286 006c DF93      		push r29
 287               	/* prologue: function */
 288               	/* frame size = 0 */
 289               	/* stack size = 2 */
 290               	.L__stack_usage = 2
 291 006e AC01      		movw r20,r24
 292 0070 DB01      		movw r26,r22
 113:../../freeRtos/Source/list.c **** volatile xListItem *pxIterator;
 114:../../freeRtos/Source/list.c **** portTickType xValueOfInsertion;
 115:../../freeRtos/Source/list.c **** 
 116:../../freeRtos/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 117:../../freeRtos/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 294               	.LM19:
 295 0072 8D91      		ld r24,X+
 296 0074 9C91      		ld r25,X
 297 0076 1197      		sbiw r26,1
 118:../../freeRtos/Source/list.c **** 
 119:../../freeRtos/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 120:../../freeRtos/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 121:../../freeRtos/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 122:../../freeRtos/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as 
 123:../../freeRtos/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 124:../../freeRtos/Source/list.c **** 	to guard against this by checking the value first and modifying the 
 125:../../freeRtos/Source/list.c **** 	algorithm slightly if necessary. */
 126:../../freeRtos/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 299               	.LM20:
 300 0078 8F3F      		cpi r24,-1
 301 007a 2FEF      		ldi r18,-1
 302 007c 9207      		cpc r25,r18
 303 007e 01F4      		brne .L5
 127:../../freeRtos/Source/list.c **** 	{
 128:../../freeRtos/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 305               	.LM21:
 306 0080 EA01      		movw r28,r20
 307 0082 EF81      		ldd r30,Y+7
 308 0084 F885      		ldd r31,Y+8
 309 0086 00C0      		rjmp .L6
 310               	.L5:
 129:../../freeRtos/Source/list.c **** 	}
 130:../../freeRtos/Source/list.c **** 	else
 131:../../freeRtos/Source/list.c **** 	{
 132:../../freeRtos/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 312               	.LM22:
 313 0088 FA01      		movw r30,r20
 314 008a 3396      		adiw r30,3
 315               	.L7:
 317               	.LM23:
 318 008c 2281      		ldd r18,Z+2
 319 008e 3381      		ldd r19,Z+3
 320 0090 E901      		movw r28,r18
 321 0092 2881      		ld r18,Y
 322 0094 3981      		ldd r19,Y+1
 323 0096 8217      		cp r24,r18
 324 0098 9307      		cpc r25,r19
 325 009a 00F0      		brlo .L6
 327               	.LM24:
 328 009c 0280      		ldd __tmp_reg__,Z+2
 329 009e F381      		ldd r31,Z+3
 330 00a0 E02D      		mov r30,__tmp_reg__
 331 00a2 00C0      		rjmp .L7
 332               	.L6:
 133:../../freeRtos/Source/list.c **** 		{
 134:../../freeRtos/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 135:../../freeRtos/Source/list.c **** 			wanted insertion position. */
 136:../../freeRtos/Source/list.c **** 		}
 137:../../freeRtos/Source/list.c **** 	}
 138:../../freeRtos/Source/list.c **** 
 139:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 334               	.LM25:
 335 00a4 8281      		ldd r24,Z+2
 336 00a6 9381      		ldd r25,Z+3
 337 00a8 1396      		adiw r26,2+1
 338 00aa 9C93      		st X,r25
 339 00ac 8E93      		st -X,r24
 340 00ae 1297      		sbiw r26,2
 140:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 342               	.LM26:
 343 00b0 EC01      		movw r28,r24
 344 00b2 BD83      		std Y+5,r27
 345 00b4 AC83      		std Y+4,r26
 141:../../freeRtos/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 347               	.LM27:
 348 00b6 1596      		adiw r26,4+1
 349 00b8 FC93      		st X,r31
 350 00ba EE93      		st -X,r30
 351 00bc 1497      		sbiw r26,4
 142:../../freeRtos/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 353               	.LM28:
 354 00be B383      		std Z+3,r27
 355 00c0 A283      		std Z+2,r26
 143:../../freeRtos/Source/list.c **** 
 144:../../freeRtos/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 145:../../freeRtos/Source/list.c **** 	item later. */
 146:../../freeRtos/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 357               	.LM29:
 358 00c2 1996      		adiw r26,8+1
 359 00c4 5C93      		st X,r21
 360 00c6 4E93      		st -X,r20
 361 00c8 1897      		sbiw r26,8
 147:../../freeRtos/Source/list.c **** 
 148:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 363               	.LM30:
 364 00ca FA01      		movw r30,r20
 365 00cc 8081      		ld r24,Z
 366 00ce 8F5F      		subi r24,lo8(-(1))
 367 00d0 8083      		st Z,r24
 368               	/* epilogue start */
 149:../../freeRtos/Source/list.c **** }
 370               	.LM31:
 371 00d2 DF91      		pop r29
 372 00d4 CF91      		pop r28
 373 00d6 0895      		ret
 379               	.Lscope4:
 381               		.stabd	78,0,0
 384               	.global	vListRemove
 386               	vListRemove:
 387               		.stabd	46,0,0
 150:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
 151:../../freeRtos/Source/list.c **** 
 152:../../freeRtos/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 153:../../freeRtos/Source/list.c **** {
 389               	.LM32:
 390               	.LFBB5:
 391 00d8 CF93      		push r28
 392 00da DF93      		push r29
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 2 */
 396               	.L__stack_usage = 2
 397 00dc FC01      		movw r30,r24
 154:../../freeRtos/Source/list.c **** xList * pxList;
 155:../../freeRtos/Source/list.c **** 
 156:../../freeRtos/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 399               	.LM33:
 400 00de A281      		ldd r26,Z+2
 401 00e0 B381      		ldd r27,Z+3
 402 00e2 8481      		ldd r24,Z+4
 403 00e4 9581      		ldd r25,Z+5
 404 00e6 1596      		adiw r26,4+1
 405 00e8 9C93      		st X,r25
 406 00ea 8E93      		st -X,r24
 407 00ec 1497      		sbiw r26,4
 157:../../freeRtos/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 409               	.LM34:
 410 00ee C481      		ldd r28,Z+4
 411 00f0 D581      		ldd r29,Z+5
 412 00f2 BB83      		std Y+3,r27
 413 00f4 AA83      		std Y+2,r26
 158:../../freeRtos/Source/list.c **** 	
 159:../../freeRtos/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 160:../../freeRtos/Source/list.c **** 	item. */
 161:../../freeRtos/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 415               	.LM35:
 416 00f6 A085      		ldd r26,Z+8
 417 00f8 B185      		ldd r27,Z+9
 162:../../freeRtos/Source/list.c **** 
 163:../../freeRtos/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 164:../../freeRtos/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 419               	.LM36:
 420 00fa 1196      		adiw r26,1
 421 00fc 8D91      		ld r24,X+
 422 00fe 9C91      		ld r25,X
 423 0100 1297      		sbiw r26,1+1
 424 0102 8E17      		cp r24,r30
 425 0104 9F07      		cpc r25,r31
 426 0106 01F4      		brne .L11
 165:../../freeRtos/Source/list.c **** 	{
 166:../../freeRtos/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 428               	.LM37:
 429 0108 1296      		adiw r26,1+1
 430 010a DC93      		st X,r29
 431 010c CE93      		st -X,r28
 432 010e 1197      		sbiw r26,1
 433               	.L11:
 167:../../freeRtos/Source/list.c **** 	}
 168:../../freeRtos/Source/list.c **** 
 169:../../freeRtos/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 435               	.LM38:
 436 0110 1186      		std Z+9,__zero_reg__
 437 0112 1086      		std Z+8,__zero_reg__
 170:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 439               	.LM39:
 440 0114 8C91      		ld r24,X
 441 0116 8150      		subi r24,lo8(-(-1))
 442 0118 8C93      		st X,r24
 443               	/* epilogue start */
 171:../../freeRtos/Source/list.c **** }
 445               	.LM40:
 446 011a DF91      		pop r29
 447 011c CF91      		pop r28
 448 011e 0895      		ret
 453               	.Lscope5:
 455               		.stabd	78,0,0
 457               	.Letext0:
 458               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccxFlSjl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxFlSjl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxFlSjl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxFlSjl.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccxFlSjl.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxFlSjl.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxFlSjl.s:140    .text:0000000000000000 vListInitialise
     /tmp/ccxFlSjl.s:181    .text:000000000000001c vListInitialiseItem
     /tmp/ccxFlSjl.s:205    .text:0000000000000024 vListInsertEnd
     /tmp/ccxFlSjl.s:280    .text:000000000000006a vListInsert
     /tmp/ccxFlSjl.s:386    .text:00000000000000d8 vListRemove

NO UNDEFINED SYMBOLS
