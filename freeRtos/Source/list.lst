   1               		.file	"list.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__RAMPY__ = 0x3a
   7               	__RAMPX__ = 0x39
   8               	__RAMPD__ = 0x38
   9               	__CCP__ = 0x34
  10               	__tmp_reg__ = 0
  11               	__zero_reg__ = 1
  14               		.text
  15               	.Ltext0:
 465               	.global	vListInitialise
 467               	vListInitialise:
 468               		.stabd	46,0,0
   1:../../freeRtos/Source/list.c **** /*
   2:../../freeRtos/Source/list.c **** 	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
   3:../../freeRtos/Source/list.c **** 
   4:../../freeRtos/Source/list.c **** 	This file is part of the FreeRTOS.org distribution.
   5:../../freeRtos/Source/list.c **** 
   6:../../freeRtos/Source/list.c **** 	FreeRTOS.org is free software; you can redistribute it and/or modify it 
   7:../../freeRtos/Source/list.c **** 	under the terms of the GNU General Public License (version 2) as published
   8:../../freeRtos/Source/list.c **** 	by the Free Software Foundation and modified by the FreeRTOS exception.
   9:../../freeRtos/Source/list.c **** 
  10:../../freeRtos/Source/list.c **** 	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
  11:../../freeRtos/Source/list.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  12:../../freeRtos/Source/list.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
  13:../../freeRtos/Source/list.c **** 	more details.
  14:../../freeRtos/Source/list.c **** 
  15:../../freeRtos/Source/list.c **** 	You should have received a copy of the GNU General Public License along 
  16:../../freeRtos/Source/list.c **** 	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59 
  17:../../freeRtos/Source/list.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  18:../../freeRtos/Source/list.c **** 
  19:../../freeRtos/Source/list.c **** 	A special exception to the GPL is included to allow you to distribute a 
  20:../../freeRtos/Source/list.c **** 	combined work that includes FreeRTOS.org without being obliged to provide
  21:../../freeRtos/Source/list.c **** 	the source code for any proprietary components.  See the licensing section
  22:../../freeRtos/Source/list.c **** 	of http://www.FreeRTOS.org for full details.
  23:../../freeRtos/Source/list.c **** 
  24:../../freeRtos/Source/list.c **** 
  25:../../freeRtos/Source/list.c **** 	***************************************************************************
  26:../../freeRtos/Source/list.c **** 	*                                                                         *
  27:../../freeRtos/Source/list.c **** 	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
  28:../../freeRtos/Source/list.c **** 	*                                                                         *
  29:../../freeRtos/Source/list.c **** 	* This is a concise, step by step, 'hands on' guide that describes both   *
  30:../../freeRtos/Source/list.c **** 	* general multitasking concepts and FreeRTOS specifics. It presents and   *
  31:../../freeRtos/Source/list.c **** 	* explains numerous examples that are written using the FreeRTOS API.     *
  32:../../freeRtos/Source/list.c **** 	* Full source code for all the examples is provided in an accompanying    *
  33:../../freeRtos/Source/list.c **** 	* .zip file.                                                              *
  34:../../freeRtos/Source/list.c **** 	*                                                                         *
  35:../../freeRtos/Source/list.c **** 	***************************************************************************
  36:../../freeRtos/Source/list.c **** 
  37:../../freeRtos/Source/list.c **** 	1 tab == 4 spaces!
  38:../../freeRtos/Source/list.c **** 
  39:../../freeRtos/Source/list.c **** 	Please ensure to read the configuration and relevant port sections of the
  40:../../freeRtos/Source/list.c **** 	online documentation.
  41:../../freeRtos/Source/list.c **** 
  42:../../freeRtos/Source/list.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  43:../../freeRtos/Source/list.c **** 	contact details.
  44:../../freeRtos/Source/list.c **** 
  45:../../freeRtos/Source/list.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  46:../../freeRtos/Source/list.c **** 	critical systems.
  47:../../freeRtos/Source/list.c **** 
  48:../../freeRtos/Source/list.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  49:../../freeRtos/Source/list.c **** 	licensing and training services.
  50:../../freeRtos/Source/list.c **** */
  51:../../freeRtos/Source/list.c **** 
  52:../../freeRtos/Source/list.c **** 
  53:../../freeRtos/Source/list.c **** #include <stdlib.h>
  54:../../freeRtos/Source/list.c **** #include "FreeRTOS.h"
  55:../../freeRtos/Source/list.c **** #include "list.h"
  56:../../freeRtos/Source/list.c **** 
  57:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------
  58:../../freeRtos/Source/list.c ****  * PUBLIC LIST API documented in list.h
  59:../../freeRtos/Source/list.c ****  *----------------------------------------------------------*/
  60:../../freeRtos/Source/list.c **** 
  61:../../freeRtos/Source/list.c **** void vListInitialise( xList *pxList )
  62:../../freeRtos/Source/list.c **** {
 470               	.LM0:
 471               	.LFBB1:
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 0 */
 475               	.L__stack_usage = 0
 476 0000 FC01      		movw r30,r24
  63:../../freeRtos/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  64:../../freeRtos/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  65:../../freeRtos/Source/list.c **** 	as the only list entry. */
  66:../../freeRtos/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 478               	.LM1:
 479 0002 0396      		adiw r24,3
 480 0004 8183      		std Z+1,r24
 481 0006 9283      		std Z+2,r25
  67:../../freeRtos/Source/list.c **** 
  68:../../freeRtos/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  69:../../freeRtos/Source/list.c **** 	ensure it remains at the end of the list. */
  70:../../freeRtos/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
 483               	.LM2:
 484 0008 2FEF      		ldi r18,lo8(-1)
 485 000a 3FEF      		ldi r19,lo8(-1)
 486 000c 2383      		std Z+3,r18
 487 000e 3483      		std Z+4,r19
  71:../../freeRtos/Source/list.c **** 
  72:../../freeRtos/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  73:../../freeRtos/Source/list.c **** 	when the list is empty. */
  74:../../freeRtos/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 489               	.LM3:
 490 0010 8583      		std Z+5,r24
 491 0012 9683      		std Z+6,r25
  75:../../freeRtos/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 493               	.LM4:
 494 0014 8783      		std Z+7,r24
 495 0016 9087      		std Z+8,r25
  76:../../freeRtos/Source/list.c **** 
  77:../../freeRtos/Source/list.c **** 	pxList->uxNumberOfItems = 0;
 497               	.LM5:
 498 0018 1082      		st Z,__zero_reg__
 499 001a 0895      		ret
 501               	.Lscope1:
 503               		.stabd	78,0,0
 506               	.global	vListInitialiseItem
 508               	vListInitialiseItem:
 509               		.stabd	46,0,0
  78:../../freeRtos/Source/list.c **** }
  79:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
  80:../../freeRtos/Source/list.c **** 
  81:../../freeRtos/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  82:../../freeRtos/Source/list.c **** {
 511               	.LM6:
 512               	.LFBB2:
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 0 */
 516               	.L__stack_usage = 0
  83:../../freeRtos/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  84:../../freeRtos/Source/list.c **** 	pxItem->pvContainer = NULL;
 518               	.LM7:
 519 001c FC01      		movw r30,r24
 520 001e 1086      		std Z+8,__zero_reg__
 521 0020 1186      		std Z+9,__zero_reg__
 522 0022 0895      		ret
 524               	.Lscope2:
 526               		.stabd	78,0,0
 530               	.global	vListInsertEnd
 532               	vListInsertEnd:
 533               		.stabd	46,0,0
  85:../../freeRtos/Source/list.c **** }
  86:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
  87:../../freeRtos/Source/list.c **** 
  88:../../freeRtos/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  89:../../freeRtos/Source/list.c **** {
 535               	.LM8:
 536               	.LFBB3:
 537 0024 CF93      		push r28
 538 0026 DF93      		push r29
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 2 */
 542               	.L__stack_usage = 2
 543 0028 DC01      		movw r26,r24
 544 002a FB01      		movw r30,r22
  90:../../freeRtos/Source/list.c **** volatile xListItem * pxIndex;
  91:../../freeRtos/Source/list.c **** 
  92:../../freeRtos/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  93:../../freeRtos/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  94:../../freeRtos/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  95:../../freeRtos/Source/list.c **** 	the pxIndex member. */
  96:../../freeRtos/Source/list.c **** 	pxIndex = pxList->pxIndex;
 546               	.LM9:
 547 002c 1196      		adiw r26,1
 548 002e 2D91      		ld r18,X+
 549 0030 3C91      		ld r19,X
 550 0032 1297      		sbiw r26,1+1
  97:../../freeRtos/Source/list.c **** 
  98:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 552               	.LM10:
 553 0034 E901      		movw r28,r18
 554 0036 8A81      		ldd r24,Y+2
 555 0038 9B81      		ldd r25,Y+3
 556 003a 8283      		std Z+2,r24
 557 003c 9383      		std Z+3,r25
  99:../../freeRtos/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 559               	.LM11:
 560 003e 2483      		std Z+4,r18
 561 0040 3583      		std Z+5,r19
 100:../../freeRtos/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 563               	.LM12:
 564 0042 8A81      		ldd r24,Y+2
 565 0044 9B81      		ldd r25,Y+3
 566 0046 EC01      		movw r28,r24
 567 0048 6C83      		std Y+4,r22
 568 004a 7D83      		std Y+5,r23
 101:../../freeRtos/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 570               	.LM13:
 571 004c E901      		movw r28,r18
 572 004e 6A83      		std Y+2,r22
 573 0050 7B83      		std Y+3,r23
 102:../../freeRtos/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 575               	.LM14:
 576 0052 1196      		adiw r26,1
 577 0054 6D93      		st X+,r22
 578 0056 7C93      		st X,r23
 579 0058 1297      		sbiw r26,1+1
 103:../../freeRtos/Source/list.c **** 
 104:../../freeRtos/Source/list.c **** 	/* Remember which list the item is in. */
 105:../../freeRtos/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 581               	.LM15:
 582 005a A087      		std Z+8,r26
 583 005c B187      		std Z+9,r27
 106:../../freeRtos/Source/list.c **** 
 107:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 585               	.LM16:
 586 005e 8C91      		ld r24,X
 587 0060 8F5F      		subi r24,lo8(-(1))
 588 0062 8C93      		st X,r24
 589               	/* epilogue start */
 108:../../freeRtos/Source/list.c **** }
 591               	.LM17:
 592 0064 DF91      		pop r29
 593 0066 CF91      		pop r28
 594 0068 0895      		ret
 599               	.Lscope3:
 601               		.stabd	78,0,0
 605               	.global	vListInsert
 607               	vListInsert:
 608               		.stabd	46,0,0
 109:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
 110:../../freeRtos/Source/list.c **** 
 111:../../freeRtos/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 112:../../freeRtos/Source/list.c **** {
 610               	.LM18:
 611               	.LFBB4:
 612 006a CF93      		push r28
 613 006c DF93      		push r29
 614               	/* prologue: function */
 615               	/* frame size = 0 */
 616               	/* stack size = 2 */
 617               	.L__stack_usage = 2
 618 006e AC01      		movw r20,r24
 619 0070 DB01      		movw r26,r22
 113:../../freeRtos/Source/list.c **** volatile xListItem *pxIterator;
 114:../../freeRtos/Source/list.c **** portTickType xValueOfInsertion;
 115:../../freeRtos/Source/list.c **** 
 116:../../freeRtos/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 117:../../freeRtos/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 621               	.LM19:
 622 0072 8D91      		ld r24,X+
 623 0074 9C91      		ld r25,X
 624 0076 1197      		sbiw r26,1
 118:../../freeRtos/Source/list.c **** 
 119:../../freeRtos/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 120:../../freeRtos/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 121:../../freeRtos/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 122:../../freeRtos/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as 
 123:../../freeRtos/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 124:../../freeRtos/Source/list.c **** 	to guard against this by checking the value first and modifying the 
 125:../../freeRtos/Source/list.c **** 	algorithm slightly if necessary. */
 126:../../freeRtos/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 626               	.LM20:
 627 0078 8F3F      		cpi r24,-1
 628 007a 2FEF      		ldi r18,-1
 629 007c 9207      		cpc r25,r18
 630 007e 01F4      		brne .L5
 127:../../freeRtos/Source/list.c **** 	{
 128:../../freeRtos/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 632               	.LM21:
 633 0080 EA01      		movw r28,r20
 634 0082 EF81      		ldd r30,Y+7
 635 0084 F885      		ldd r31,Y+8
 636 0086 00C0      		rjmp .L6
 637               	.L5:
 129:../../freeRtos/Source/list.c **** 	}
 130:../../freeRtos/Source/list.c **** 	else
 131:../../freeRtos/Source/list.c **** 	{
 132:../../freeRtos/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 639               	.LM22:
 640 0088 FA01      		movw r30,r20
 641 008a 3396      		adiw r30,3
 642               	.L7:
 644               	.LM23:
 645 008c 2281      		ldd r18,Z+2
 646 008e 3381      		ldd r19,Z+3
 647 0090 E901      		movw r28,r18
 648 0092 2881      		ld r18,Y
 649 0094 3981      		ldd r19,Y+1
 650 0096 8217      		cp r24,r18
 651 0098 9307      		cpc r25,r19
 652 009a 00F0      		brlo .L6
 654               	.LM24:
 655 009c 0280      		ldd __tmp_reg__,Z+2
 656 009e F381      		ldd r31,Z+3
 657 00a0 E02D      		mov r30,__tmp_reg__
 658 00a2 00C0      		rjmp .L7
 659               	.L6:
 133:../../freeRtos/Source/list.c **** 		{
 134:../../freeRtos/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 135:../../freeRtos/Source/list.c **** 			wanted insertion position. */
 136:../../freeRtos/Source/list.c **** 		}
 137:../../freeRtos/Source/list.c **** 	}
 138:../../freeRtos/Source/list.c **** 
 139:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 661               	.LM25:
 662 00a4 8281      		ldd r24,Z+2
 663 00a6 9381      		ldd r25,Z+3
 664 00a8 1296      		adiw r26,2
 665 00aa 8D93      		st X+,r24
 666 00ac 9C93      		st X,r25
 667 00ae 1397      		sbiw r26,2+1
 140:../../freeRtos/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 669               	.LM26:
 670 00b0 EC01      		movw r28,r24
 671 00b2 AC83      		std Y+4,r26
 672 00b4 BD83      		std Y+5,r27
 141:../../freeRtos/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 674               	.LM27:
 675 00b6 1496      		adiw r26,4
 676 00b8 ED93      		st X+,r30
 677 00ba FC93      		st X,r31
 678 00bc 1597      		sbiw r26,4+1
 142:../../freeRtos/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 680               	.LM28:
 681 00be A283      		std Z+2,r26
 682 00c0 B383      		std Z+3,r27
 143:../../freeRtos/Source/list.c **** 
 144:../../freeRtos/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 145:../../freeRtos/Source/list.c **** 	item later. */
 146:../../freeRtos/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 684               	.LM29:
 685 00c2 1896      		adiw r26,8
 686 00c4 4D93      		st X+,r20
 687 00c6 5C93      		st X,r21
 688 00c8 1997      		sbiw r26,8+1
 147:../../freeRtos/Source/list.c **** 
 148:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 690               	.LM30:
 691 00ca FA01      		movw r30,r20
 692 00cc 8081      		ld r24,Z
 693 00ce 8F5F      		subi r24,lo8(-(1))
 694 00d0 8083      		st Z,r24
 695               	/* epilogue start */
 149:../../freeRtos/Source/list.c **** }
 697               	.LM31:
 698 00d2 DF91      		pop r29
 699 00d4 CF91      		pop r28
 700 00d6 0895      		ret
 706               	.Lscope4:
 708               		.stabd	78,0,0
 711               	.global	vListRemove
 713               	vListRemove:
 714               		.stabd	46,0,0
 150:../../freeRtos/Source/list.c **** /*-----------------------------------------------------------*/
 151:../../freeRtos/Source/list.c **** 
 152:../../freeRtos/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 153:../../freeRtos/Source/list.c **** {
 716               	.LM32:
 717               	.LFBB5:
 718 00d8 CF93      		push r28
 719 00da DF93      		push r29
 720               	/* prologue: function */
 721               	/* frame size = 0 */
 722               	/* stack size = 2 */
 723               	.L__stack_usage = 2
 724 00dc FC01      		movw r30,r24
 154:../../freeRtos/Source/list.c **** xList * pxList;
 155:../../freeRtos/Source/list.c **** 
 156:../../freeRtos/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 726               	.LM33:
 727 00de A281      		ldd r26,Z+2
 728 00e0 B381      		ldd r27,Z+3
 729 00e2 8481      		ldd r24,Z+4
 730 00e4 9581      		ldd r25,Z+5
 731 00e6 1496      		adiw r26,4
 732 00e8 8D93      		st X+,r24
 733 00ea 9C93      		st X,r25
 734 00ec 1597      		sbiw r26,4+1
 157:../../freeRtos/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 736               	.LM34:
 737 00ee C481      		ldd r28,Z+4
 738 00f0 D581      		ldd r29,Z+5
 739 00f2 AA83      		std Y+2,r26
 740 00f4 BB83      		std Y+3,r27
 158:../../freeRtos/Source/list.c **** 	
 159:../../freeRtos/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 160:../../freeRtos/Source/list.c **** 	item. */
 161:../../freeRtos/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 742               	.LM35:
 743 00f6 A085      		ldd r26,Z+8
 744 00f8 B185      		ldd r27,Z+9
 162:../../freeRtos/Source/list.c **** 
 163:../../freeRtos/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 164:../../freeRtos/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 746               	.LM36:
 747 00fa 1196      		adiw r26,1
 748 00fc 8D91      		ld r24,X+
 749 00fe 9C91      		ld r25,X
 750 0100 1297      		sbiw r26,1+1
 751 0102 8E17      		cp r24,r30
 752 0104 9F07      		cpc r25,r31
 753 0106 01F4      		brne .L11
 165:../../freeRtos/Source/list.c **** 	{
 166:../../freeRtos/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 755               	.LM37:
 756 0108 1196      		adiw r26,1
 757 010a CD93      		st X+,r28
 758 010c DC93      		st X,r29
 759 010e 1297      		sbiw r26,1+1
 760               	.L11:
 167:../../freeRtos/Source/list.c **** 	}
 168:../../freeRtos/Source/list.c **** 
 169:../../freeRtos/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 762               	.LM38:
 763 0110 1086      		std Z+8,__zero_reg__
 764 0112 1186      		std Z+9,__zero_reg__
 170:../../freeRtos/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 766               	.LM39:
 767 0114 8C91      		ld r24,X
 768 0116 8150      		subi r24,lo8(-(-1))
 769 0118 8C93      		st X,r24
 770               	/* epilogue start */
 171:../../freeRtos/Source/list.c **** }
 772               	.LM40:
 773 011a DF91      		pop r29
 774 011c CF91      		pop r28
 775 011e 0895      		ret
 780               	.Lscope5:
 782               		.stabd	78,0,0
 784               	.Letext0:
 785               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccHYMMpf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHYMMpf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHYMMpf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHYMMpf.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccHYMMpf.s:6      *ABS*:000000000000003a __RAMPY__
     /tmp/ccHYMMpf.s:7      *ABS*:0000000000000039 __RAMPX__
     /tmp/ccHYMMpf.s:8      *ABS*:0000000000000038 __RAMPD__
     /tmp/ccHYMMpf.s:9      *ABS*:0000000000000034 __CCP__
     /tmp/ccHYMMpf.s:10     *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHYMMpf.s:11     *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHYMMpf.s:467    .text:0000000000000000 vListInitialise
     /tmp/ccHYMMpf.s:508    .text:000000000000001c vListInitialiseItem
     /tmp/ccHYMMpf.s:532    .text:0000000000000024 vListInsertEnd
     /tmp/ccHYMMpf.s:607    .text:000000000000006a vListInsert
     /tmp/ccHYMMpf.s:713    .text:00000000000000d8 vListRemove

NO UNDEFINED SYMBOLS
